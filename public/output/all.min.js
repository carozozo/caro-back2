$(()=>{const t=$("#pageTitle"),e=$("#container"),a=$("#pageHeader"),s=$("#pageMenu"),n=$("#pageContent");const i={ROUTE_ROOT:_.includes(window.location.href,"/caro-back2")?"/caro-back2":"",pageSubject:void 0,pageQueryParam:void 0,$$accountUser:void 0,prePageQueryParam:void 0,pageSubjectName:void 0,title:void 0};$.global={generateUrl:t=>(_.startsWith(t,"/")||(t="/"+t),`${$.global.getParamVal("ROUTE_ROOT")}${t}`),aj:t=>{let{method:a="POST",data:s,suc:n,err:i,raw:o,useCache:r=!0,skipFail:l=!1}=t;const d=$.global.generateUrl(t.url);_.startsWith(d,"/main/account")&&(r=!1),_.assign(t,{url:d,method:a});const c=$.global.aj._ajCacheMap=$.global.aj._ajCacheMap||{},p=JSON.stringify({url:d,data:s,method:a});return t.beforeSend&&t.beforeSend(),r&&c[p]?(n(c[p]),void(t.complete&&t.complete())):$.ajax(t).done(t=>void 0!==t.suc?(r&&(c[p]=t.suc,setTimeout(()=>{delete c[p]},3e3)),n&&n(t.suc)):void 0!==t.war?(e.showWar(t.war,10),"reqUserNotExists"===t.msgType?$.global.refreshPage():i&&i(t.war)):void 0!==t.err?(e.showErr(t.err,!1),i&&i(t.err)):void(o&&o(t))).fail(()=>{if(l)return;i&&i("呼叫 ajax 發生錯誤"),e.showErr("呼叫 ajax 發生錯誤",!1)})},loadPage:({pageQueryParam:e,pageSubject:o}={},{setUrlHistory:r=!0,updateMenu:l=!1}={})=>{const d=e._pageSubject,c=e._pageName,p=$.param(e),u="index/page?"+p;$.global.hideAlert(),n.showPage(u,{befLoad:()=>{if(r){const t=new URL(window.location.href),a=`${t.origin}${t.pathname}?${p}`;window.history.pushState({pageQueryParam:e,pageSubject:o,path:a},"",a)}},aftLoad:()=>{i.prePageQueryParam=i.pageQueryParam||e,i.pageQueryParam=e}}),o=o||i.pageSubject,i.pageSubject=o;const h=o[d];if(!h)return;const f=h.title;if(i.title!==f&&(i.title=f,t.html(f),a.setTitle(f)),i.pageSubjectName!==d||l){const t=h.menuGroups;s.pageMenu(d,t)}s.setActiveItem(d,c),i.pageSubjectName=d},simpleLoadPage:(t,e,{query:a}={})=>{$.global.loadPage({pageQueryParam:{_pageSubject:t,_pageName:e,...a}})},loadPrevPage:()=>{$.global.loadPage({pageQueryParam:i.prePageQueryParam})},initOperator:(t,e)=>{const s=t?_.assign(t,{execMethod:(t,e)=>{let a=void 0;return $.global.aj({url:"/main/account/execMethod",method:"POST",async:!1,data:{method:t,args:e},suc:t=>{a=t}}),a}}):void 0;i.$$accountUser=s,e=e||i.pageSubject,a.setAccountOperator(s,e)},initPage:({account:t,pageSubject:e,pageQueryParam:a})=>{$.global.loadPage({pageQueryParam:a,pageSubject:e},{updateMenu:!0}),$.global.initOperator(t,e)},refreshPage:()=>{const t="/main/account/getMyInfo"+new URL(window.location.href).search;$.global.aj({url:t,suc:t=>{$.global.initPage(t)}})},getParamVal:t=>i[t],showErr:(...t)=>{e.showErr.apply(e,t)},showWar:(...t)=>{e.showWar.apply(e,t)},showInfo:(...t)=>{e.showInfo.apply(e,t)},getSystemInfo:t=>{$.global.aj({url:"/system/getSystemInfo",method:"POST",suc:e=>{t(e)},skipFail:!0})},cruiseSystemStatus:()=>{const t=()=>{$.global.getSystemInfo(t=>{const{SY_STAFF_SYNC_STATUS:e}=t;let a="";"unknown"===e&&(a="尚未同步社區幫用戶是否為信義員工, 或同步發生錯誤"),a&&$.global.showErr(a+"<br/><del>(如有疑問請撥打 0800-123456, 將不會有專人為您服務)</del>",0)})};t(),setInterval(t,18e5)},hideAlert:(...t)=>{e.hideAlert.apply(e,t)},showLoading:(...t)=>{e.showLoading.apply(e,t)},hideLoading:(...t)=>{e.hideLoading.apply(e,t)},scrollToTop:()=>{n.scrollToTop()}},a.pageHeader(),e.alert(),e.loading(),n.pageContent().scrollTopBtn(),$.global.refreshPage(),window.gsap=window.gsap||void 0,window.addEventListener("popstate",(function(t){t.state.pageQueryParam&&$.global.loadPage(t.state,{setUrlHistory:!1})})),$.global.cruiseSystemStatus()}),$.downloader={save(t,e,a,s="utf-8"){let n="";["csv","html"].includes(a)&&(n=`data:text/${a};charset=${s},`),n+=encodeURIComponent(t);const i=$("<a>"),o=$("body");i.attr("href",n),i.attr("download",`${e}.${a}`),o.append(i),i[0].click(),i.remove()},download(t,e={}){const a=$("<form>").attr({method:"post",action:$.global.generateUrl(t),target:"_blank"});for(const t in e){if(!e.hasOwnProperty(t))continue;let s=e[t];if(_.isArray(s))for(const e of s){const s=$("<input>").attr({type:"hidden",name:t+"[]",value:e});a.append(s)}else{null===s&&(s="null");const e=$("<input>").attr({type:"hidden",name:t,value:s});a.append(e)}}$("body").append(a),a.submit(),setTimeout(()=>{a.remove()})}},$.unit={getUrlParam:t=>{const e=window.location.href.slice(window.location.href.indexOf("?")+1).split("&");let a,s=[],n=0;for(;n<e.length;n++)a=e[n].split("="),s[a[0]]=a[1];return _.isString(t)?s[t]:s},isNumeric:t=>"string"==typeof t&&(!isNaN(t)&&!isNaN(parseFloat(t))),disciplineDownloadableFigure:t=>{const e=String(t).split(" "),a=e.shift(),s=e.join(" "),n=Number(a);return{isDownloadable:!_.isNaN(n)&&0!==n,firstStr:a,tailStr:s}},strToArr:t=>t.split(/\r\n|[\s\r\n,;]/)},$.fn.accountOperator=function(t,e){this.html("");const a={},s=_.size(e);let n=0;_.forEach(e,(t,e)=>{const i=t.title,o=t.menuGroups[0],{menus:r}=o,l=_.keys(r)[0],d={title:i,fn:()=>{$.global.simpleLoadPage(e,l)}};++n===s&&(d.divider=!0),a[e]=d}),t&&_.assign(a,{updateAccount:{title:"修改資料",fn:()=>{$.global.simpleLoadPage("ybt","account_edit_self")}},logout:{title:"登出",fn:()=>{$.global.aj({url:"/main/account/logout",method:"POST",data:{},suc:t=>{$.global.initPage(t)}})}}});const i=_.map(a,(t,e)=>({html:t.title,val:e,divider:t.divider})),o=$("<span>").dropDown(i,{defTitle:"Hi "+(t?t.name:"您好"),style:"warning",size:"sm",selectedCb:()=>{const t=o.val();a[t].fn()}});this.append(o);const r=$.unit.getUrlParam("_pageSubject");return _.forEach(i,(t,e)=>{r===t.val&&o.clickItem(e,!1)}),this},$.fn.alert=function(){const t=this,e=$("<div>").css({"text-align":"center",position:"absolute",padding:"20px",width:"100%",cursor:"pointer","z-index":200}).addClass("alert").click(()=>{t.hideAlert()});return _.assign(t,{showAlert:(a,s,n=2)=>{const i="alert-"+a;e.removeClass((t,e)=>(e.match(/(^|\s)alert-\S+/g)||[]).join(" ")).addClass(i),s&&(e.html(s).slideDown(200),_.isNumber(n)&&n&&setTimeout(()=>{t.hideAlert()},1e3*n))},showInfo:(e,a)=>(t.showAlert("info",e,a),t),showWar:(e,a)=>(t.showAlert("warning",e,a),t),showErr:(e,a)=>(t.showAlert("danger",e,a),t),hideAlert:()=>(e.slideUp(200),t)}),t.prepend(e).hideAlert(),t},$.fn.autoSet=function(t,{cb:e}={}){return this.find("[auto-set]").each((function(a){const s=$(this),n=s.attr("auto-set");let i=_.get(t,n);if(e){const s=e({data:t,key:n,val:i,i:a});s&&(i=s)}s.html(_.isUndefined(i)?"":i)})),this},$.fn.booleanOption=function(t={}){let{asc:e=!0,defTitle:a="是否",trueHtml:s="是",falseHtml:n="否",dropDownOpt:i={addEmpty:!0}}=t;const o=[{html:s,val:!0},{html:n,val:!1}];return e||_.reverse(o),i=_.assign({defTitle:a},i),this.dropDown(o,i),this},$.fn.bootstrapTheme=function(){const t=$("head"),e="bootstrapTheme",a=localStorage.getItem(e)||"-none-",s=t=>{localStorage.setItem(e,t),n.attr("href",(t=>t&&"-none-"!==t?`https://stackpath.bootstrapcdn.com/bootswatch/4.4.1/${t}/bootstrap.min.css`:"https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/css/bootstrap.min.css")(t))};let n=this.find(e);0===n.length&&(n=$(`<link class="${e}" rel="stylesheet">`)),t.append(n);const i=$('<div class="btn-group"></div>').css({margin:5}),o=$('<button type="button" class="btn btn-danger btn-sm dropdown-toggle" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">Theme</button>'),r=$('<div class="dropdown-menu dropdown-menu-right"></div>').css({overflow:"auto"});i.append([o,r]),this.append(i);const l=["-none-","cerulean","cosmo","cyborg","darkly","flatly","journal","litera","lumen","lux","materia","minty","pulse","sandstone","simplex","sketchy","slate","solar","spacelab","superhero","united","yeti"],d=[];for(const t of l){const e=$(`<a class="dropdown-item" style="cursor:pointer;">${t}</a>`).click(()=>{s(e.html());for(const t of d)t.removeClass("active");e.addClass("active")});a===t&&e.addClass("active"),r.append(e),d.push(e)}return s(a),this},$.fn.brief=function(t="",{linkTxt:e="",maxLength:a=20}={}){if(!t)return this;let s="",n=!0;e?(s=e,n=!0):(s=t.substr(0,a),s.length<t.length?s+="...":n=!1);const i=$("<span>");if(i.html(s),n){const e={content:t};i.addClass("text-info").css({cursor:"pointer"}).popover(e)}return i.mouseover(()=>{i.popover("show")}),i.mouseleave(()=>{i.popover("hide")}),this.append(i),this},$.fn.btn=function({type:t="primary",html:e="送出",size:a}={}){const s=$(`<button class="btn btn-${t}">${e}</button>`);let n=t;return a&&s.addClass("btn-"+a),this.css({display:"inline-block"}).append(s),_.assign(this,{disableBtn:(t=!0)=>{s.prop("disabled",t)},changeType:(t="primary")=>{s.removeClass("btn-"+n).addClass("btn-"+t),n=t}}),this},$.fn.checked=function(t){return _.isNil(t)?this.prop("checked"):(this.prop("checked",t),this)},$.fn.content=function(t={}){const e=this,{allAjaxSuc:a}=t,s=e.find("#searchMain"),n=e.find("#resultMain"),i=e.find("#outlineBlock"),o=[];let r={};s.css({marginBottom:30}),n.css({marginBottom:30,position:"relative"}).hide(),i.addClass("text-center block1");const l=$('<div class="block1 topDiv"/>');return e.prepend(l),e.$topDiv=l,_.assign(e,{contentParam:(t,e=!1)=>{if(!0===t)return r={};if(_.isUndefined(t))return _.omitBy(r,_.isUndefined);if(_.isString(t))return r[t];if(!_.isPlainObject(t))throw Error("請傳入物件");return e?r=t:_.assign(r,t)},fitOut:t=>{const{pageTipOpt:a,noticeAreaOpt:s,fnTextOpt:n}=t;if(!_.isEmpty(a)){const t=$('<button id="tipsBtn"/>');l.append(t),t.pageTips(a)}if(!_.isEmpty(s)){const t=$('<span id="noticeArea"/>');l.append(t),t.noticeArea(s)}_.isEmpty(n)||e.find("input").functionText(n)},callAjax:(t,s=[])=>{const{url:i,method:r,beforeSend:l,suc:d,err:c,complete:p,getQuery:u}=t,h=(t=>{_.isArray(t)||(t=[t]);const s=_.map([...e.find("input"),...e.find("button")],t=>$(t)),i={isSettled:!1,isSuccessful:!1},r=[];for(const e of t){const t=$("<h3>讀取中</h3>").css({opacity:.5,position:"absolute",transform:"translate(-50%, 0)",left:"50%"});r.push(t),e.before(t),e.css({opacity:.3})}return 0===o.length&&(n.show(),_.forEach(s,t=>{t.attr("original-disabled")||t.attr("original-disabled",t.disabled()),t.disabled(!0)})),o.push(i),{settle:(e=!0)=>{i.isSettled=!0,e?i.isSuccessful=!0:n.hide();for(const e of t)e.animate({opacity:1},400);for(const t of r)t.remove();const l=_.every(o,t=>t.isSettled),d=_.every(o,t=>t.isSuccessful);l&&(_.forEach(s,t=>{t.disabled("true"===t.attr("original-disabled"))}),o.splice(0,o.length)),d&&a&&a()}}})(s),f=u?_.isFunction(u)?u():u:{};$.global.aj({url:i,method:r,data:f,beforeSend:()=>{l&&l()},suc:t=>{h.settle(),d(t)},err:()=>{h.settle(!1),c&&c()},complete:()=>{p&&p()}})}}),e},$.fn.datePicker=function(t={}){const e=this,a=$.datepicker.regional["zh-TW"];return t=_.assign({showOtherMonths:!0,selectOtherMonths:!0,maxDate:0,changeMonth:!0,changeYear:!0,dateFormat:"yy-mm-dd"},t),e.datepicker("option",a).datepicker(t),e.addClass("form-control").css({display:"inline-block",width:"auto"}),t.now&&e.datepicker("setDate",moment().format("YYYY-MM-DD")),t.subtractDay&&e.datepicker("setDate",moment().subtract(t.subtractDay,"d").format("YYYY-MM-DD")),t.date&&e.datepicker("setDate",t.date),e},$.fn.disableChildren=function({selector:t,disabled:e=!0}){return this.find(t).prop("disabled",e),this},$.fn.disabled=function(t){return _.isNil(t)?this.prop("disabled"):(this.prop("disabled",t),this)},$.fn.displaySwitcher=function(t=[]){const e=this,a=[];return _.assign(e,{displayLayer:(s=0)=>{if(!t[s])throw Error("There is no layer for index "+s);let n,i;return _.forEach(t,(t,e)=>{for(n of(_.isArray(t)||(t=[t]),i=e===s?"fadeIn":"hide",t))n[i]()}),_.last(a)!==s&&a.push(s),a.length>12&&a.shift(),e},displayPrevLayer:()=>{if(a.length<2)return e;a.pop();const t=a.pop();return _.isNil(t)?e:e.displayLayer(t)}}),e},$.fn.downloadCsvLink=function(t,{query:e={},title:a="下載csv"}={}){this.parent().css({position:"relative"}),this.html(a).linkStyle();const s=$("<div>").downloadCsvOption(t,{query:e,title:a,defDisabled:!1,size:"sm"});return s.getBtn().hide(),this.append(s).attr({"data-toggle":"dropdown"}),this},$.fn.downloadCsvOption=function(t,{query:e={},defDisabled:a=!0,title:s="下載csv",size:n="md"}={}){const i=this,o={defTitle:s,style:"warning",size:n,selectedCb:()=>{const a=_.isFunction(e)?e():e;a.encode=i.val(),$.downloader.download(t,a),r(!0)}};i.dropDown([{html:"big5編碼",val:"big5"},{html:"utf-8編碼",val:"utf-8"}],o),a&&i.disableBtn();const r=i.unselectAll;return _.assign(i,{unselectAll:()=>{r(!0)}}),r(!0),i},$.fn.dropDown=function(t=[],e={}){let{addEmpty:a=!1,defTitle:s="請選擇",style:n="info",size:i="md",multiple:o,maxRow:r=12,column:l=1,selectedCb:d,showArrow:c=!0,defIndex:p,defVal:u}=e;const h=this,f=[],g=[],m=[0,1,2,3].includes(o),b="text-"+n;a&&t.unshift({html:"[清除]",_doCleanup:!0});const y=_.size(t),v=y-1,w=[],k=[];let x=Math.ceil(y/l);for(;x>r;)x=Math.ceil(y/++l);const S=(t,e)=>{if(m)return t.setSelectStatus(e);_.forEach(f,e=>{if(_.isBoolean(t))return e.setSelectStatus(t);e.setSelectStatus(e===t)})},C=()=>{const t=[];if(k.length=0,_.forEach(f,e=>{e.isSelected()&&(e._doCleanup||(k.push(e.getVal()),t.push(e.getHtml())))}),t.length){let e=t[0];t.length>1&&(e+=",..."),T.html(`${s} ${e}`)}else T.html(s)},T=(()=>{const t=$(`<button type="button" class="btn btn-outline-${n} btn-${i}" data-toggle="dropdown">`);return c&&t.addClass("dropdown-toggle"),0===y&&t.attr("disabled",!0),t})(),P=(()=>{const e=$('<div class="dropdown-menu">').css({"min-width":"2rem"}),a=$('<div class="dropdown-content">').css({"max-height":"calc(100vh - 300px)","max-width":"calc(100vh - 200px)",overflow:"auto"}),s=(()=>{const t=$("<table><tr></tr></table>");for(let e=0;e<l;e++){const e=$("<td></td>");t.append(e),w.push(e)}return t})();return e.append(a.append(s)),_.forEach(t,(t,e)=>{(_.isPlainObject(t)||_.isString(t))&&((t,e)=>{const a=Math.floor(f.length/x),s=w[a],n=_.isPlainObject(t)?t.html:t,i=_.isPlainObject(t)?t.val:t,o=!!_.isPlainObject(t)&&t.isSelected,r=_.isPlainObject(t)?t.divider:void 0,l=_.isPlainObject(t)?t._doCleanup:void 0,c=$('<a class="dropdown-item" style="cursor:pointer;"></a>').click(()=>{c._doCleanup?h.unselectAll():(S(c),C()),c._doTrigger?d&&d():c.setTrigger()}),p=$('<span style="padding-right: 5px;">√<span>').hide();c.setSelectStatus=t=>{!0===t?(c.addClass("dropdown-selected "+b),p.show()):!1===t?(c.removeClass("dropdown-selected "+b),p.hide()):(c.toggleClass("dropdown-selected "+b),p.toggle())},c.isSelected=()=>c.hasClass("dropdown-selected"),c.getHtml=()=>n,c.getVal=()=>i,c.setTrigger=(t=!0)=>{c._doTrigger=t},c._doCleanup=l,c._doTrigger=!0,g.push(i),f.push(c),c.append(p).append(n).ready(()=>{o&&c.setSelectStatus(!0),e===v&&C()}),s.append(c),r&&s.append('<div class="dropdown-divider"></div>')})(t,e)}),m?(e.prepend(['<div class="dropdown-item disabled text-center">複選</div>','<div class="dropdown-divider"></div>']),e.append(['<div class="dropdown-divider"></div>',(()=>{const t=$('<div class="dropdown-item btn-group"></div>');if(1===o||3===o){const e=$('<button type="button" class="btn btn-primary" style="margin: 0 auto;">全選</button>').click(()=>{h.selectAll(),d&&d()});t.append(e)}if(2===o||3===o){const e=$('<button type="button" class="btn btn-danger" style="margin: 0 auto;">清除</button>').click(()=>{h.unselectAll(),d&&d()});t.append(e)}return t})()]),e.click(t=>{t.stopPropagation()}),e):e})();return h.html("").css({display:"inline-block",verticalAlign:"middle"}).append((()=>{const t=[T];return y>0&&t.push(P),t})()),_.assign(h,{val:t=>{if(_.isUndefined(t))return m?k:k[0];const e=_.isArray(t)?t:[t];_.forEach(f,t=>{const a=t.getVal();e.includes(a)&&t.click()})},clickItem:(t=0,e)=>{const a=_.isArray(t)?t:[t];return _.forEach(a,t=>{const a=f[t];a&&a.setTrigger(e)||a.click()}),h},selectAll:t=>{if(m)_.forEach(f,t=>{S(t,!0)});else if(t)S(!0);else{const t=f[f.length-1];t&&S(t)}return C(),h},unselectAll:t=>{if(m)_.forEach(f,t=>{S(t,!1)});else if(t)S(!1);else{const t=f[0];t&&S(t)}return C(),h},getBtn:()=>T,disableBtn:(t=!0)=>{T.prop("disabled",t)},resetDefault:()=>{if(h.unselectAll(),_.isNumber(p)||_.isArray(p))return _.isNumber(p)&&(p=[p]),void _.forEach(p,t=>{h.clickItem(t)});_.isEmpty(u)||(_.isArray(u)||(u=[u]),_.forEach(u,t=>{h.clickItem(_.indexOf(g,t))}))},setDefTitle:t=>{s=t?`[${t}]`:t}}),h.setDefTitle(s),h.resetDefault(),h},$.fn.foldColumn=function(t,{foldWidth:e=80,spread:a=40}={}){const s=this;if(Array.isArray(t)||(t=[t]),_.isEmpty(t))return s;s.find("td").css({wordBreak:"break-all"});for(let n of t){const t=.3,i=[];let o=!1;const r=n.foldWidth||e,l=n.spread||a,d=n.key,c=r+l,p=s.find(`th[data-key='${d}']`).css({cursor:"pointer",width:r}).click(()=>{o=!o;const e=o?c:r,a=o?{wordBreak:"break-all",whiteSpace:"normal"}:{wordBreak:"keep-all",whiteSpace:"nowrap"};gsap.to(p,t,{width:e}),gsap.set(i,a)});for(const t of s.find(`td[data-key='${d}']`)){const e=$(t);i.push(e),e.css({wordBreak:"keep-all",whiteSpace:"nowrap",textOverflow:"ellipsis",overflow:"hidden"})}}return s.css({tableLayout:"fixed"}),s},$.fn.functionText=function({enterCb:t}){return this.focus((function(){$(this).select()})),this.keyup((function(e){13===e.keyCode&&t&&t()})),this},$.fn.goBackLink=function({title:t="←回上層",style:e="primary",cb:a}={}){return this.html(t).css({display:"inline-block",float:"right",fontSize:"1.1em",marginBottom:12}).linkStyle(e).click(()=>{a()}),this},$.fn.input=function(t={}){const{title:e="",type:a="text",val:s="",emptyVal:n="",width:i="auto",placeholder:o,size:r}=t,l=$(`<span>${e}</span>`),d=$(`<input type="${a}" class="form-control" value="${s}">`).css({width:i}).on("blur",()=>{_.trim(d.val())||d.val(n)});return o&&d.attr("placeholder",o),r&&d.attr("size",r),this.inputGroup([d],{prependItems:[l]}),_.assign(this,{val:(...t)=>d.val.apply(d,t),disabled:t=>{if(_.isNil(t))return d.prop("disabled");d.prop("disabled",t)},resetDefVal:()=>{d.val(s)}}),this},$.fn.inputGroup=function(t,{prependItems:e=[],appendItems:a=[]}={}){const s=$('<div class="input-group">'),n=t=>{for(const e of t)"SPAN"===e.prop("tagName")&&e.addClass("input-group-text")};if(!_.isEmpty(e)){const t=$('<div class="input-group-prepend">');t.append(e),s.append(t),n(e)}if(s.append(t),n(t),!_.isEmpty(a)){const t=$('<div class="input-group-append">');t.append(a),s.append(t),n(a)}return this.css({display:"inline-block",verticalAlign:"middle"}).append(s),this},$.fn.isDisabledOption=function(t={}){return this.booleanOption(_.assign({defTitle:"已刪除"},t)),this},$.fn.limitInput=function(){const t=this;return t.input({title:"每頁筆數",val:50,size:2}),t.keyup(()=>{let e=Number(t.val());_.isNaN(e)?e=50:e<1?e=1:e>200&&(e=200),t.val(e)}),t},$.fn.linkStyle=function(t="info"){return this.addClass("text-"+t).css({cursor:"pointer",textDecoration:"underline",textUnderlinePosition:"under"}),this},$.fn.loading=function(){const t=this,e=$('<div><h1 class="loadingMsg">資料處理中...</h1></div>').css({position:"absolute",top:"50%",left:"50%",transform:"translate(-50%, -50%)"}),a=$("<div>").css({width:"100%",height:"100%",opacity:"0.5",position:"absolute","background-color":"black","text-align":"center"}).hide().append(e);return t.prepend(a),_.assign(t,{showLoading:()=>{const e=_.map(t.find("*"),t=>"absolute"===$(t).css("position")?parseInt($(t).css("z-index"))||1:0),s=_.max(e);a.css({"z-index":s+1}),a.show()},hideLoading:()=>{setTimeout(()=>{a.fadeOut()},200)}}),t},$.fn.navTab=function(t=[]){const e=$('<ul class="nav nav-tabs">'),a=[],s=[];for(const n of t){const t=_.isEmpty(n.title)?"-":n.title,i=n.isDef,o=n.onClick;let r=n.$target;if(_.isString(r)&&(r=$(r)),!r)throw new Error("請設定 $target");if(0===r.length)throw new Error("找不到 $target");a.push(r);const l=$(`<a class="nav-link" style="cursor: pointer;">${t}</a>`);s.push(l);const d=$('<li class="nav-item"></li>').click(()=>{_.forEach(s,t=>{t.removeClass("active").addClass("text-primary")}),l.removeClass("text-primary").addClass("active"),_.forEach(a,t=>{t.hide()}),r.fadeIn(),o&&o()});e.append(d),d.append(l),i?l.addClass("active"):(l.addClass("text-primary"),r.hide())}return this.append(e),this},$.fn.noticeArea=function(t){const{noticeArr:e=[],type:a="warning"}=t,s=_.size(e);let n=!1,i=!1;if(_.isEmpty(e))return this;const o=e.shift(),r=$("<div/>").addClass("bg-"+a).css({padding:3}),l=$("<span>△</span>"),d=$("<span/>").html("&nbsp;&nbsp;←點擊展開"),c=$("<div/>").html(o).css({padding:3,paddingBottom:0}),p=$("<div/>").css({display:"none",padding:3,paddingTop:0}),u=(t,e=0)=>{if(_.isArray(t))return e+=2,void _.forEach(t,t=>{u(t,e)});const a=$("<div/>");t||a.css({height:6});for(let a=0;a<e;a++)t="&nbsp;"+t;a.html(t),p.append(a)},h=$("<div/>").css({border:"2px solid",marginBottom:24});return r.append([l," 貼心體醒"]),h.append([r,c,p]),_.forEach(e,t=>{u(t)}),this.append(h),s>1&&(r.append(d).css({cursor:"pointer"}).click(()=>{n?l.html("△"):l.html("▽"),d.hide(),n=!n,p.slideToggle(200)}),setInterval(()=>{d.html(i?"&nbsp;&nbsp;←點擊展開":"&nbsp;←&nbsp;點擊展開"),i=!i},900)),this},$.fn.pageContent=function(){const t=this,e=gsap.timeline(),a=()=>{t.html('<h1 class="text-center">無法讀取頁面</h1>')};return t.html('<h1 class="text-center">請選擇左邊選單</h1>'),t.showPage=(s,{befLoad:n,aftLoad:i}={})=>(n&&n(),$.global.aj({url:s,method:"GET",err:a,raw:a=>{e.to(t,.2,{y:-30,opacity:0,onComplete:()=>{t.html(a),i&&i()}}).to(t,.2,{ease:gsap.parseEase("Back").easeOut.config(3),y:0,opacity:1,delay:.2})}}),t),t},$.fn.pageHeader=function(){const t=this;t.html("").css({position:"relative"}).addClass("bg-primary");const e=(()=>{const t=$("<span>").css({"z-index":2,position:"absolute",top:25,right:10}),e=$("<span>"),a=$("<span>").bootstrapTheme();return t.append([e,a]),t.$accountOperator=e,t})();return t.append(e),_.assign(t,{setTitle:e=>{const a=gsap.timeline({repeat:-1}),s=_.map(e.split(""),t=>$(`<div>${t}</div>`).css({display:"inline-block"})),n=$('<h1 class="text-white" id="h1"></h1>').css({"z-index":1,margin:"auto","text-align":"center"}).append(s);t.find("#h1").remove(),t.append(n);a.from(s,{duration:.5,ease:gsap.parseEase("Back").easeOut.config(1),opacity:0,scale:2,x:300}).to(s,{duration:.5,opacity:0,x:-300,delay:6,stagger:.25})},setAccountOperator:(t,a)=>{e.$accountOperator.accountOperator(t,a)}}),t},$.fn.pageMenu=function(t,e){const a=this,s=[],n=[],i=[];a.hide().html("");const o=(t,e="primary")=>$(`<div class="btn-outline-${e}">`).css({display:"inline-block",width:"50%",padding:5,textAlign:"center",cursor:"pointer",filter:"drop-shadow(5px 5px 2px rgba(0, 0, 0, 0.2))"}).html(t),r=(()=>{const t=$('<div class="menu-header"></div>').css({padding:0}),e=o("展開").click(()=>{a.extendCategory()}),s=o("縮合","secondary").click(()=>{a.collapseCategory()});return t.append([e,s]),t})(),l=$('<div class="menu-receptacle"/>').css({height:"100%",overflow:"scroll","flex-grow":1});a.append([r,l]),_.forEach(e,e=>{const{category:o,menus:r}=e,d=(t=>{const e=$('<div class="list-group"/>').css({overflow:"hidden"}),a=gsap.timeline({paused:!0});return a.to(e,.2,{height:0}),_.assign(e,{extendCategory:()=>{e.$_isOpen||(a.reverse(),e.$_isOpen=!0,e.$_$menuCategoryTitle.showMinus())},collapseCategory:()=>{e.$_isOpen&&(a.play(),e.$_isOpen=!1,e.$_$menuCategoryTitle.showPlus())},toggleCategory:()=>{if(e.$_isOpen)return e.collapseCategory();e.extendCategory()},$_isOpen:!0}),n.push(e),e})(),c=(t=>{const e=$(`<a class="list-group-item list-group-item-dark">${t} -</a>`).css({"font-weight":"bolder",padding:"0.3rem 1.25rem",cursor:"context-menu","border-top-width":2,"border-top-color":"#adb5bd"}).click(()=>{e.$_$menuCategory.toggleCategory()});return _.assign(e,{highlight:()=>{_.forEach(s,t=>{t===e?(t.removeClass("list-group-item-dark"),t.addClass("list-group-item-secondary")):(t.removeClass("list-group-item-secondary"),t.addClass("list-group-item-dark"))})},showPlus:()=>{e.html(t+" +")},showMinus:()=>{e.html(t+" -")}}),s.push(e),e})(o);_.assign(d,{$_category:o,$_$menuCategoryTitle:c}),_.assign(c,{$_category:o,$_$menuCategory:d}),l.append([c,d]),_.forEach(r,(e,s)=>{let n=e,r=!1;_.isPlainObject(e)&&(n=e.title,r=e.abandon),r&&(n=`${n}(${_.isString(r)?r:"待移除"})`);const l=((e,s,n={})=>{const{abandon:o}=n,r=$(`<div class="list-group-item">${e}</div>`).click(()=>{a.setActiveItem(t,s),$.global.simpleLoadPage(t,s)}).mouseover(()=>{l.play()}).mouseleave(()=>{l.reverse()}).css({cursor:"pointer"});o&&r.css({"text-decoration":"line-through"});const l=gsap.timeline({paused:!0});return l.to(r,.2,{boxShadow:"0px 5px 2px 1px rgba(0, 0, 0, 0.3) inset",transformPerspective:500,transformOrigin:"left",rotationY:6}),_.assign(r,{setActive:()=>{r.addClass("active"),r.$_$menuCategoryTitle.highlight()},unsetActive:()=>{r.removeClass("active")}}),i.push(r),r})(n,s,{abandon:r});_.assign(l,{$_category:o,$_title:n,$_pageSubject:t,$_pageName:s,$_$menuCategoryTitle:c,$_$menuCategory:d}),d.append(l)})});return a.css({width:180,display:"flex",position:"fixed",overflow:"hidden",height:"85%",filter:"drop-shadow(5px 5px 2px rgba(0, 0, 0, 0.2))","z-index":100,"flex-flow":"column",left:-10}).mouseenter(()=>{gsap.to(a,.3,{x:10})}).mouseleave(()=>{gsap.to(a,.1,{x:0})}).fadeIn(),_.assign(a,{setActiveItem:(t,e)=>{a.collapseCategory(),_.forEach(i,a=>{a.unsetActive(),a.$_pageSubject===t&&a.$_pageName===e&&(a.setActive(),a.$_$menuCategory.extendCategory())})},extendCategory:t=>{_.forEach(n,e=>{t&&e.$_category!==t||e.extendCategory()})},collapseCategory:t=>{_.forEach(n,e=>{t&&e.$_category!==t||e.collapseCategory()})}}),a},$.fn.pageTips=function(t){const{title:e="Tips",modalSubId:a="",btnType:s="warning",tipArr:n=[]}=t;let i=0;if(_.isEmpty(n))return this.hide();const o=$('<div class="tipsContent">'),r=(t,e=-1)=>{if(_.isArray(t)){e+=1;for(const a of t)r(a,e);return}for(let e of["primary","secondary","success","danger","warning","info"])t=(t=t.replace(new RegExp(`</${e}>`,"g"),"</span>")).replace(new RegExp(`<${e}>`,"g"),`<span class="text-${e}">`);t=_.trim(t),0===e&&t&&i++;const a=0===e?i+".":"-";o.append($(`<div>${a} ${t||"&nbsp;"}</div>`).css({"margin-left":e+"em"}))};return r(n),this.html(e).addClass("btn btn-sm btn-"+s).css({"margin-left":3,"margin-right":3,"margin-bottom":3}),this.popWindow({modalId:"pageTipsModal-"+a,$targetBody:o}),this},$.fn.pagination=function({total:t=0,limit:e=50,currentPage:a=1,cb:s}){const n=this;n.html("");const i=(t,e=0)=>(t=parseInt(t,10),(_.isNaN(t)||t<1)&&(t=e),t),o=()=>{p.html(t),a=f.val()||a,e=h.html()||e,t=i(t),e=i(e,50),a=i(a,1),b!==e&&(b=e,a=1);const s=Math.ceil(t/e);u.html(s),a>s&&(a=s),a<1&&(a=1),h.html(e);const n=_.size(String(a))+1;f.prop("size",n).val(a),s>0&&a>1?g.addClass("text-primary").css({cursor:"pointer"}).off("click").click(()=>{g.__clickFn(),o(),c()}):g.removeClass("text-primary").css({cursor:"auto"}).off("click"),s>0&&a!==s?m.addClass("text-primary").css({cursor:"pointer"}).off("click").click(()=>{m.__clickFn(),o(),c()}):m.removeClass("text-primary").css({cursor:"auto"}).off("click")},r=({pre:t,suf:e})=>({$pre:$("<span>").html(t).css({"padding-left":10,"padding-right":5}),$suf:$("<span>").html(e).css({"padding-left":5,"padding-right":10}).addClass("border-right border-info")}),l=({pre:t,suf:e})=>{const{$pre:a,$suf:s}=r({pre:t,suf:e}),i=$("<span>");return n.append([a,i,s]),i},d=(t,e)=>{const a=$("<a>").html(t).css({"padding-left":10,"padding-right":10}).addClass("border-right border-info");return a.__clickFn=e,n.append(a),a},c=()=>{s({total:t,limit:e,currentPage:a,skip:(a-1)*e})},p=l({pre:"總共",suf:"筆"}),u=l({pre:"共",suf:"頁"}),h=l({pre:"每頁",suf:"筆"}),f=(({pre:t,suf:e})=>{const{$pre:a,$suf:s}=r({pre:t,suf:e}),i=$('<input type="text">').focus((function(){$(this).select()})).keyup((function(t){13===t.keyCode&&(o(),c())}));return n.append([a,i,s]),i})({pre:"目前在第",suf:"頁"}),g=d("上一頁",()=>{f.val(i(f.val())-1)}),m=d("下一頁",()=>{f.val(i(f.val())+1)});n.append(m).css({"margin-bottom":5});let b=i(e);return _.assign(n,{setCurrentPage:(t=1)=>{f.val(i(t))}}),o(),n},$.fn.popWindow=function({modalId:t,$targetBody:e,$targetHeader:a,$targetFooter:s}){$("#"+t).remove();const n=$(`<div class="modal fade" id="${t}" tabindex="-1" role="dialog" aria-hidden="true">`),i=$('<div class="modal-dialog" role="document">'),o=$('<div class="modal-content">'),r=$('<div class="modal-header">'),l=$('<div class="modal-body">'),d=$('<div class="modal-footer">'),c=$('<button type="button" class="close" data-dismiss="modal" aria-label="Close"> <span aria-hidden="true">&times;</span></button>');return _.isString(e)&&(e=$(e)),_.isString(a)&&(a=$(a)),_.isString(s)&&(s=$(s)),this.attr("data-toggle","modal").attr("data-target","#"+t),n.append(i),i.append(o),o.append([r,l,d]),l.append(e),a&&r.append(a),s&&d.append(s),r.append(c),$("body").append(n),_.assign({hideModal:()=>{c.click()}}),this},$.fn.receptacle=function(){const t={};return this.find("[id]").each((function(){const e=$(this).attr("id");t[""+e]=$("#"+e)})),this.find("[class]").each((function(){const e=$(this).attr("class");t[e+"Class"]=$("."+e)})),_.assign(this,{getMapVal:(e={})=>(_.forEach(t,(t,a)=>{if(!_.isFunction(t.val))return;const s=t.val();void 0!==s&&""!==s&&(e[a]=s)}),e),domMap:t}),this},$.fn.scrollTopBtn=function({$container:t=$("body")}={}){const e=this,a=$("<div/>").css({opacity:.8,position:"fixed",bottom:20,right:40,display:"inline-flex"}).hide(),s=$("<div>x</div>").css({display:"table-cell","text-align":"center","vertical-align":"middle","line-height":0,"padding-bottom":4}),n=$('<div id="hideBtnScrollTopBtn"><div>').css({position:"relative",display:"table",width:20,height:20,bottom:10,left:-10,cursor:"pointer","border-radius":10,"background-color":"red"}).append(s).click(()=>{a.fadeOut()}),i=$('<button class="btn btn-secondary align-middle"><h3>- Scroll Top -</h3></button>').css({position:"relative","box-shadow":"5px 5px 5px rgba(0, 0, 0, 0.2)"}).click(()=>{(e[0]===window?$("html, body"):e).animate({scrollTop:0})});return a.append([i,n]),t.append(a),e.scroll(()=>{const t=e.height();return e.scrollTop()>t?a.fadeIn():a.fadeOut()}),_.assign(e,{scrollToTop:()=>{i.click()}}),e},$.fn.tableHeaderSorter=function({keys:t=[],fn:e={},sortKey:a=""}={}){const s=this.find("tr:first"),n=[void 0,!1,!0],i=n.length-1,o=(()=>{let t,e;return 0===a.indexOf("-")?(e=!1,t=a.slice(1)):a&&(e=!0,t=a),{key:t,asc:e}})();return _.forEach(t,t=>{const a=(t=>s.find(`[data-key='${t}']`))(t),r=a.html();let l=t===o.key?o.asc:void 0,d=n.indexOf(l);const c=()=>{const t=`${r}${l?"↑":!1===l?"↓":""}`;a.html(t)};a.css({cursor:"pointer","text-decoration":"underline"}),a.click(()=>{++d>i&&(d=0),l=n[d],o.key=void 0!==l?a.attr("data-key"):void 0,o.asc=l,c(),e()}),c()}),_.assign(this,{getSortKey:()=>`${!1===o.asc?"-":""}${o.key||""}`}),this},$.fn.tableLayout=function(t){const e=$("<thead>"),a=$("<tbody>"),s=$("<tr>"),n=$("<tr>");return _.forEach(t,(t,e)=>{t&&(s.append(`<th data-key="${t}">${e}</th>`),n.append(`<td data-key="${t}">${e}</td>`))}),this.html("").append([e,a]).addClass("table table-striped table-hover"),e.append(s).addClass("thead-dark"),a.append(n),this},$.fn.tableList=function(t,e,{addIndex:a=!0}={}){const s=this,n=s.find("thead"),i=s.find("tbody"),o=n.find("tr:first"),r=i.find("tr:first");a&&(o.prepend($("<th>#</th>").css({width:50})),r.prepend($('<td data-index="true"></td>'))),n.find("th").css({position:"sticky",top:-1}),i.html("");const l=_.map(t,(t,a)=>{const s=r.clone();return s.find("[data-index='true']").html(a+1),s.find("[data-key]").each((n,i)=>{const o=$(i),r=o.attr("data-key");o.html("");let l=_.get(t,r);if(l=_.isNil(l)?"":l,e){const n=e({val:l,key:r,data:t,$tr:s,$ele:o,index:a});if(void 0===n)return;l=n}o.html(l)}),s});i.append(l);return gsap.timeline().from(l,{duration:.2,ease:"back.inOut(1)",x:100,opacity:0,stagger:.04,clearProps:"transform"}),_.assign(s,{getHeaderElement:t=>s.find("tr:first").find(`[data-key='${t}']`)}),s},$.fn.textarea=function({title:t="",width:e="auto"}={}){const a=$(`<span>${t}</span>`),s=$(`<textarea class="form-control" aria-label="${a}"></textarea>`).css({});return this.inputGroup([s],{prependItems:[a]}).css({width:e}),_.assign(this,{getTextarea:()=>s}),this},$.fn.timeRangePickers=function({title:t="時間區間",startOpt:e={},endOpt:a={},showStart:s=!0,showEnd:n=!0,showHour:i=!1,showMinute:o=!1,showSecond:r=!1,defStartGetVal:l="",defEndGetVal:d=""}={}){const c=(t,e,a=2)=>{const s=$("<div>"),n=[];for(let t=0;t<e;t++)n.push(_.padStart(String(t),2,"0"));return s.dropDown(n,{defTitle:t,style:"secondary",showArrow:!1,column:a}).clickItem(),s.getBtn().css({"border-radius":0}).addClass("form-control"),s},p=()=>c("時",24),u=()=>c("分",60,6),h=()=>c("秒",60,6),f='<input type="text" size="10">',g=$(f).datePicker(e),m=p(),b=u(),y=h(),v=$("<span>-</span>").css({padding:2,"background-color":"rgba(0,0,0,0)","border-color":"rgba(0,0,0,0)","border-radius":0}),w=$(f).datePicker(a),k=p(),x=u(),S=h(),C=g.val(),T=w.val();s||(g.hide(),v.hide()),n||(w.hide(),v.hide()),i||(m.hide(),k.hide()),o||(b.hide(),x.hide()),r||(y.hide(),S.hide());const P=$(`<span>${t}</span>`),E=[g,m,b,y,v,w,k,x,S];return this.inputGroup(E,{prependItems:[P]}),_.assign(this,{startDateTimeVal:t=>{if(_.isNil(t)){const t=l?moment(l).format("YYYY-MM-DD"):"";let e=g.val()||t;if(e){moment(e,"YYYY-MM-DD",!0).isValid()||(e=t)}if(g.val(e),!e)return e;let a=e+" "+m.val()+":"+b.val()+":"+y.val();return a=moment(a).toISOString(),a}const e=moment(t);g.val(e.format("YYYY-MM-DD")),m.val(e.format("HH")),b.val(e.format("mm")),y.val(e.format("ss"))},endDateTimeVal:t=>{if(_.isNil(t)){let t=w.val();if(t){moment(t,"YYYY-MM-DD",!0).isValid()||(t=d?moment(d).format("YYYY-MM-DD"):"")}if(w.val(t),!t)return d;let e=t+" "+k.val()+":"+x.val()+":"+S.val();return e=moment(e).toISOString(),e}const e=moment(t);w.val(e.format("YYYY-MM-DD")),k.val(e.format("HH")),x.val(e.format("mm")),S.val(e.format("ss"))},resetDef:({resetStart:t=!0,resetEnd:e=!0}={})=>{t&&(g.val(C),_.forEach([m,b,y],t=>{t.val("00")})),e&&(w.val(T),_.forEach([k,x,S],t=>{t.val("00")}))},getStartInput:()=>g,getEndInput:()=>w}),this},$.fn.toolTip=function(t,e={}){return this.attr({title:t}).tooltip(e),this};let index=0;$.fn.uploadFile=function(t,{title:e="選擇檔案",btnTxt:a="上傳"}={}){const s="點擊選擇檔案",n="uploadFile"+index++,i=()=>l[0].files[0],o=()=>{const t=(()=>{const t=i();return t?t.name:""})()||s;d.html(t)},r=$('<div class="custom-file">'),l=$(`<input type="file" class="" id="${n}">`).css({width:"9rem"}).change(()=>{o()}),d=$(`<label class="custom-file-label" for="${n}">${s}</label>`).css({overflow:"hidden",height:"100%"});r.append([l,d]);const c=$(`<span>${e}</span>`),p=$(`<button class="btn btn-primary">${a}</button>`).click(()=>{p.disabled(!0);const e=new FormData,a=i();e.append("fileFieldName",a);$.global.aj({method:"POST",url:t,data:e,processData:!1,contentType:!1,suc:t=>{$.global.showInfo(t)}}).always(()=>{p.disabled(!1),l.val(""),d.html(s)})});return this.inputGroup([r],{prependItems:[c],appendItems:[p]}),o(),this},$.fn.variableInput=function(t,{dropDownOpt:e}={}){const a=$("<div>").dropDown(t,{...e,defTitle:""}).clickItem();a.find("button").css({"border-top-right-radius":0,"border-bottom-right-radius":0});const s=$('<input type="text" class="form-control">');return this.inputGroup([s],{prependItems:[a]}),_.assign(this,{dropDownVal:t=>a.val(t),inputVal:t=>{if(_.isUndefined(t))return s.val();s.val(t)},clean:()=>{a.unselectAll(),s.val("")}}),this},$.fn.accountRoleOption=function(){const t=this;return $.global.aj({url:"/main/account/getRoleMap",data:{},suc:e=>{const a=e.roleMap,s=_.map(a,(t,e)=>({val:e,html:t})),n={addEmpty:!0,defTitle:"身份",style:"success"};t.dropDown(s,n)}}),t};
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LmpzIiwiZ2Vhci9kb3dubG9hZGVyLmpzIiwiZ2Vhci91bml0LmpzIiwicGx1Z2luL2FjY291bnRPcGVyYXRvci5qcyIsInBsdWdpbi9hbGVydC5qcyIsInBsdWdpbi9hdXRvU2V0LmpzIiwicGx1Z2luL2Jvb2xlYW5PcHRpb24uanMiLCJwbHVnaW4vYm9vdHN0cmFwVGhlbWUuanMiLCJwbHVnaW4vYnJpZWYuanMiLCJwbHVnaW4vYnRuLmpzIiwicGx1Z2luL2NoZWNrZWQuanMiLCJwbHVnaW4vY29udGVudC5qcyIsInBsdWdpbi9kYXRlUGlja2VyLmpzIiwicGx1Z2luL2Rpc2FibGVDaGlsZHJlbi5qcyIsInBsdWdpbi9kaXNhYmxlZC5qcyIsInBsdWdpbi9kaXNwbGF5U3dpdGNoZXIuanMiLCJwbHVnaW4vZG93bmxvYWRDc3ZMaW5rLmpzIiwicGx1Z2luL2Rvd25sb2FkQ3N2T3B0aW9uLmpzIiwicGx1Z2luL2Ryb3BEb3duLmpzIiwicGx1Z2luL2ZvbGRDb2x1bW4uanMiLCJwbHVnaW4vZnVuY3Rpb25UZXh0LmpzIiwicGx1Z2luL2dvQmFja0xpbmsuanMiLCJwbHVnaW4vaW5wdXQuanMiLCJwbHVnaW4vaW5wdXRHcm91cC5qcyIsInBsdWdpbi9pc0Rpc2FibGVkT3B0aW9uLmpzIiwicGx1Z2luL2xpbWl0SW5wdXQuanMiLCJwbHVnaW4vbGlua1N0eWxlLmpzIiwicGx1Z2luL2xvYWRpbmcuanMiLCJwbHVnaW4vbmF2VGFiLmpzIiwicGx1Z2luL25vdGljZUFyZWEuanMiLCJwbHVnaW4vcGFnZUNvbnRlbnQuanMiLCJwbHVnaW4vcGFnZUhlYWRlci5qcyIsInBsdWdpbi9wYWdlTWVudS5qcyIsInBsdWdpbi9wYWdlVGlwcy5qcyIsInBsdWdpbi9wYWdpbmF0aW9uLmpzIiwicGx1Z2luL3BvcFdpbmRvdy5qcyIsInBsdWdpbi9yZWNlcHRhY2xlLmpzIiwicGx1Z2luL3Njcm9sbFRvcEJ0bi5qcyIsInBsdWdpbi90YWJsZUhlYWRlclNvcnRlci5qcyIsInBsdWdpbi90YWJsZUxheW91dC5qcyIsInBsdWdpbi90YWJsZUxpc3QuanMiLCJwbHVnaW4vdGV4dGFyZWEuanMiLCJwbHVnaW4vdGltZVJhbmdlUGlja2Vycy5qcyIsInBsdWdpbi90b29sVGlwLmpzIiwicGx1Z2luL3VwbG9hZEZpbGUuanMiLCJwbHVnaW4vdmFyaWFibGVJbnB1dC5qcyIsInBsdWdpbi9tYWluL2FjY291bnRSb2xlT3B0aW9uLmpzIl0sIm5hbWVzIjpbIiQiLCIkcGFnZVRpdGxlIiwiJGNvbnRhaW5lciIsIiRwYWdlSGVhZGVyIiwiJHBhZ2VNZW51IiwiJHBhZ2VDb250ZW50IiwiUEFSQU0iLCJST1VURV9ST09UIiwiXyIsImluY2x1ZGVzIiwid2luZG93IiwibG9jYXRpb24iLCJocmVmIiwicGFnZVN1YmplY3QiLCJ1bmRlZmluZWQiLCJwYWdlUXVlcnlQYXJhbSIsIiQkYWNjb3VudFVzZXIiLCJwcmVQYWdlUXVlcnlQYXJhbSIsInBhZ2VTdWJqZWN0TmFtZSIsInRpdGxlIiwiZ2xvYmFsIiwiZ2VuZXJhdGVVcmwiLCJ1cmwiLCJzdGFydHNXaXRoIiwiZ2V0UGFyYW1WYWwiLCJhaiIsIm9wdCIsIm1ldGhvZCIsImRhdGEiLCJzdWMiLCJlcnIiLCJyYXciLCJ1c2VDYWNoZSIsInNraXBGYWlsIiwiYXNzaWduIiwiY2FjaGVNYXAiLCJfYWpDYWNoZU1hcCIsImNhY2hlS2V5IiwiSlNPTiIsInN0cmluZ2lmeSIsImJlZm9yZVNlbmQiLCJjb21wbGV0ZSIsImFqYXgiLCJkb25lIiwicmVzcCIsInNldFRpbWVvdXQiLCJ3YXIiLCJzaG93V2FyIiwibXNnVHlwZSIsInJlZnJlc2hQYWdlIiwic2hvd0VyciIsImZhaWwiLCJsb2FkUGFnZSIsInNldFVybEhpc3RvcnkiLCJ1cGRhdGVNZW51IiwiX3BhZ2VTdWJqZWN0IiwiX3BhZ2VOYW1lIiwicXVlcnlTdHIiLCJwYXJhbSIsImhpZGVBbGVydCIsInNob3dQYWdlIiwiYmVmTG9hZCIsIlVSTCIsIm5ld1VybCIsIm9yaWdpbiIsInBhdGhuYW1lIiwiaGlzdG9yeSIsInB1c2hTdGF0ZSIsInBhdGgiLCJhZnRMb2FkIiwiZ3JvdXBDZmciLCJodG1sIiwic2V0VGl0bGUiLCJtZW51R3JvdXBzIiwicGFnZU1lbnUiLCJzZXRBY3RpdmVJdGVtIiwic2ltcGxlTG9hZFBhZ2UiLCJxdWVyeSIsImxvYWRQcmV2UGFnZSIsImluaXRPcGVyYXRvciIsImFjY291bnQiLCJleGVjTWV0aG9kIiwiYXJncyIsInJldCIsImFzeW5jIiwicmVzIiwic2V0QWNjb3VudE9wZXJhdG9yIiwiaW5pdFBhZ2UiLCJ1cmxGb3JNeUluZm8iLCJzZWFyY2giLCJrZXkiLCJhcHBseSIsInNob3dJbmZvIiwiZ2V0U3lzdGVtSW5mbyIsImNiIiwiY3J1aXNlU3lzdGVtU3RhdHVzIiwiY3J1aXNlIiwiU1lfU1RBRkZfU1lOQ19TVEFUVVMiLCJlcnJNc2ciLCJzZXRJbnRlcnZhbCIsInNob3dMb2FkaW5nIiwiaGlkZUxvYWRpbmciLCJzY3JvbGxUb1RvcCIsInBhZ2VIZWFkZXIiLCJhbGVydCIsImxvYWRpbmciLCJwYWdlQ29udGVudCIsInNjcm9sbFRvcEJ0biIsImdzYXAiLCJhZGRFdmVudExpc3RlbmVyIiwiZXZlbnQiLCJzdGF0ZSIsImRvd25sb2FkZXIiLCJbb2JqZWN0IE9iamVjdF0iLCJmaWxlIiwiZmlsZU5hbWUiLCJmaWxlVHlwZSIsImVuY29kZVR5cGUiLCJjb250ZW50IiwiZW5jb2RlVVJJQ29tcG9uZW50IiwiJGxpbmsiLCIkYm9keSIsImF0dHIiLCJhcHBlbmQiLCJjbGljayIsInJlbW92ZSIsInF1ZXJ5T2JqIiwiJGZvcm0iLCJhY3Rpb24iLCJ0YXJnZXQiLCJoYXNPd25Qcm9wZXJ0eSIsInZhbCIsImlzQXJyYXkiLCJ2IiwiJGhpZGRlbkZpZWxkIiwidHlwZSIsIm5hbWUiLCJ2YWx1ZSIsInN1Ym1pdCIsInVuaXQiLCJnZXRVcmxQYXJhbSIsImhhc2hlcyIsInNsaWNlIiwiaW5kZXhPZiIsInNwbGl0IiwiaGFzaCIsImkiLCJsZW5ndGgiLCJpc1N0cmluZyIsImlzTnVtZXJpYyIsInN0ciIsImlzTmFOIiwicGFyc2VGbG9hdCIsImRpc2NpcGxpbmVEb3dubG9hZGFibGVGaWd1cmUiLCJ2YWxBcnIiLCJTdHJpbmciLCJmaXJzdFN0ciIsInNoaWZ0IiwidGFpbFN0ciIsImpvaW4iLCJudW0iLCJOdW1iZXIiLCJpc0Rvd25sb2FkYWJsZSIsInN0clRvQXJyIiwiZm4iLCJhY2NvdW50T3BlcmF0b3IiLCJ0aGlzIiwibGlzdE1hcCIsImdyb3VwSW5mb1NpemUiLCJzaXplIiwiZ3JvdXBJbmZvQ291bnQiLCJmb3JFYWNoIiwiaW5mbyIsIm1lbnVHcm91cCIsIm1lbnVzIiwia2V5cyIsIm9iaiIsImRpdmlkZXIiLCJ1cGRhdGVBY2NvdW50IiwibG9nb3V0IiwibGlzdCIsIm1hcCIsIiRpbmZvQnRuIiwiZHJvcERvd24iLCJkZWZUaXRsZSIsInN0eWxlIiwic2VsZWN0ZWRDYiIsImNsaWNrSXRlbSIsIiRzZWxmIiwiJGFsZXJ0IiwiY3NzIiwidGV4dC1hbGlnbiIsInBvc2l0aW9uIiwicGFkZGluZyIsIndpZHRoIiwiY3Vyc29yIiwiei1pbmRleCIsImFkZENsYXNzIiwic2hvd0FsZXJ0IiwibXNnIiwidGltZW91dFNlYyIsImNsYXNzTmFtZSIsInJlbW92ZUNsYXNzIiwiaW5kZXgiLCJtYXRjaCIsInNsaWRlRG93biIsImlzTnVtYmVyIiwic2xpZGVVcCIsInByZXBlbmQiLCJhdXRvU2V0IiwiZmluZCIsImVhY2giLCJnZXQiLCJuZXdWYWwiLCJpc1VuZGVmaW5lZCIsImJvb2xlYW5PcHRpb24iLCJhc2MiLCJ0cnVlSHRtbCIsImZhbHNlSHRtbCIsImRyb3BEb3duT3B0IiwiYWRkRW1wdHkiLCJyZXZlcnNlIiwiYm9vdHN0cmFwVGhlbWUiLCIkaGVhZCIsImN1cnJlbnRUaGVtZSIsImxvY2FsU3RvcmFnZSIsImdldEl0ZW0iLCJzZXRIcmVmIiwidGhlbWUiLCJzZXRJdGVtIiwiZ2V0TGluayIsIiRncm91cCIsIm1hcmdpbiIsIiRidG4iLCIkbWVudSIsIm92ZXJmbG93IiwidGhlbWVzIiwiaXRlbUxpc3QiLCIkYSIsIiRpdGVtIiwicHVzaCIsImJyaWVmIiwibGlua1R4dCIsIm1heExlbmd0aCIsImJyaWVmVHh0IiwidXNlUG9wIiwic3Vic3RyIiwiJHRleHQiLCJwb3BvdmVyIiwibW91c2VvdmVyIiwibW91c2VsZWF2ZSIsImJ0biIsImRlZlR5cGUiLCJkaXNwbGF5IiwiZGlzYWJsZUJ0biIsImRpc2FibGVkIiwicHJvcCIsImNoYW5nZVR5cGUiLCJjaGVja2VkIiwiaXNOaWwiLCJhbGxBamF4U3VjIiwiJHNlYXJjaE1haW4iLCIkcmVzdWx0TWFpbiIsIiRvdXRsaW5lQmxvY2siLCJhamF4UXVldWUiLCJjb250ZW50UGFyYW0iLCJtYXJnaW5Cb3R0b20iLCJoaWRlIiwiJHRvcERpdiIsImFyZyIsImlzUmVwbGFjZSIsIm9taXRCeSIsImlzUGxhaW5PYmplY3QiLCJFcnJvciIsImZpdE91dCIsInBhZ2VUaXBPcHQiLCJub3RpY2VBcmVhT3B0IiwiZm5UZXh0T3B0IiwiaXNFbXB0eSIsIiR0aXBzQnRuIiwicGFnZVRpcHMiLCIkbm90aWNlQXJlYSIsIm5vdGljZUFyZWEiLCJmdW5jdGlvblRleHQiLCJjYWxsQWpheCIsIiR0YXJnZXRzIiwiZ2V0UXVlcnkiLCJvcGVyYXRvciIsIiRkaXNhYmxlVGFyZ2V0cyIsImRvbSIsImlzU2V0dGxlZCIsImlzU3VjY2Vzc2Z1bCIsIiRsb2FkaW5ncyIsIiR0YXJnZXQiLCIkbG9hZGluZyIsIm9wYWNpdHkiLCJ0cmFuc2Zvcm0iLCJsZWZ0IiwiYmVmb3JlIiwic2hvdyIsIiRkaXNhYmxlVGFyZ2V0Iiwic2V0dGxlIiwiYW5pbWF0ZSIsImlzQWxsU2V0dGxlZCIsImV2ZXJ5IiwiaXNBbGxTdWNjZXNzZnVsIiwic3BsaWNlIiwiaW5pdEFqYXhPcGVyYXRvciIsImlzRnVuY3Rpb24iLCJkYXRlUGlja2VyIiwibGFuZyIsImRhdGVwaWNrZXIiLCJyZWdpb25hbCIsInNob3dPdGhlck1vbnRocyIsInNlbGVjdE90aGVyTW9udGhzIiwibWF4RGF0ZSIsImNoYW5nZU1vbnRoIiwiY2hhbmdlWWVhciIsImRhdGVGb3JtYXQiLCJub3ciLCJtb21lbnQiLCJmb3JtYXQiLCJzdWJ0cmFjdERheSIsInN1YnRyYWN0IiwiZGF0ZSIsImRpc2FibGVDaGlsZHJlbiIsInNlbGVjdG9yIiwiZGlzcGxheVN3aXRjaGVyIiwiZG9tQXJyTGlzdCIsImluZGV4TGlzdCIsImRpc3BsYXlMYXllciIsIiRkb20iLCJkb21BcnIiLCJsYXN0IiwiZGlzcGxheVByZXZMYXllciIsInBvcCIsInByZXZJbmRleCIsImRvd25sb2FkQ3N2TGluayIsInBhcmVudCIsImxpbmtTdHlsZSIsIiRkb3dubG9hZExpbmsiLCJkb3dubG9hZENzdk9wdGlvbiIsImRlZkRpc2FibGVkIiwiZ2V0QnRuIiwiZGF0YS10b2dnbGUiLCJuZXdRdWVyeSIsImVuY29kZSIsImRvd25sb2FkIiwidW5zZWxlY3RBbGxGbiIsInVuc2VsZWN0QWxsIiwibXVsdGlwbGUiLCJtYXhSb3ciLCJjb2x1bW4iLCJzaG93QXJyb3ciLCJkZWZJbmRleCIsImRlZlZhbCIsIiRpdGVtcyIsInZhbHVlcyIsImlzTXVsdGlwbGUiLCJ0ZXh0Q2xhc3MiLCJ1bnNoaWZ0IiwiX2RvQ2xlYW51cCIsImxpc3RDb3VudCIsImxhc3RJdGVtSW5kZXgiLCJ0ZEFyciIsInZhbHVlQXJyIiwicm93IiwiTWF0aCIsImNlaWwiLCJzZXRJdGVtU2VsZWN0U3RhdHVzIiwiaXNTZWxlY3RlZCIsInNldFNlbGVjdFN0YXR1cyIsIiRpIiwiaXNCb29sZWFuIiwiY29uY2x1ZGVWYWwiLCJodG1sQXJyIiwiZ2V0VmFsIiwiZ2V0SHRtbCIsIiRkcm9wZG93bk1lbnUiLCJtaW4td2lkdGgiLCIkZHJvcGRvd25Db250ZW50IiwibWF4LWhlaWdodCIsIm1heC13aWR0aCIsIiRjb2x1bW5UYWJsZSIsIiR0IiwiJHRkIiwiY29sdW1uSW5kZXgiLCJmbG9vciIsIl9kb1RyaWdnZXIiLCJzZXRUcmlnZ2VyIiwiJGNoZWNrZWQiLCJpc0NoZWNrZWQiLCJ0b2dnbGVDbGFzcyIsInRvZ2dsZSIsImhhc0NsYXNzIiwiZG9UcmlnZ2VyIiwicmVhZHkiLCJidWlsZFVwSXRlbSIsIiRmb290ZXIiLCIkc2VsZWN0QWxsQnRuIiwic2VsZWN0QWxsIiwiJHVuc2VsZWN0QWxsQnRuIiwic3RvcFByb3BhZ2F0aW9uIiwidmVydGljYWxBbGlnbiIsImFyciIsIml0ZW1WYWwiLCJpdGVtSW5kZXgiLCJpdGVtSW5kZXhlcyIsImZvcmNlTW9kZSIsInJlc2V0RGVmYXVsdCIsInNldERlZlRpdGxlIiwiZm9sZENvbHVtbiIsInNldHRpbmdBcnIiLCJmb2xkV2lkdGgiLCJzcHJlYWQiLCJBcnJheSIsIndvcmRCcmVhayIsInNldHRpbmciLCJkdXIiLCJpc1NwcmVhZCIsImZXaWR0aCIsInNwIiwic3ByZWFkV2lkdGgiLCIkdGgiLCJ3aGl0ZVNwYWNlIiwidG8iLCJzZXQiLCJlbGUiLCJ0ZXh0T3ZlcmZsb3ciLCJ0YWJsZUxheW91dCIsImVudGVyQ2IiLCJmb2N1cyIsInNlbGVjdCIsImtleXVwIiwiZSIsImtleUNvZGUiLCJnb0JhY2tMaW5rIiwiZmxvYXQiLCJmb250U2l6ZSIsImlucHV0IiwiZW1wdHlWYWwiLCJwbGFjZWhvbGRlciIsIiR0aXRsZSIsIiRpbnB1dCIsIm9uIiwidHJpbSIsImlucHV0R3JvdXAiLCJwcmVwZW5kSXRlbXMiLCJyZXNldERlZlZhbCIsIml0ZW1zIiwiYXBwZW5kSXRlbXMiLCIkaW5wdXRHcm91cCIsInNldENsYXNzVG9TcGFuIiwiaXRlbSIsIiRwcmVwZW5kIiwiJGFwcGVuZCIsImlzRGlzYWJsZWRPcHRpb24iLCJsaW1pdElucHV0IiwidGV4dERlY29yYXRpb24iLCJ0ZXh0VW5kZXJsaW5lUG9zaXRpb24iLCIkbG9hZGluZ01zZyIsInRvcCIsImhlaWdodCIsImJhY2tncm91bmQtY29sb3IiLCJ6SW5kZXhMaXN0IiwicGFyc2VJbnQiLCJtYXhJbmRleFoiLCJtYXgiLCJmYWRlT3V0IiwibmF2VGFiIiwiaXRlbVNldHRpbmdzIiwiJG5hdiIsInRhcmdldHMiLCJ0YWJMaW5rcyIsIml0ZW1TZXR0aW5nIiwiaXNEZWYiLCJvbkNsaWNrIiwiJHRhYkxpbmsiLCIkdGFiIiwiZmFkZUluIiwibm90aWNlQXJyIiwibXNnU2l6ZSIsInBvaW50ZXJUb2dnbGUiLCJmaXJzdE1zZyIsIiRzaWduIiwiJHBvaW50ZXIiLCIkZmlyc3RNc2ciLCJwYWRkaW5nQm90dG9tIiwiJGNvbnRlbnQiLCJwYWRkaW5nVG9wIiwic2V0TXNnIiwicGFkZGluZ1RpbWVzIiwibSIsIiRtc2ciLCIkZnJhbWUiLCJib3JkZXIiLCJzbGlkZVRvZ2dsZSIsInRsIiwidGltZWxpbmUiLCJlcnJvciIsInJlc3VsdCIsInkiLCJvbkNvbXBsZXRlIiwiZWFzZSIsInBhcnNlRWFzZSIsImVhc2VPdXQiLCJjb25maWciLCJkZWxheSIsIiRoZWFkZXJSaWdodEZyYW1lIiwiJHJpZ2h0RnJhbWUiLCJpbmRleFoiLCJyaWdodCIsIiRhY2NvdW50T3BlcmF0b3IiLCIkYm9vdHN0cmFwVGhlbWUiLCJyZXBlYXQiLCIkdGl0bGVzIiwidCIsIiRoMSIsImZyb20iLCJkdXJhdGlvbiIsInNjYWxlIiwieCIsInN0YWdnZXIiLCJhbGxNZW51VGl0bGVzIiwiYWxsTWVudUNhdGVnb3JpZXMiLCJhbGxNZW51SXRlbXMiLCJjcmVhdGVIZWFkZXJCdG4iLCJ0ZXh0QWxpZ24iLCJmaWx0ZXIiLCIkbWVudUhlYWRlciIsIiRleHRlbmRCdG4iLCJleHRlbmRDYXRlZ29yeSIsIiRjb2xsYXBzZUJ0biIsImNvbGxhcHNlQ2F0ZWdvcnkiLCJjcmVhdGVNZW51SGVhZGVyIiwiJG1lbnVSZWNlcHRhY2xlIiwiZmxleC1ncm93IiwiY2F0ZWdvcnkiLCIkbWVudUNhdGVnb3J5IiwicGF1c2VkIiwiJF9pc09wZW4iLCIkXyRtZW51Q2F0ZWdvcnlUaXRsZSIsInNob3dNaW51cyIsInBsYXkiLCJzaG93UGx1cyIsInRvZ2dsZUNhdGVnb3J5IiwiY3JlYXRlTWVudUNhdGVnb3J5IiwiJG1lbnVDYXRlZ29yeVRpdGxlIiwiZm9udC13ZWlnaHQiLCJib3JkZXItdG9wLXdpZHRoIiwiYm9yZGVyLXRvcC1jb2xvciIsIiRfJG1lbnVDYXRlZ29yeSIsImhpZ2hsaWdodCIsImNyZWF0ZU1lbnVDYXRlZ29yeVRpdGxlIiwiJF9jYXRlZ29yeSIsInRpdGxlT3B0aW9uIiwiYWJhbmRvbiIsIiRtZW51SXRlbSIsInRleHQtZGVjb3JhdGlvbiIsImJveFNoYWRvdyIsInRyYW5zZm9ybVBlcnNwZWN0aXZlIiwidHJhbnNmb3JtT3JpZ2luIiwicm90YXRpb25ZIiwic2V0QWN0aXZlIiwidW5zZXRBY3RpdmUiLCJjcmVhdGVNZW51SXRlbSIsIiRfdGl0bGUiLCIkX3BhZ2VTdWJqZWN0IiwiJF9wYWdlTmFtZSIsImZsZXgtZmxvdyIsIm1vdXNlZW50ZXIiLCIkY2F0ZWdvcnkiLCJtb2RhbFN1YklkIiwiYnRuVHlwZSIsInRpcEFyciIsInJvd051bSIsIiR0YXJnZXRCb2R5IiwicmVjdXJzaXZlU2V0SXRlbXMiLCJzaGlmdENvdW50Iiwic3ViIiwicmVwbGFjZSIsIlJlZ0V4cCIsInByZWZpeCIsIm1hcmdpbi1sZWZ0IiwibWFyZ2luLXJpZ2h0IiwibWFyZ2luLWJvdHRvbSIsInBvcFdpbmRvdyIsIm1vZGFsSWQiLCJwYWdpbmF0aW9uIiwidG90YWwiLCJsaW1pdCIsImN1cnJlbnRQYWdlIiwidG9JbnQiLCJkZWYiLCJpbml0IiwiJHRvdGFsIiwiJGN1cnJlbnRQYWdlIiwiJGxpbWl0Iiwib3JpZ2luTGltaXQiLCJ0b3RhbFBhZ2UiLCIkdG90YWxQYWdlIiwiY3VycmVudFBhZ2VTaXplIiwiJHByZVBhZ2UiLCJvZmYiLCJfX2NsaWNrRm4iLCJlbWl0Q2IiLCIkbmV4dFBhZ2UiLCJnZXRQcmVBbmRTdWYiLCJwcmUiLCJzdWYiLCIkcHJlIiwicGFkZGluZy1sZWZ0IiwicGFkZGluZy1yaWdodCIsIiRzdWYiLCJjcmVhdGVUZXh0IiwiJG9iaiIsImNyZWF0ZUxpbmsiLCJ0eHQiLCJjbGlja0ZuIiwic2tpcCIsImNyZWF0ZUlucHV0Iiwic2V0Q3VycmVudFBhZ2UiLCIkdGFyZ2V0SGVhZGVyIiwiJHRhcmdldEZvb3RlciIsIiRtb2RhbCIsIiRkaWFsb2ciLCIkaGVhZGVyIiwiJGNsb3NlQnRuIiwiaGlkZU1vZGFsIiwicmVjZXB0YWNsZSIsImRvbU1hcCIsImF0dHJWYWwiLCJnZXRNYXBWYWwiLCIkZCIsImVsZU5hbWUiLCIkc2hvd1RvcEJ0bk91dGVyIiwiYm90dG9tIiwiJGNyb3NzIiwidmVydGljYWwtYWxpZ24iLCJsaW5lLWhlaWdodCIsInBhZGRpbmctYm90dG9tIiwiJGhpZGVCdG4iLCJoaWRlQnRuTGVuZ3RoIiwiYm9yZGVyLXJhZGl1cyIsIiRzaG93VG9wQnRuIiwiYm94LXNoYWRvdyIsInNjcm9sbFRvcCIsInNjcm9sbCIsInRhYmxlSGVhZGVyU29ydGVyIiwic29ydEtleSIsInN0YXR1c0FyciIsIm1heFN0YXR1c0luZGV4IiwiZ2V0SGVhZGVyRWxlbWVudCIsIm9yaWdpbmFsSHRtbCIsInN0YXR1c0luZGV4Iiwic2V0VHJIdG1sIiwiZ2V0U29ydEtleSIsInRpdGxlTWFwIiwiJHRoZWFkIiwiJHRib2R5IiwiJGhlYWRUciIsIiRib2R5VHIiLCJkYXRhS2V5IiwidGFibGVMaXN0IiwiYWRkSW5kZXgiLCIkdHJMaXN0IiwiJHRyIiwiY2xvbmUiLCIkZWxlIiwiZ290VmFsIiwiY2xlYXJQcm9wcyIsInRleHRhcmVhIiwiJHRleHRhcmVhIiwiZ2V0VGV4dGFyZWEiLCJ0aW1lUmFuZ2VQaWNrZXJzIiwic3RhcnRPcHQiLCJlbmRPcHQiLCJzaG93U3RhcnQiLCJzaG93RW5kIiwic2hvd0hvdXIiLCJzaG93TWludXRlIiwic2hvd1NlY29uZCIsImRlZlN0YXJ0R2V0VmFsIiwiZGVmRW5kR2V0VmFsIiwiZ2V0VGltZURyb3BEb3duIiwibWF4Q291bnQiLCJkcm9wZG93biIsInRpbWVBcnIiLCJwYWRTdGFydCIsImNyZWF0ZUhvdXJEcm9wRG93biIsImNyZWF0ZU1pbnV0ZURyb3BEb3duIiwiY3JlYXRlU2Vjb25kRHJvcERvd24iLCJpbnB1dFN0ciIsIiRzdGFydERhdGUiLCIkc3RhcnRIb3VyIiwiJHN0YXJ0TWludXRlIiwiJHN0YXJ0U2Vjb25kIiwiJHRvIiwiYm9yZGVyLWNvbG9yIiwiJGVuZERhdGUiLCIkZW5kSG91ciIsIiRlbmRNaW51dGUiLCIkZW5kU2Vjb25kIiwic3RhcnREYXRlVmFsIiwiZW5kRGF0ZVZhbCIsIml0ZW1BcnIiLCJzdGFydERhdGVUaW1lVmFsIiwiZGVmU3RhcnREYXRlIiwiaXNWYWxpZCIsInRvSVNPU3RyaW5nIiwidGltZSIsImVuZERhdGVUaW1lVmFsIiwicmVzZXREZWYiLCJyZXNldFN0YXJ0IiwicmVzZXRFbmQiLCJnZXRTdGFydElucHV0IiwiZ2V0RW5kSW5wdXQiLCJ0b29sVGlwIiwidG9vbHRpcCIsInVwbG9hZEZpbGUiLCJidG5UeHQiLCJmaWxlSWQiLCJnZXRGaWxlIiwiJGlucHV0RmlsZSIsImZpbGVzIiwic2V0SW5wdXRGaWxlRGlzcGxheSIsIm5ld1R4dCIsImdldEZpbGVuYW1lIiwiJGxhYmVsIiwiJGZpbGVEaXYiLCJjaGFuZ2UiLCIkdXBsb2FkQnRuIiwiZm9ybURhdGEiLCJGb3JtRGF0YSIsInByb2Nlc3NEYXRhIiwiY29udGVudFR5cGUiLCJhbHdheXMiLCJ2YXJpYWJsZUlucHV0IiwiZHJvcERvd25BcnIiLCIkZHJvcERvd24iLCJib3JkZXItdG9wLXJpZ2h0LXJhZGl1cyIsImJvcmRlci1ib3R0b20tcmlnaHQtcmFkaXVzIiwiZHJvcERvd25WYWwiLCJpbnB1dFZhbCIsImNsZWFuIiwiYWNjb3VudFJvbGVPcHRpb24iLCJyb2xlTWFwIiwicm9sZXMiLCJjaGluZXNlTmFtZSIsInJvbGUiLCJmbkRyb3BEb3duT3B0Il0sIm1hcHBpbmdzIjoiQUFBQUEsRUFBQSxLQUNBLE1BQUFDLEVBQUFELEVBQUEsY0FDQUUsRUFBQUYsRUFBQSxjQUNBRyxFQUFBSCxFQUFBLGVBQ0FJLEVBQUFKLEVBQUEsYUFDQUssRUFBQUwsRUFBQSxnQkFLQSxNQUFBTSxFQUFBLENBQ0FDLFdBRUFDLEVBQUFDLFNBQUFDLE9B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QUFvSyxHQUFBcWtCLGtCQUFBLFdBQ0EsTUFBQTdpQixFQUFBdEIsS0FzQkEsT0FwQkF0SyxFQUFBb0IsT0FBQUssR0FBQSxDQUNBSCxJQUFBLDJCQUNBTSxLQUFBLEdBQ0FDLElBQUF3RCxJQUNBLE1BQUFxcEIsRUFBQXJwQixFQUFBcXBCLFFBQ0FDLEVBQUFudUIsRUFBQTZLLElBQUFxakIsRUFBQSxDQUFBRSxFQUFBQyxLQUNBLENBQ0ExbUIsSUFBQTBtQixFQUNBdHFCLEtBQUFxcUIsS0FHQUUsRUFBQSxDQUNBbGhCLFVBQUEsRUFDQXBDLFNBQUEsS0FDQUMsTUFBQSxXQUVBRyxFQUFBTCxTQUFBb2pCLEVBQUFHLE1BSUFsakIiLCJmaWxlIjoiYWxsLm1pbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIiQoKCkgPT4ge1xuICBjb25zdCAkcGFnZVRpdGxlID0gJCgnI3BhZ2VUaXRsZScpXG4gIGNvbnN0ICRjb250YWluZXIgPSAkKCcjY29udGFpbmVyJylcbiAgY29uc3QgJHBhZ2VIZWFkZXIgPSAkKCcjcGFnZUhlYWRlcicpXG4gIGNvbnN0ICRwYWdlTWVudSA9ICQoJyNwYWdlTWVudScpXG4gIGNvbnN0ICRwYWdlQ29udGVudCA9ICQoJyNwYWdlQ29udGVudCcpXG5cbiAgbGV0IHRpbWVvdXRJbnN0YW5jZVxuXG4gIC8vIOeUsSAkLmdsb2JhbCDmjqfnrqHnmoTlj4PmlbhcbiAgY29uc3QgUEFSQU0gPSB7XG4gICAgUk9VVEVfUk9PVDogKCgpID0+IHsgLy8gTm90ZS4g5oyH5a6a55uu5YmNIHVybCDnmoTmoLnnm67pjIQsIOiri+WSjCBlY29zeXN0ZW0uY29uZmlnLmpzIOWQjOatpVxuICAgICAgY29uc3QgUk9VVEVfUk9PVCA9ICcvY2Fyby1iYWNrMidcbiAgICAgIGlmIChfLmluY2x1ZGVzKHdpbmRvdy5sb2NhdGlvbi5ocmVmLCBST1VURV9ST09UKSkgcmV0dXJuIFJPVVRFX1JPT1RcbiAgICAgIHJldHVybiAnJ1xuICAgIH0pKCksXG4gICAgLy8g5Lul5LiL54K6IGJhY2tlbmQg5Zue5YKz55qE6LOH6KiKXG4gICAgcGFnZVN1YmplY3Q6IHVuZGVmaW5lZCwgLy8g6aCB6Z2i5Li76aGM6LOH6KiKXG4gICAgcGFnZVF1ZXJ5UGFyYW06IHVuZGVmaW5lZCwgLy8g6aCB6Z2i5pCc5bCL5Y+D5pW4XG4gICAgLy8g5Lul5LiL54K6IGNsaWVudCDoh6rooYzkvb/nlKjnmoTos4foqIpcbiAgICAkJGFjY291bnRVc2VyOiB1bmRlZmluZWQsIC8vIOW4s+iZn+aTjeS9nOiAhSBpbnN0YW5jZVxuICAgIHByZVBhZ2VRdWVyeVBhcmFtOiB1bmRlZmluZWQsIC8vIOS4iuasoeeahOmggemdouaQnOWwi+WPg+aVuFxuICAgIHBhZ2VTdWJqZWN0TmFtZTogdW5kZWZpbmVkLCAvLyDnm67liY3poIHpnaLkuLvpoYzlkI3nqLFcbiAgICB0aXRsZTogdW5kZWZpbmVkLCAvLyDnm67liY3poIHpnaLkuLvpoYzmqJnpoYxcbiAgfVxuXG4gIC8vIOWFqOWxgOmAmueUqFxuICAkLmdsb2JhbCA9IHtcbiAgICAvLyDlu7rnq4sgdXJsXG4gICAgZ2VuZXJhdGVVcmw6ICh1cmwpID0+IHtcbiAgICAgIGlmICghXy5zdGFydHNXaXRoKHVybCwgJy8nKSkgdXJsID0gYC8ke3VybH1gXG4gICAgICByZXR1cm4gYCR7JC5nbG9iYWwuZ2V0UGFyYW1WYWwoJ1JPVVRFX1JPT1QnKX0ke3VybH1gXG4gICAgfSxcbiAgICAvLyDlrqLoo73ljJYgYWpheCDoroDlj5ZcbiAgICBhajogKG9wdCkgPT4ge1xuICAgICAgbGV0IHtcbiAgICAgICAgbWV0aG9kID0gJ1BPU1QnLCBkYXRhLCBzdWMsIGVyciwgcmF3LFxuICAgICAgICB1c2VDYWNoZSA9IHRydWUsIC8vIOaYr+WQpuS9v+eUqOS5i+WJjeeahOW/q+WPlue1kOaenFxuICAgICAgICBza2lwRmFpbCA9IGZhbHNlLCAvLyBhamF4IOWgsemMr+aYr+WQpuiZleeQhlxuICAgICAgfSA9IG9wdFxuXG4gICAgICBjb25zdCB1cmwgPSAkLmdsb2JhbC5nZW5lcmF0ZVVybChvcHQudXJsKVxuXG4gICAgICAvLyBhY2NvdW50IOaTjeS9nOS4gOW+i+S4jeS9v+eUqCBjYWNoZVxuICAgICAgaWYgKF8uc3RhcnRzV2l0aCh1cmwsICcvbWFpbi9hY2NvdW50JykpIHtcbiAgICAgICAgdXNlQ2FjaGUgPSBmYWxzZVxuICAgICAgfVxuXG4gICAgICBfLmFzc2lnbihvcHQsIHt1cmwsIG1ldGhvZH0pXG5cbiAgICAgIGNvbnN0IGNhY2hlTWFwID0gJC5nbG9iYWwuYWouX2FqQ2FjaGVNYXAgPSAkLmdsb2JhbC5hai5fYWpDYWNoZU1hcCB8fCB7fVxuICAgICAgY29uc3QgY2FjaGVLZXkgPSBKU09OLnN0cmluZ2lmeSh7dXJsLCBkYXRhLCBtZXRob2R9KVxuXG4gICAgICBpZiAob3B0LmJlZm9yZVNlbmQpIG9wdC5iZWZvcmVTZW5kKClcblxuICAgICAgaWYgKHVzZUNhY2hlICYmIGNhY2hlTWFwW2NhY2hlS2V5XSkge1xuICAgICAgICBzdWMoY2FjaGVNYXBbY2FjaGVLZXldKVxuICAgICAgICBpZiAob3B0LmNvbXBsZXRlKSBvcHQuY29tcGxldGUoKVxuICAgICAgICByZXR1cm5cbiAgICAgIH1cblxuICAgICAgcmV0dXJuICQuYWpheChvcHQpLmRvbmUoKHJlc3ApID0+IHtcbiAgICAgICAgaWYgKHJlc3Auc3VjICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBpZiAodXNlQ2FjaGUpIHtcbiAgICAgICAgICAgIGNhY2hlTWFwW2NhY2hlS2V5XSA9IHJlc3Auc3VjXG4gICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHsgLy8g5LiA5a6a5pmC6ZaT5b6M56e76ZmkIGNhY2hlXG4gICAgICAgICAgICAgIGRlbGV0ZSBjYWNoZU1hcFtjYWNoZUtleV1cbiAgICAgICAgICAgIH0sIDMwMDApXG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBzdWMgJiYgc3VjKHJlc3Auc3VjKVxuICAgICAgICB9XG4gICAgICAgIGlmIChyZXNwLndhciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgJGNvbnRhaW5lci5zaG93V2FyKHJlc3Aud2FyLCAxMClcbiAgICAgICAgICBpZiAocmVzcC5tc2dUeXBlID09PSAncmVxVXNlck5vdEV4aXN0cycpIHJldHVybiAkLmdsb2JhbC5yZWZyZXNoUGFnZSgpXG4gICAgICAgICAgcmV0dXJuIGVyciAmJiBlcnIocmVzcC53YXIpXG4gICAgICAgIH1cbiAgICAgICAgaWYgKHJlc3AuZXJyICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAkY29udGFpbmVyLnNob3dFcnIocmVzcC5lcnIsIGZhbHNlKVxuICAgICAgICAgIHJldHVybiBlcnIgJiYgZXJyKHJlc3AuZXJyKVxuICAgICAgICB9XG4gICAgICAgIHJhdyAmJiByYXcocmVzcClcbiAgICAgIH0pLmZhaWwoKCkgPT4ge1xuICAgICAgICBpZiAoc2tpcEZhaWwpIHJldHVyblxuICAgICAgICBjb25zdCBlcnJNc2cgPSAn5ZG85Y+rIGFqYXgg55m855Sf6Yyv6KqkJ1xuICAgICAgICBlcnIgJiYgZXJyKGVyck1zZylcbiAgICAgICAgJGNvbnRhaW5lci5zaG93RXJyKGVyck1zZywgZmFsc2UpXG4gICAgICB9KVxuICAgIH0sXG4gICAgLy8g6K6A5Y+W6aCB6Z2iXG4gICAgbG9hZFBhZ2U6ICh7cGFnZVF1ZXJ5UGFyYW0sIHBhZ2VTdWJqZWN0fSA9IHt9LCB7c2V0VXJsSGlzdG9yeSA9IHRydWUsIHVwZGF0ZU1lbnUgPSBmYWxzZX0gPSB7fSkgPT4ge1xuICAgICAgY29uc3QgX3BhZ2VTdWJqZWN0ID0gcGFnZVF1ZXJ5UGFyYW0uX3BhZ2VTdWJqZWN0XG4gICAgICBjb25zdCBfcGFnZU5hbWUgPSBwYWdlUXVlcnlQYXJhbS5fcGFnZU5hbWVcbiAgICAgIGNvbnN0IHF1ZXJ5U3RyID0gJC5wYXJhbShwYWdlUXVlcnlQYXJhbSlcbiAgICAgIGNvbnN0IHVybCA9IGBpbmRleC9wYWdlPyR7cXVlcnlTdHJ9YFxuXG4gICAgICAkLmdsb2JhbC5oaWRlQWxlcnQoKVxuXG4gICAgICB0aW1lb3V0SW5zdGFuY2UgJiYgY2xlYXJUaW1lb3V0KHRpbWVvdXRJbnN0YW5jZSlcbiAgICAgICRwYWdlQ29udGVudC5zaG93UGFnZSh1cmwsIHtcbiAgICAgICAgYmVmTG9hZDogKCkgPT4ge1xuICAgICAgICAgIGlmIChzZXRVcmxIaXN0b3J5KSB7IC8vIOWvq+WFpee2suWdgOeLgOaFi+iomOmMhFxuICAgICAgICAgICAgY29uc3QgdXJsID0gbmV3IFVSTCh3aW5kb3cubG9jYXRpb24uaHJlZilcbiAgICAgICAgICAgIGNvbnN0IG5ld1VybCA9IGAke3VybC5vcmlnaW59JHt1cmwucGF0aG5hbWV9PyR7cXVlcnlTdHJ9YFxuICAgICAgICAgICAgd2luZG93Lmhpc3RvcnkucHVzaFN0YXRlKHtwYWdlUXVlcnlQYXJhbSwgcGFnZVN1YmplY3QsIHBhdGg6IG5ld1VybH0sICcnLCBuZXdVcmwpXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBhZnRMb2FkOiAoKSA9PiB7XG4gICAgICAgICAgUEFSQU0ucHJlUGFnZVF1ZXJ5UGFyYW0gPSBQQVJBTS5wYWdlUXVlcnlQYXJhbSB8fCBwYWdlUXVlcnlQYXJhbVxuICAgICAgICAgIFBBUkFNLnBhZ2VRdWVyeVBhcmFtID0gcGFnZVF1ZXJ5UGFyYW1cbiAgICAgICAgfSxcbiAgICAgIH0pXG5cbiAgICAgIHBhZ2VTdWJqZWN0ID0gcGFnZVN1YmplY3QgfHwgUEFSQU0ucGFnZVN1YmplY3RcbiAgICAgIFBBUkFNLnBhZ2VTdWJqZWN0ID0gcGFnZVN1YmplY3RcblxuICAgICAgY29uc3QgZ3JvdXBDZmcgPSBwYWdlU3ViamVjdFtfcGFnZVN1YmplY3RdXG4gICAgICBpZiAoIWdyb3VwQ2ZnKSByZXR1cm5cblxuICAgICAgLy8g6Kit572u5qiZ6aGMXG4gICAgICBjb25zdCB0aXRsZSA9IGdyb3VwQ2ZnLnRpdGxlXG4gICAgICBpZiAoUEFSQU0udGl0bGUgIT09IHRpdGxlKSB7XG4gICAgICAgIFBBUkFNLnRpdGxlID0gdGl0bGVcbiAgICAgICAgJHBhZ2VUaXRsZS5odG1sKHRpdGxlKVxuICAgICAgICAkcGFnZUhlYWRlci5zZXRUaXRsZSh0aXRsZSkgLy8g6aCB6Z2i5qiZ6aCtXG4gICAgICB9XG5cbiAgICAgIC8vIOmBuOWWruWIneWni+WMllxuICAgICAgaWYgKFBBUkFNLnBhZ2VTdWJqZWN0TmFtZSAhPT0gX3BhZ2VTdWJqZWN0IHx8IHVwZGF0ZU1lbnUpIHtcbiAgICAgICAgY29uc3QgbWVudUdyb3VwcyA9IGdyb3VwQ2ZnLm1lbnVHcm91cHNcbiAgICAgICAgJHBhZ2VNZW51LnBhZ2VNZW51KF9wYWdlU3ViamVjdCwgbWVudUdyb3VwcylcbiAgICAgIH1cblxuICAgICAgJHBhZ2VNZW51LnNldEFjdGl2ZUl0ZW0oX3BhZ2VTdWJqZWN0LCBfcGFnZU5hbWUpXG4gICAgICBQQVJBTS5wYWdlU3ViamVjdE5hbWUgPSBfcGFnZVN1YmplY3RcbiAgICB9LFxuICAgIC8vIOiugOWPlumggemdoijnsKHljJblj4PmlbgpXG4gICAgc2ltcGxlTG9hZFBhZ2U6IChfcGFnZVN1YmplY3QsIF9wYWdlTmFtZSwge3F1ZXJ5fSA9IHt9KSA9PiB7XG4gICAgICAkLmdsb2JhbC5sb2FkUGFnZSh7cGFnZVF1ZXJ5UGFyYW06IHtfcGFnZVN1YmplY3QsIF9wYWdlTmFtZSwgLi4ucXVlcnl9fSlcbiAgICB9LFxuICAgIC8vIOiugOWPluS4iuasoemggemdolxuICAgIGxvYWRQcmV2UGFnZTogKCkgPT4ge1xuICAgICAgJC5nbG9iYWwubG9hZFBhZ2Uoe3BhZ2VRdWVyeVBhcmFtOiBQQVJBTS5wcmVQYWdlUXVlcnlQYXJhbX0pXG4gICAgfSxcbiAgICAvLyDliJ3lp4vljJbmk43kvZzogIXluLPomZ9cbiAgICBpbml0T3BlcmF0b3I6IChhY2NvdW50LCBwYWdlU3ViamVjdCkgPT4ge1xuICAgICAgY29uc3QgJCRhY2NvdW50VXNlciA9IGFjY291bnQgPyBfLmFzc2lnbihhY2NvdW50LCB7XG4gICAgICAgIGV4ZWNNZXRob2Q6IChtZXRob2QsIGFyZ3MpID0+IHsgLy8g5Y+v6K6TIGNsaWVudCDop7jnmbwgYmFja2VuZCByZXFVc2VyIOeahCBtZXRob2RcbiAgICAgICAgICBsZXQgcmV0ID0gdW5kZWZpbmVkXG4gICAgICAgICAgJC5nbG9iYWwuYWooe1xuICAgICAgICAgICAgdXJsOiAnL21haW4vYWNjb3VudC9leGVjTWV0aG9kJyxcbiAgICAgICAgICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgICAgICAgICAgYXN5bmM6IGZhbHNlLFxuICAgICAgICAgICAgZGF0YToge21ldGhvZCwgYXJnc30sXG4gICAgICAgICAgICBzdWM6IChyZXMpID0+IHtcbiAgICAgICAgICAgICAgcmV0ID0gcmVzXG4gICAgICAgICAgICB9LFxuICAgICAgICAgIH0pXG4gICAgICAgICAgcmV0dXJuIHJldFxuICAgICAgICB9LFxuICAgICAgfSkgOiB1bmRlZmluZWRcblxuICAgICAgUEFSQU0uJCRhY2NvdW50VXNlciA9ICQkYWNjb3VudFVzZXJcbiAgICAgIHBhZ2VTdWJqZWN0ID0gcGFnZVN1YmplY3QgfHwgUEFSQU0ucGFnZVN1YmplY3RcblxuICAgICAgJHBhZ2VIZWFkZXIuc2V0QWNjb3VudE9wZXJhdG9yKCQkYWNjb3VudFVzZXIsIHBhZ2VTdWJqZWN0KVxuICAgIH0sXG4gICAgLy8g5Yid5aeL5YyW6aCB6Z2i5YWn5a65XG4gICAgaW5pdFBhZ2U6ICh7YWNjb3VudCwgcGFnZVN1YmplY3QsIHBhZ2VRdWVyeVBhcmFtfSkgPT4ge1xuICAgICAgJC5nbG9iYWwubG9hZFBhZ2Uoe3BhZ2VRdWVyeVBhcmFtLCBwYWdlU3ViamVjdH0sIHt1cGRhdGVNZW51OiB0cnVlfSlcbiAgICAgICQuZ2xvYmFsLmluaXRPcGVyYXRvcihhY2NvdW50LCBwYWdlU3ViamVjdClcbiAgICB9LFxuICAgIC8vIOmHjeaWsOaVtOeQhumggemdolxuICAgIHJlZnJlc2hQYWdlOiAoKSA9PiB7XG4gICAgICBjb25zdCB1cmwgPSBuZXcgVVJMKHdpbmRvdy5sb2NhdGlvbi5ocmVmKVxuICAgICAgY29uc3QgdXJsRm9yTXlJbmZvID0gYC9tYWluL2FjY291bnQvZ2V0TXlJbmZvJHt1cmwuc2VhcmNofWBcbiAgICAgICQuZ2xvYmFsLmFqKHtcbiAgICAgICAgdXJsOiB1cmxGb3JNeUluZm8sXG4gICAgICAgIHN1YzogKHJlcykgPT4ge1xuICAgICAgICAgICQuZ2xvYmFsLmluaXRQYWdlKHJlcylcbiAgICAgICAgfSxcbiAgICAgIH0pXG4gICAgfSxcbiAgICAvLyDlj5blvpcgUEFSQU0g5Y+D5pW45YC8XG4gICAgZ2V0UGFyYW1WYWw6IChrZXkpID0+IHtcbiAgICAgIHJldHVybiBQQVJBTVtrZXldXG4gICAgfSxcbiAgICAvLyDpoa/npLrpoIHpnaLpjK/oqqToqIrmga9cbiAgICBzaG93RXJyOiAoLi4uYXJncykgPT4geyRjb250YWluZXIuc2hvd0Vyci5hcHBseSgkY29udGFpbmVyLCBhcmdzKX0sXG4gICAgLy8g6aGv56S66aCB6Z2i5ZGK6KiK5oGvXG4gICAgc2hvd1dhcjogKC4uLmFyZ3MpID0+IHskY29udGFpbmVyLnNob3dXYXIuYXBwbHkoJGNvbnRhaW5lciwgYXJncyl9LFxuICAgIC8vIOmhr+ekuumggemdouaPkOekuuioiuaBr1xuICAgIHNob3dJbmZvOiAoLi4uYXJncykgPT4geyRjb250YWluZXIuc2hvd0luZm8uYXBwbHkoJGNvbnRhaW5lciwgYXJncyl9LFxuICAgIC8vIOWPluW+l+W+jOerr+ezu+e1seizh+ioilxuICAgIGdldFN5c3RlbUluZm86IChjYikgPT4ge1xuICAgICAgJC5nbG9iYWwuYWooe1xuICAgICAgICB1cmw6ICcvc3lzdGVtL2dldFN5c3RlbUluZm8nLFxuICAgICAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICAgICAgc3VjOiAocmVzKSA9PiB7XG4gICAgICAgICAgY2IocmVzKVxuICAgICAgICB9LFxuICAgICAgICBza2lwRmFpbDogdHJ1ZSxcbiAgICAgIH0pXG4gICAgfSxcbiAgICAvLyDmqqLmn6Xlvoznq6/ni4DmhYtcbiAgICBjcnVpc2VTeXN0ZW1TdGF0dXM6ICgpID0+IHtcbiAgICAgIGNvbnN0IGNydWlzZSA9ICgpID0+IHtcbiAgICAgICAgJC5nbG9iYWwuZ2V0U3lzdGVtSW5mbygocmVzKSA9PiB7XG4gICAgICAgICAgY29uc3Qge1NZX1NUQUZGX1NZTkNfU1RBVFVTfSA9IHJlc1xuICAgICAgICAgIGxldCBlcnJNc2cgPSBgYFxuXG4gICAgICAgICAgaWYgKFNZX1NUQUZGX1NZTkNfU1RBVFVTID09PSAndW5rbm93bicpIGVyck1zZyA9IGDlsJrmnKrlkIzmraXnpL7ljYDluavnlKjmiLbmmK/lkKbngrrkv6Hnvqnlk6Hlt6UsIOaIluWQjOatpeeZvOeUn+mMr+iqpGBcblxuICAgICAgICAgIGlmIChlcnJNc2cpICQuZ2xvYmFsLnNob3dFcnIoYCR7ZXJyTXNnfTxici8+PGRlbD4o5aaC5pyJ55aR5ZWP6KuL5pKl5omTIDA4MDAtMTIzNDU2LCDlsIfkuI3mnIPmnInlsIjkurrngrrmgqjmnI3li5kpPC9kZWw+YCwgMClcbiAgICAgICAgfSlcbiAgICAgIH1cblxuICAgICAgY3J1aXNlKClcbiAgICAgIHNldEludGVydmFsKGNydWlzZSwgMTgwMDAwMClcbiAgICB9LFxuICAgIC8vIOmaseiXj+mggemdouaPkOekuuioiuaBr1xuICAgIGhpZGVBbGVydDogKC4uLmFyZ3MpID0+IHskY29udGFpbmVyLmhpZGVBbGVydC5hcHBseSgkY29udGFpbmVyLCBhcmdzKX0sXG4gICAgLy8g6aGv56S6IGxvYWRpbmdcbiAgICBzaG93TG9hZGluZzogKC4uLmFyZ3MpID0+IHtcbiAgICAgICRjb250YWluZXIuc2hvd0xvYWRpbmcuYXBwbHkoJGNvbnRhaW5lciwgYXJncylcbiAgICB9LFxuICAgIC8vIOmaseiXjyBsb2FkaW5nXG4gICAgaGlkZUxvYWRpbmc6ICguLi5hcmdzKSA9PiB7XG4gICAgICAkY29udGFpbmVyLmhpZGVMb2FkaW5nLmFwcGx5KCRjb250YWluZXIsIGFyZ3MpXG4gICAgfSxcbiAgICAvLyDmjbLli5XnlavpnaLoh7PmnIDkuIrlsaRcbiAgICBzY3JvbGxUb1RvcDogKCkgPT4ge1xuICAgICAgJHBhZ2VDb250ZW50LnNjcm9sbFRvVG9wKClcbiAgICB9LFxuICB9XG5cbiAgJHBhZ2VIZWFkZXIucGFnZUhlYWRlcigpIC8vIOmggemdouaomemgrVxuICAkY29udGFpbmVyLmFsZXJ0KCkgLy8g6aCB6Z2i57O757Wx6YCa55+lXG4gICRjb250YWluZXIubG9hZGluZygpXG4gICRwYWdlQ29udGVudC5wYWdlQ29udGVudCgpLnNjcm9sbFRvcEJ0bigpIC8vIOmggemdouWFp+WuueWIneWni+WMllxuXG4gICQuZ2xvYmFsLnJlZnJlc2hQYWdlKClcblxuICAvLyDlrprnvqnlhajln5/orormlbggZm9yIElERSDkuI3mnIPpoa/npLrorablkYpcbiAgd2luZG93LmdzYXAgPSB3aW5kb3cuZ3NhcCB8fCB1bmRlZmluZWRcblxuICAvLyDnm6Pogb3ntrLlnYDni4DmhYvmlLnoropcbiAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3BvcHN0YXRlJywgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgLy8gZXZlbnQg5Y2zIHdpbmRvdy5oaXN0b3J5LnB1c2hTdGF0ZSDkuK3nmoTnrKzkuIDlgIvlj4PmlbhcbiAgICBpZiAoIWV2ZW50LnN0YXRlLnBhZ2VRdWVyeVBhcmFtKSByZXR1cm5cbiAgICAkLmdsb2JhbC5sb2FkUGFnZShldmVudC5zdGF0ZSwge3NldFVybEhpc3Rvcnk6IGZhbHNlfSlcbiAgfSlcblxuICAvLyDln7fooYzlt6Hmn6Xlvoznq6/ni4DmhYtcbiAgJC5nbG9iYWwuY3J1aXNlU3lzdGVtU3RhdHVzKClcbn0pXG4iLCIvLyDkuIDkupvkuIvovInnmoTln7rmnKzlip/og71cbiQuZG93bmxvYWRlciA9IHtcbiAgLy8g5oqK5YWn5a656L2J5a2Y5LiL6LyJXG4gIHNhdmUgKGZpbGUsIGZpbGVOYW1lLCBmaWxlVHlwZSwgZW5jb2RlVHlwZSA9IGB1dGYtOGApIHtcbiAgICBsZXQgY29udGVudCA9IGBgXG4gICAgaWYgKFtgY3N2YCwgYGh0bWxgXS5pbmNsdWRlcyhmaWxlVHlwZSkpIHtcbiAgICAgIGNvbnRlbnQgPSBgZGF0YTp0ZXh0LyR7ZmlsZVR5cGV9O2NoYXJzZXQ9JHtlbmNvZGVUeXBlfSxgXG4gICAgfVxuICAgIGNvbnRlbnQgKz0gZW5jb2RlVVJJQ29tcG9uZW50KGZpbGUpXG5cbiAgICBjb25zdCAkbGluayA9ICQoYDxhPmApXG4gICAgY29uc3QgJGJvZHkgPSAkKGBib2R5YClcbiAgICAkbGluay5hdHRyKCdocmVmJywgY29udGVudClcbiAgICAkbGluay5hdHRyKCdkb3dubG9hZCcsIGAke2ZpbGVOYW1lfS4ke2ZpbGVUeXBlfWApXG4gICAgJGJvZHkuYXBwZW5kKCRsaW5rKVxuICAgICRsaW5rWzBdLmNsaWNrKClcbiAgICAkbGluay5yZW1vdmUoKVxuICB9LFxuICAvLyDlj6bplovntrLlnYDkuIvovIlcbiAgZG93bmxvYWQgKHVybCwgcXVlcnlPYmogPSB7fSkge1xuICAgIGNvbnN0ICRmb3JtID0gJChgPGZvcm0+YCkuYXR0cih7XG4gICAgICBtZXRob2Q6ICdwb3N0JyxcbiAgICAgIGFjdGlvbjogJC5nbG9iYWwuZ2VuZXJhdGVVcmwodXJsKSxcbiAgICAgIHRhcmdldDogJ19ibGFuaycsXG4gICAgfSlcblxuICAgIGZvciAoY29uc3Qga2V5IGluIHF1ZXJ5T2JqKSB7XG4gICAgICBpZiAoIXF1ZXJ5T2JqLmhhc093blByb3BlcnR5KGtleSkpIGNvbnRpbnVlXG4gICAgICBsZXQgdmFsID0gcXVlcnlPYmpba2V5XVxuXG4gICAgICBpZiAoXy5pc0FycmF5KHZhbCkpIHtcbiAgICAgICAgZm9yIChjb25zdCB2IG9mIHZhbCkge1xuICAgICAgICAgIGNvbnN0ICRoaWRkZW5GaWVsZCA9ICQoYDxpbnB1dD5gKS5hdHRyKHtcbiAgICAgICAgICAgIHR5cGU6ICdoaWRkZW4nLFxuICAgICAgICAgICAgbmFtZTogYCR7a2V5fVtdYCxcbiAgICAgICAgICAgIHZhbHVlOiB2LFxuICAgICAgICAgIH0pXG4gICAgICAgICAgJGZvcm0uYXBwZW5kKCRoaWRkZW5GaWVsZClcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKHZhbCA9PT0gbnVsbCkgdmFsID0gJ251bGwnXG4gICAgICAgIGNvbnN0ICRoaWRkZW5GaWVsZCA9ICQoYDxpbnB1dD5gKS5hdHRyKHtcbiAgICAgICAgICB0eXBlOiAnaGlkZGVuJyxcbiAgICAgICAgICBuYW1lOiBrZXksXG4gICAgICAgICAgdmFsdWU6IHZhbCxcbiAgICAgICAgfSlcbiAgICAgICAgJGZvcm0uYXBwZW5kKCRoaWRkZW5GaWVsZClcbiAgICAgIH1cbiAgICB9XG5cbiAgICAkKCdib2R5JykuYXBwZW5kKCRmb3JtKVxuICAgICRmb3JtLnN1Ym1pdCgpXG4gICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAkZm9ybS5yZW1vdmUoKVxuICAgIH0pXG4gIH0sXG59IiwiLy8g5LiA5Lqb5pyq5YiG6aGe55qE5Ye95byPXG4kLnVuaXQgPSB7XG4gIC8vIOWPluW+l+e2suWdgOS4iueahOiuiuaVuOWAvFxuICBnZXRVcmxQYXJhbTogKGtleSkgPT4ge1xuICAgIGNvbnN0IGhhc2hlcyA9IHdpbmRvdy5sb2NhdGlvbi5ocmVmLnNsaWNlKHdpbmRvdy5sb2NhdGlvbi5ocmVmLmluZGV4T2YoJz8nKSArIDEpLnNwbGl0KCcmJylcbiAgICBsZXQgcGFyYW0gPSBbXSwgaSA9IDAsIGhhc2hcbiAgICBmb3IgKGk7IGkgPCBoYXNoZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGhhc2ggPSBoYXNoZXNbaV0uc3BsaXQoJz0nKVxuICAgICAgcGFyYW1baGFzaFswXV0gPSBoYXNoWzFdXG4gICAgfVxuICAgIGlmIChfLmlzU3RyaW5nKGtleSkpIHJldHVybiBwYXJhbVtrZXldXG4gICAgcmV0dXJuIHBhcmFtXG4gIH0sXG4gIC8vIOaYr+WQpueCuuaVuOWtl+agvOW8j+eahOWtl+S4slxuICBpc051bWVyaWM6IChzdHIpID0+IHtcbiAgICBpZiAodHlwZW9mIHN0ciAhPSAnc3RyaW5nJykgcmV0dXJuIGZhbHNlXG4gICAgcmV0dXJuICFpc05hTihzdHIpICYmICFpc05hTihwYXJzZUZsb2F0KHN0cikpXG4gIH0sXG4gIC8vIOWIpOaWt+aYr+WQpuWPr+S4i+i8ieeahOaVuOaTmjsgZS5nLiBcIjMwICgwKVwiID0+IOWPluWHuiBcIjMwXCIg5Yik5pa35piv5ZCm5pW45a2XXG4gIGRpc2NpcGxpbmVEb3dubG9hZGFibGVGaWd1cmU6ICh2YWwpID0+IHtcbiAgICBjb25zdCB2YWxBcnIgPSBTdHJpbmcodmFsKS5zcGxpdCgnICcpXG4gICAgY29uc3QgZmlyc3RTdHIgPSB2YWxBcnIuc2hpZnQoKVxuICAgIGNvbnN0IHRhaWxTdHIgPSB2YWxBcnIuam9pbignICcpXG4gICAgY29uc3QgbnVtID0gTnVtYmVyKGZpcnN0U3RyKVxuXG4gICAgY29uc3QgaXNEb3dubG9hZGFibGUgPSAhXy5pc05hTihudW0pICYmIG51bSAhPT0gMFxuICAgIHJldHVybiB7aXNEb3dubG9hZGFibGUsIGZpcnN0U3RyLCB0YWlsU3RyfVxuICB9LFxuICAvLyDlrZfkuLLovYnpmaPliJdcbiAgc3RyVG9BcnI6IChzdHIpID0+IHtcbiAgICByZXR1cm4gc3RyLnNwbGl0KC9cXHJcXG58W1xcc1xcclxcbiw7XS8pXG4gIH0sXG59IiwiLy8g5YCL5Lq65biz6Jmf5pON5L2cXG4kLmZuLmFjY291bnRPcGVyYXRvciA9IGZ1bmN0aW9uICgkJGFjY291bnRVc2VyLCBwYWdlU3ViamVjdCkge1xuICBjb25zdCAkc2VsZiA9IHRoaXNcblxuICAkc2VsZi5odG1sKCcnKVxuXG4gIGNvbnN0IGxpc3RNYXAgPSB7fVxuICBjb25zdCBncm91cEluZm9TaXplID0gXy5zaXplKHBhZ2VTdWJqZWN0KVxuXG4gIC8vIOWwhyBwYWdlU3ViamVjdCDovYnmj5vngrrlsI7poIHnmoTpgbjllq5cbiAgbGV0IGdyb3VwSW5mb0NvdW50ID0gMFxuICBfLmZvckVhY2gocGFnZVN1YmplY3QsIChpbmZvLCBfcGFnZVN1YmplY3QpID0+IHtcbiAgICBjb25zdCB0aXRsZSA9IGluZm8udGl0bGVcbiAgICBjb25zdCBtZW51R3JvdXAgPSBpbmZvLm1lbnVHcm91cHNbMF1cbiAgICBjb25zdCB7bWVudXN9ID0gbWVudUdyb3VwXG4gICAgY29uc3QgX3BhZ2VOYW1lID0gXy5rZXlzKG1lbnVzKVswXSAvLyDlj5blh7rpoIHpnaLkuLvpoYznmoTnrKzkuIDnrYblhaflrrnpoIFcbiAgICBjb25zdCBvYmogPSB7XG4gICAgICB0aXRsZSxcbiAgICAgIGZuOiAoKSA9PiB7XG4gICAgICAgICQuZ2xvYmFsLnNpbXBsZUxvYWRQYWdlKF9wYWdlU3ViamVjdCwgX3BhZ2VOYW1lKVxuICAgICAgfSxcbiAgICB9XG4gICAgaWYgKCsrZ3JvdXBJbmZvQ291bnQgPT09IGdyb3VwSW5mb1NpemUpIG9iai5kaXZpZGVyID0gdHJ1ZSAvLyDmnIDlvozkuIDnrYblsI7poIHpgbjllq4sIOimgeWKoOS4iuWIhumalOe3mlxuICAgIGxpc3RNYXBbX3BhZ2VTdWJqZWN0XSA9IG9ialxuICB9KVxuXG4gIGlmICgkJGFjY291bnRVc2VyKSB7XG4gICAgXy5hc3NpZ24obGlzdE1hcCwge1xuICAgICAgdXBkYXRlQWNjb3VudDoge1xuICAgICAgICB0aXRsZTogJ+S/ruaUueizh+aWmScsXG4gICAgICAgIGZuOiAoKSA9PiB7XG4gICAgICAgICAgJC5nbG9iYWwuc2ltcGxlTG9hZFBhZ2UoJ3lidCcsICdhY2NvdW50X2VkaXRfc2VsZicpXG4gICAgICAgIH0sXG4gICAgICB9LFxuICAgICAgbG9nb3V0OiB7XG4gICAgICAgIHRpdGxlOiAn55m75Ye6JyxcbiAgICAgICAgZm46ICgpID0+IHtcbiAgICAgICAgICAkLmdsb2JhbC5haih7XG4gICAgICAgICAgICB1cmw6IGAvbWFpbi9hY2NvdW50L2xvZ291dGAsXG4gICAgICAgICAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICAgICAgICAgIGRhdGE6IHt9LFxuICAgICAgICAgICAgc3VjOiAocmVzKSA9PiB7XG4gICAgICAgICAgICAgICQuZ2xvYmFsLmluaXRQYWdlKHJlcylcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgfSlcbiAgICAgICAgfSxcbiAgICAgIH0sXG4gICAgfSlcbiAgfVxuXG4gIGNvbnN0IGxpc3QgPSBfLm1hcChsaXN0TWFwLCAob2JqLCBrZXkpID0+IHtcbiAgICByZXR1cm4ge2h0bWw6IG9iai50aXRsZSwgdmFsOiBrZXksIGRpdmlkZXI6IG9iai5kaXZpZGVyfVxuICB9KVxuXG4gIGNvbnN0ICRpbmZvQnRuID0gJCgnPHNwYW4+JykuZHJvcERvd24obGlzdCwge1xuICAgIGRlZlRpdGxlOiBgSGkgJHskJGFjY291bnRVc2VyID8gJCRhY2NvdW50VXNlci5uYW1lIDogJ+aCqOWlvSd9YCxcbiAgICBzdHlsZTogJ3dhcm5pbmcnLFxuICAgIHNpemU6ICdzbScsXG4gICAgc2VsZWN0ZWRDYjogKCkgPT4ge1xuICAgICAgY29uc3QgdmFsID0gJGluZm9CdG4udmFsKClcbiAgICAgIGxpc3RNYXBbdmFsXS5mbigpXG4gICAgfSxcbiAgfSlcbiAgJHNlbGYuYXBwZW5kKCRpbmZvQnRuKVxuXG4gIC8vIOmAj+mBjue2suWdgOaJvuWHuuebruWJjeaJgOmBuOWPlueahOmggemdouS4u+mhjFxuICBjb25zdCBfcGFnZVN1YmplY3QgPSAkLnVuaXQuZ2V0VXJsUGFyYW0oJ19wYWdlU3ViamVjdCcpXG4gIF8uZm9yRWFjaChsaXN0LCAoaW5mbywgaSkgPT4ge1xuICAgIGlmIChfcGFnZVN1YmplY3QgIT09IGluZm8udmFsKSByZXR1cm5cbiAgICAkaW5mb0J0bi5jbGlja0l0ZW0oaSwgZmFsc2UpXG4gIH0pXG5cbiAgcmV0dXJuICRzZWxmXG59XG4iLCIvLyDpgJrnn6Xlip/og71cbiQuZm4uYWxlcnQgPSBmdW5jdGlvbiAoKSB7XG4gIGNvbnN0ICRzZWxmID0gdGhpc1xuXG4gIGNvbnN0ICRhbGVydCA9ICQoYDxkaXY+YCkuY3NzKHtcbiAgICAndGV4dC1hbGlnbic6ICdjZW50ZXInLFxuICAgICdwb3NpdGlvbic6ICdhYnNvbHV0ZScsXG4gICAgJ3BhZGRpbmcnOiAnMjBweCcsXG4gICAgJ3dpZHRoJzogJzEwMCUnLFxuICAgICdjdXJzb3InOiAncG9pbnRlcicsXG4gICAgJ3otaW5kZXgnOiAyMDAsXG4gIH0pLmFkZENsYXNzKGBhbGVydGApLmNsaWNrKCgpID0+IHtcbiAgICAkc2VsZi5oaWRlQWxlcnQoKVxuICB9KVxuXG4gIF8uYXNzaWduKCRzZWxmLCB7XG4gICAgc2hvd0FsZXJ0OiAodHlwZSwgbXNnLCB0aW1lb3V0U2VjID0gMikgPT4ge1xuICAgICAgY29uc3QgY2xhc3NOYW1lID0gYGFsZXJ0LSR7dHlwZX1gXG4gICAgICAkYWxlcnQucmVtb3ZlQ2xhc3MoKGluZGV4LCBjbGFzc05hbWUpID0+IHtcbiAgICAgICAgcmV0dXJuIChjbGFzc05hbWUubWF0Y2goLyhefFxccylhbGVydC1cXFMrL2cpIHx8IFtdKS5qb2luKCcgJylcbiAgICAgIH0pLmFkZENsYXNzKGNsYXNzTmFtZSlcbiAgICAgIGlmICghbXNnKSByZXR1cm5cbiAgICAgICRhbGVydC5odG1sKG1zZykuc2xpZGVEb3duKDIwMClcblxuICAgICAgaWYgKCFfLmlzTnVtYmVyKHRpbWVvdXRTZWMpIHx8ICF0aW1lb3V0U2VjKSByZXR1cm5cbiAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAkc2VsZi5oaWRlQWxlcnQoKVxuICAgICAgfSwgdGltZW91dFNlYyAqIDEwMDApXG4gICAgfSxcbiAgICBzaG93SW5mbzogKG1zZywgdGltZW91dFNlYykgPT4ge1xuICAgICAgJHNlbGYuc2hvd0FsZXJ0KGBpbmZvYCwgbXNnLCB0aW1lb3V0U2VjKVxuICAgICAgcmV0dXJuICRzZWxmXG4gICAgfSxcbiAgICBzaG93V2FyOiAobXNnLCB0aW1lb3V0U2VjKSA9PiB7XG4gICAgICAkc2VsZi5zaG93QWxlcnQoYHdhcm5pbmdgLCBtc2csIHRpbWVvdXRTZWMpXG4gICAgICByZXR1cm4gJHNlbGZcbiAgICB9LFxuICAgIHNob3dFcnI6IChtc2csIHRpbWVvdXRTZWMpID0+IHtcbiAgICAgICRzZWxmLnNob3dBbGVydChgZGFuZ2VyYCwgbXNnLCB0aW1lb3V0U2VjKVxuICAgICAgcmV0dXJuICRzZWxmXG4gICAgfSxcbiAgICBoaWRlQWxlcnQ6ICgpID0+IHtcbiAgICAgICRhbGVydC5zbGlkZVVwKDIwMClcbiAgICAgIHJldHVybiAkc2VsZlxuICAgIH0sXG4gIH0pXG5cbiAgJHNlbGYucHJlcGVuZCgkYWxlcnQpLmhpZGVBbGVydCgpXG5cbiAgcmV0dXJuICRzZWxmXG59IiwiLy8g5Yip55SoIGRhdGEg6KOh55qEIGtleS92YWx1ZSDoh6rli5XoqK3nva7liLDnianku7blhadcbiQuZm4uYXV0b1NldCA9IGZ1bmN0aW9uIChkYXRhLCB7Y2J9ID0ge30pIHtcbiAgY29uc3QgJHNlbGYgPSB0aGlzXG5cbiAgJHNlbGYuZmluZChgW2F1dG8tc2V0XWApLmVhY2goZnVuY3Rpb24gKGkpIHtcbiAgICBjb25zdCAkc2VsZiA9ICQodGhpcylcbiAgICBjb25zdCBrZXkgPSAkc2VsZi5hdHRyKGBhdXRvLXNldGApXG4gICAgbGV0IHZhbCA9IF8uZ2V0KGRhdGEsIGtleSlcbiAgICBpZiAoY2IpIHtcbiAgICAgIGNvbnN0IG5ld1ZhbCA9IGNiKHtkYXRhLCBrZXksIHZhbCwgaX0pXG4gICAgICBpZiAobmV3VmFsKSB2YWwgPSBuZXdWYWxcbiAgICB9XG4gICAgJHNlbGYuaHRtbCghXy5pc1VuZGVmaW5lZCh2YWwpID8gdmFsIDogJycpXG4gIH0pXG5cbiAgcmV0dXJuICRzZWxmXG59IiwiLy8gYm9vbGVhbiDkuIvmi4npgbjllq5cbiQuZm4uYm9vbGVhbk9wdGlvbiA9IGZ1bmN0aW9uIChvcHQgPSB7fSkge1xuICBsZXQge1xuICAgIGFzYyA9IHRydWUsXG4gICAgZGVmVGl0bGUgPSAn5piv5ZCmJyxcbiAgICB0cnVlSHRtbCA9ICfmmK8nLFxuICAgIGZhbHNlSHRtbCA9ICflkKYnLFxuICAgIGRyb3BEb3duT3B0ID0ge2FkZEVtcHR5OiB0cnVlfSxcbiAgfSA9IG9wdFxuXG4gIGNvbnN0ICRzZWxmID0gdGhpc1xuXG4gIGNvbnN0IGxpc3QgPSBbXG4gICAge2h0bWw6IHRydWVIdG1sLCB2YWw6IHRydWV9LFxuICAgIHtodG1sOiBmYWxzZUh0bWwsIHZhbDogZmFsc2V9LFxuICBdXG4gIGlmICghYXNjKSBfLnJldmVyc2UobGlzdClcblxuICBkcm9wRG93bk9wdCA9IF8uYXNzaWduKHtcbiAgICBkZWZUaXRsZSxcbiAgfSwgZHJvcERvd25PcHQpXG5cbiAgJHNlbGYuZHJvcERvd24obGlzdCwgZHJvcERvd25PcHQpXG5cbiAgcmV0dXJuICRzZWxmXG59IiwiLy8g6YG45pOHIGJvb3RzdHJhcCB0aGVtZSDmlYjmnpxcbiQuZm4uYm9vdHN0cmFwVGhlbWUgPSBmdW5jdGlvbiAoKSB7XG4gIGNvbnN0ICRzZWxmID0gdGhpc1xuXG4gIGNvbnN0ICRoZWFkID0gJCgnaGVhZCcpXG4gIGNvbnN0IGNsYXNzTmFtZSA9IGBib290c3RyYXBUaGVtZWBcbiAgY29uc3QgZGVmVGhlbWUgPSBgLW5vbmUtYFxuICBjb25zdCBjdXJyZW50VGhlbWUgPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbShjbGFzc05hbWUpIHx8IGRlZlRoZW1lXG5cbiAgY29uc3QgZ2V0TGluayA9ICh0aGVtZSkgPT4ge1xuICAgIGlmICghdGhlbWUgfHwgdGhlbWUgPT09IGRlZlRoZW1lKSByZXR1cm4gYGh0dHBzOi8vc3RhY2twYXRoLmJvb3RzdHJhcGNkbi5jb20vYm9vdHN0cmFwLzQuNC4xL2Nzcy9ib290c3RyYXAubWluLmNzc2BcbiAgICByZXR1cm4gYGh0dHBzOi8vc3RhY2twYXRoLmJvb3RzdHJhcGNkbi5jb20vYm9vdHN3YXRjaC80LjQuMS8ke3RoZW1lfS9ib290c3RyYXAubWluLmNzc2BcbiAgfVxuICBjb25zdCBzZXRIcmVmID0gKHRoZW1lKSA9PiB7XG4gICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oY2xhc3NOYW1lLCB0aGVtZSlcbiAgICAkbGluay5hdHRyKGBocmVmYCwgZ2V0TGluayh0aGVtZSkpXG4gIH1cblxuICBsZXQgJGxpbmsgPSAkc2VsZi5maW5kKGNsYXNzTmFtZSlcbiAgaWYgKCRsaW5rLmxlbmd0aCA9PT0gMCkgJGxpbmsgPSAkKGA8bGluayBjbGFzcz1cIiR7Y2xhc3NOYW1lfVwiIHJlbD1cInN0eWxlc2hlZXRcIj5gKVxuICAkaGVhZC5hcHBlbmQoJGxpbmspXG5cbiAgY29uc3QgJGdyb3VwID0gJChgPGRpdiBjbGFzcz1cImJ0bi1ncm91cFwiPjwvZGl2PmApLmNzcyh7XG4gICAgbWFyZ2luOiA1LFxuICB9KVxuICBjb25zdCAkYnRuID0gJChgPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgY2xhc3M9XCJidG4gYnRuLWRhbmdlciBidG4tc20gZHJvcGRvd24tdG9nZ2xlXCIgZGF0YS10b2dnbGU9XCJkcm9wZG93blwiIGFyaWEtaGFzcG9wdXA9XCJ0cnVlXCIgYXJpYS1leHBhbmRlZD1cImZhbHNlXCI+VGhlbWU8L2J1dHRvbj5gKVxuICBjb25zdCAkbWVudSA9ICQoYDxkaXYgY2xhc3M9XCJkcm9wZG93bi1tZW51IGRyb3Bkb3duLW1lbnUtcmlnaHRcIj48L2Rpdj5gKS5jc3Moe1xuICAgIG92ZXJmbG93OiAnYXV0bycsXG4gIH0pXG4gICRncm91cC5hcHBlbmQoWyRidG4sICRtZW51XSlcbiAgJHNlbGYuYXBwZW5kKCRncm91cClcblxuICBjb25zdCB0aGVtZXMgPSBbXG4gICAgYC1ub25lLWAsIGBjZXJ1bGVhbmAsIGBjb3Ntb2AsIGBjeWJvcmdgLCBgZGFya2x5YCwgYGZsYXRseWAsIGBqb3VybmFsYCwgYGxpdGVyYWAsIGBsdW1lbmAsXG4gICAgYGx1eGAsIGBtYXRlcmlhYCwgYG1pbnR5YCwgYHB1bHNlYCwgYHNhbmRzdG9uZWAsIGBzaW1wbGV4YCwgYHNrZXRjaHlgLCBgc2xhdGVgLCBgc29sYXJgLFxuICAgIGBzcGFjZWxhYmAsIGBzdXBlcmhlcm9gLCBgdW5pdGVkYCwgYHlldGlgLFxuICBdXG4gIGNvbnN0IGl0ZW1MaXN0ID0gW11cbiAgZm9yIChjb25zdCB0aGVtZSBvZiB0aGVtZXMpIHtcbiAgICBjb25zdCAkYSA9ICQoYDxhIGNsYXNzPVwiZHJvcGRvd24taXRlbVwiIHN0eWxlPVwiY3Vyc29yOnBvaW50ZXI7XCI+JHt0aGVtZX08L2E+YCkuY2xpY2soKCkgPT4ge1xuICAgICAgc2V0SHJlZigkYS5odG1sKCkpXG4gICAgICBmb3IgKGNvbnN0ICRpdGVtIG9mIGl0ZW1MaXN0KSB7XG4gICAgICAgICRpdGVtLnJlbW92ZUNsYXNzKGBhY3RpdmVgKVxuICAgICAgfVxuICAgICAgJGEuYWRkQ2xhc3MoYGFjdGl2ZWApXG4gICAgfSlcbiAgICBpZiAoY3VycmVudFRoZW1lID09PSB0aGVtZSkgJGEuYWRkQ2xhc3MoYGFjdGl2ZWApXG4gICAgJG1lbnUuYXBwZW5kKCRhKVxuICAgIGl0ZW1MaXN0LnB1c2goJGEpXG4gIH1cblxuICBzZXRIcmVmKGN1cnJlbnRUaGVtZSlcblxuICByZXR1cm4gJHNlbGZcbn0iLCIvLyDnsKHljJbmloflrZflhaflrrlcbiQuZm4uYnJpZWYgPSBmdW5jdGlvbiAoY29udGVudCA9IGBgLCB7XG4gIGxpbmtUeHQgPSBgYCwgLy8g5oyH5a6a6YCj57WQ5paH5a2X5YWn5a65LCDmspLmnInoqK3nva7nmoTmmYLlgJnliYfmmK/miKrlj5blhafmlocsIOacieioree9ruaZgiB1c2VQb3Ag5by35Yi254K6IHRydWVcbiAgbWF4TGVuZ3RoID0gMjAsIC8vIOaIquWPluWFp+aWh+eahOmVt+W6plxufSA9IHt9KSB7XG4gIGNvbnN0ICRzZWxmID0gdGhpc1xuXG4gIGlmICghY29udGVudCkgcmV0dXJuICRzZWxmXG5cbiAgbGV0IGJyaWVmVHh0ID0gYGBcbiAgbGV0IHVzZVBvcCA9IHRydWUgLy8g5piv5ZCm6KaB55So5b2I6Lez6aGv56S6XG5cbiAgaWYgKGxpbmtUeHQpIHtcbiAgICBicmllZlR4dCA9IGxpbmtUeHRcbiAgICB1c2VQb3AgPSB0cnVlXG4gIH0gZWxzZSB7XG4gICAgYnJpZWZUeHQgPSBjb250ZW50LnN1YnN0cigwLCBtYXhMZW5ndGgpXG4gICAgaWYgKGJyaWVmVHh0Lmxlbmd0aCA8IGNvbnRlbnQubGVuZ3RoKSB7XG4gICAgICBicmllZlR4dCArPSBgLi4uYFxuICAgIH0gZWxzZSB7XG4gICAgICB1c2VQb3AgPSBmYWxzZSAvLyDmloflrZfplbfluqbmspLotoXpgY7miKrlj5bplbfluqYsIOS4jemcgOimgSBwb3BcbiAgICB9XG4gIH1cblxuICBjb25zdCAkdGV4dCA9ICQoYDxzcGFuPmApXG4gICR0ZXh0Lmh0bWwoYnJpZWZUeHQpXG4gIGlmICh1c2VQb3ApIHtcbiAgICBjb25zdCBvcHQgPSB7XG4gICAgICBjb250ZW50LFxuICAgIH1cbiAgICAkdGV4dC5hZGRDbGFzcyhgdGV4dC1pbmZvYCkuY3NzKHtjdXJzb3I6IGBwb2ludGVyYH0pLnBvcG92ZXIob3B0KVxuICB9XG4gICR0ZXh0Lm1vdXNlb3ZlcigoKSA9PiB7XG4gICAgJHRleHQucG9wb3Zlcihgc2hvd2ApXG4gIH0pXG4gICR0ZXh0Lm1vdXNlbGVhdmUoKCkgPT4ge1xuICAgICR0ZXh0LnBvcG92ZXIoYGhpZGVgKVxuICB9KVxuXG4gICRzZWxmLmFwcGVuZCgkdGV4dClcblxuICByZXR1cm4gJHNlbGZcbn0iLCIvLyDlrqLoo73ljJYgYnV0dG9uXG4kLmZuLmJ0biA9IGZ1bmN0aW9uICh7dHlwZSA9ICdwcmltYXJ5JywgaHRtbCA9ICfpgIHlh7onLCBzaXplfSA9IHt9KSB7XG4gIGNvbnN0ICRzZWxmID0gdGhpc1xuXG4gIGNvbnN0ICRidG4gPSAkKGA8YnV0dG9uIGNsYXNzPVwiYnRuIGJ0bi0ke3R5cGV9XCI+JHtodG1sfTwvYnV0dG9uPmApXG4gIGxldCBkZWZUeXBlID0gdHlwZVxuXG4gIGlmIChzaXplKSAkYnRuLmFkZENsYXNzKGBidG4tJHtzaXplfWApXG5cbiAgJHNlbGYuY3NzKHtcbiAgICBkaXNwbGF5OiAnaW5saW5lLWJsb2NrJyxcbiAgfSkuYXBwZW5kKCRidG4pXG5cbiAgXy5hc3NpZ24oJHNlbGYsIHtcbiAgICBkaXNhYmxlQnRuOiAoZGlzYWJsZWQgPSB0cnVlKSA9PiB7XG4gICAgICAkYnRuLnByb3AoJ2Rpc2FibGVkJywgZGlzYWJsZWQpXG4gICAgfSxcbiAgICBjaGFuZ2VUeXBlOiAodHlwZSA9ICdwcmltYXJ5JykgPT4ge1xuICAgICAgJGJ0bi5yZW1vdmVDbGFzcyhgYnRuLSR7ZGVmVHlwZX1gKS5hZGRDbGFzcyhgYnRuLSR7dHlwZX1gKVxuICAgICAgZGVmVHlwZSA9IHR5cGVcbiAgICB9LFxuICB9KVxuXG4gIHJldHVybiAkc2VsZlxufSIsIi8vIOioree9ri/lj5blvpcgY2hlY2tlZFxuJC5mbi5jaGVja2VkID0gZnVuY3Rpb24gKGNoZWNrZWQpIHtcbiAgY29uc3QgJHNlbGYgPSB0aGlzXG5cbiAgaWYgKF8uaXNOaWwoY2hlY2tlZCkpIHJldHVybiAkc2VsZi5wcm9wKCdjaGVja2VkJylcbiAgJHNlbGYucHJvcCgnY2hlY2tlZCcsIGNoZWNrZWQpXG5cbiAgcmV0dXJuICRzZWxmXG59IiwiLy8g5a6i6KO95YyWIGNvbnRlbnQg6aCB6Z2iXG4kLmZuLmNvbnRlbnQgPSBmdW5jdGlvbiAocGFyYW0gPSB7fSkge1xuICBjb25zdCAkc2VsZiA9IHRoaXNcbiAgY29uc3Qge2FsbEFqYXhTdWN9ID0gcGFyYW1cblxuICBjb25zdCAkc2VhcmNoTWFpbiA9ICRzZWxmLmZpbmQoYCNzZWFyY2hNYWluYClcbiAgY29uc3QgJHJlc3VsdE1haW4gPSAkc2VsZi5maW5kKGAjcmVzdWx0TWFpbmApXG4gIGNvbnN0ICRvdXRsaW5lQmxvY2sgPSAkc2VsZi5maW5kKGAjb3V0bGluZUJsb2NrYClcbiAgY29uc3QgYWpheFF1ZXVlID0gW10gLy8g6KiI5pW4IGNhbGxBamF4IOWft+ihjOaVuOmHj1xuICBsZXQgY29udGVudFBhcmFtID0ge30gLy8g5a2Y5pS+IGNvbnRlbnQg6Ieq55So6K6K5pW4XG5cbiAgLy8gYWpheCDlkbzlj6vmmYLnmoTpoIHpnaLmk43kvZwsIOS+i+WmgueUoueUn+iugOWPluaViOaenCwg6Ieq5YuVIGRpc2FibGUgZnJvbSDnianku7bnrYnnrYlcbiAgY29uc3QgaW5pdEFqYXhPcGVyYXRvciA9ICgkdGFyZ2V0cykgPT4ge1xuICAgIGlmICghXy5pc0FycmF5KCR0YXJnZXRzKSkgJHRhcmdldHMgPSBbJHRhcmdldHNdXG5cbiAgICBjb25zdCBvcmlEaXNhYmxlZEF0dHIgPSAnb3JpZ2luYWwtZGlzYWJsZWQnXG4gICAgY29uc3QgJGRpc2FibGVUYXJnZXRzID0gXy5tYXAoWy4uLiRzZWxmLmZpbmQoYGlucHV0YCksIC4uLiRzZWxmLmZpbmQoYGJ1dHRvbmApXSwgKGRvbSkgPT4gJChkb20pKVxuICAgIGNvbnN0IGluZm8gPSB7aXNTZXR0bGVkOiBmYWxzZSwgaXNTdWNjZXNzZnVsOiBmYWxzZX1cbiAgICBjb25zdCAkbG9hZGluZ3MgPSBbXVxuXG4gICAgZm9yIChjb25zdCAkdGFyZ2V0IG9mICR0YXJnZXRzKSB7XG4gICAgICBjb25zdCAkbG9hZGluZyA9ICQoYDxoMz7oroDlj5bkuK08L2gzPmApLmNzcyh7XG4gICAgICAgIG9wYWNpdHk6IDAuNSwgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgICAgIHRyYW5zZm9ybTogJ3RyYW5zbGF0ZSgtNTAlLCAwKScsXG4gICAgICAgIGxlZnQ6ICc1MCUnLFxuICAgICAgfSlcbiAgICAgICRsb2FkaW5ncy5wdXNoKCRsb2FkaW5nKVxuICAgICAgJHRhcmdldC5iZWZvcmUoJGxvYWRpbmcpXG4gICAgICAkdGFyZ2V0LmNzcyh7b3BhY2l0eTogMC4zfSlcbiAgICB9XG5cbiAgICBpZiAoYWpheFF1ZXVlLmxlbmd0aCA9PT0gMCkge1xuICAgICAgJHJlc3VsdE1haW4uc2hvdygpXG4gICAgICBfLmZvckVhY2goJGRpc2FibGVUYXJnZXRzLCAoJGRpc2FibGVUYXJnZXQpID0+IHsgLy8g6KiY6YyE5Y6f5pys55qEIGRpc2FibGVkIOWAvFxuICAgICAgICBpZiAoISRkaXNhYmxlVGFyZ2V0LmF0dHIob3JpRGlzYWJsZWRBdHRyKSkgJGRpc2FibGVUYXJnZXQuYXR0cihvcmlEaXNhYmxlZEF0dHIsICRkaXNhYmxlVGFyZ2V0LmRpc2FibGVkKCkpXG4gICAgICAgICRkaXNhYmxlVGFyZ2V0LmRpc2FibGVkKHRydWUpXG4gICAgICB9KVxuICAgIH1cblxuICAgIGFqYXhRdWV1ZS5wdXNoKGluZm8pXG5cbiAgICByZXR1cm4ge1xuICAgICAgc2V0dGxlOiAoaXNTdWNjZXNzZnVsID0gdHJ1ZSkgPT4ge1xuICAgICAgICBpbmZvLmlzU2V0dGxlZCA9IHRydWVcblxuICAgICAgICBpZiAoaXNTdWNjZXNzZnVsKSBpbmZvLmlzU3VjY2Vzc2Z1bCA9IHRydWVcbiAgICAgICAgZWxzZSAkcmVzdWx0TWFpbi5oaWRlKClcblxuICAgICAgICBmb3IgKGNvbnN0ICR0YXJnZXQgb2YgJHRhcmdldHMpIHtcbiAgICAgICAgICAkdGFyZ2V0LmFuaW1hdGUoe29wYWNpdHk6IDF9LCA0MDApXG4gICAgICAgIH1cbiAgICAgICAgZm9yIChjb25zdCAkbG9hZGluZyBvZiAkbG9hZGluZ3MpIHtcbiAgICAgICAgICAkbG9hZGluZy5yZW1vdmUoKVxuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgaXNBbGxTZXR0bGVkID0gXy5ldmVyeShhamF4UXVldWUsIChpbmZvKSA9PiBpbmZvLmlzU2V0dGxlZClcbiAgICAgICAgY29uc3QgaXNBbGxTdWNjZXNzZnVsID0gXy5ldmVyeShhamF4UXVldWUsIChpbmZvKSA9PiBpbmZvLmlzU3VjY2Vzc2Z1bClcbiAgICAgICAgaWYgKGlzQWxsU2V0dGxlZCkge1xuICAgICAgICAgIF8uZm9yRWFjaCgkZGlzYWJsZVRhcmdldHMsICgkZGlzYWJsZVRhcmdldCkgPT4geyAvLyDlm57lvqnljp/mnKznmoQgZGlzYWJsZWQg5YC8XG4gICAgICAgICAgICAkZGlzYWJsZVRhcmdldC5kaXNhYmxlZCgkZGlzYWJsZVRhcmdldC5hdHRyKG9yaURpc2FibGVkQXR0cikgPT09ICd0cnVlJylcbiAgICAgICAgICB9KVxuICAgICAgICAgIGFqYXhRdWV1ZS5zcGxpY2UoMCwgYWpheFF1ZXVlLmxlbmd0aCkgLy8g5riF56m6IHF1ZXVlXG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzQWxsU3VjY2Vzc2Z1bCkgYWxsQWpheFN1YyAmJiBhbGxBamF4U3VjKClcbiAgICAgIH0sXG4gICAgfVxuICB9XG5cbiAgLy8g5LiA5Lqb5Yid5aeL5YyWXG4gICRzZWFyY2hNYWluLmNzcyh7bWFyZ2luQm90dG9tOiAzMH0pXG4gICRyZXN1bHRNYWluLmNzcyh7bWFyZ2luQm90dG9tOiAzMCwgcG9zaXRpb246ICdyZWxhdGl2ZSd9KS5oaWRlKClcbiAgJG91dGxpbmVCbG9jay5hZGRDbGFzcyhgdGV4dC1jZW50ZXIgYmxvY2sxYClcblxuICAvLyDoqK3nva7kuIDlgIvnva7poILljYDloYpcbiAgY29uc3QgJHRvcERpdiA9ICQoYDxkaXYgY2xhc3M9XCJibG9jazEgdG9wRGl2XCIvPmApXG4gICRzZWxmLnByZXBlbmQoJHRvcERpdilcbiAgJHNlbGYuJHRvcERpdiA9ICR0b3BEaXZcblxuICBfLmFzc2lnbigkc2VsZiwge1xuICAgIC8vIOioree9ruaIluWPluW+lyBjb250ZW50UGFyYW1cbiAgICBjb250ZW50UGFyYW06IChhcmcsIGlzUmVwbGFjZSA9IGZhbHNlKSA9PiB7XG4gICAgICBpZiAoYXJnID09PSB0cnVlKSByZXR1cm4gY29udGVudFBhcmFtID0ge30gLy8g5riF56m6XG4gICAgICBpZiAoXy5pc1VuZGVmaW5lZChhcmcpKSByZXR1cm4gXy5vbWl0QnkoY29udGVudFBhcmFtLCBfLmlzVW5kZWZpbmVkKSAvLyDlj5blvpfmiYDmnInmlbjlgLxcbiAgICAgIGlmIChfLmlzU3RyaW5nKGFyZykpIHJldHVybiBjb250ZW50UGFyYW1bYXJnXSAvLyDlj5blvpfmjIflrprmlbjlgLxcbiAgICAgIGlmICghXy5pc1BsYWluT2JqZWN0KGFyZykpIHRocm93IEVycm9yKCfoq4vlgrPlhaXnianku7YnKVxuICAgICAgaWYgKGlzUmVwbGFjZSkgcmV0dXJuIGNvbnRlbnRQYXJhbSA9IGFyZyAvLyDopobok4vmlbjlgLxcbiAgICAgIHJldHVybiBfLmFzc2lnbihjb250ZW50UGFyYW0sIGFyZykgLy8g6Kit572u5pW45YC8XG4gICAgfSxcbiAgICAvLyDphY3oo53lhbbku5YgcGx1Z2luc1xuICAgIGZpdE91dDogKHBhcmFtKSA9PiB7XG4gICAgICBjb25zdCB7cGFnZVRpcE9wdCwgbm90aWNlQXJlYU9wdCwgZm5UZXh0T3B0fSA9IHBhcmFtXG5cbiAgICAgIGlmICghXy5pc0VtcHR5KHBhZ2VUaXBPcHQpKSB7XG4gICAgICAgIGNvbnN0ICR0aXBzQnRuID0gJChgPGJ1dHRvbiBpZD1cInRpcHNCdG5cIi8+YClcbiAgICAgICAgJHRvcERpdi5hcHBlbmQoJHRpcHNCdG4pXG4gICAgICAgICR0aXBzQnRuLnBhZ2VUaXBzKHBhZ2VUaXBPcHQpXG4gICAgICB9XG5cbiAgICAgIGlmICghXy5pc0VtcHR5KG5vdGljZUFyZWFPcHQpKSB7XG4gICAgICAgIGNvbnN0ICRub3RpY2VBcmVhID0gJChgPHNwYW4gaWQ9XCJub3RpY2VBcmVhXCIvPmApXG4gICAgICAgICR0b3BEaXYuYXBwZW5kKCRub3RpY2VBcmVhKVxuICAgICAgICAkbm90aWNlQXJlYS5ub3RpY2VBcmVhKG5vdGljZUFyZWFPcHQpXG4gICAgICB9XG5cbiAgICAgIGlmICghXy5pc0VtcHR5KGZuVGV4dE9wdCkpIHtcbiAgICAgICAgJHNlbGYuZmluZCgnaW5wdXQnKS5mdW5jdGlvblRleHQoZm5UZXh0T3B0KVxuICAgICAgfVxuICAgIH0sXG4gICAgLy8g5YyF6KOd5ZG85Y+rIGFqYXhcbiAgICBjYWxsQWpheDogKHBhcmFtLCAkdGFyZ2V0cyA9IFtdKSA9PiB7XG4gICAgICBjb25zdCB7dXJsLCBtZXRob2QsIGJlZm9yZVNlbmQsIHN1YywgZXJyLCBjb21wbGV0ZSwgZ2V0UXVlcnl9ID0gcGFyYW1cbiAgICAgIGNvbnN0IG9wZXJhdG9yID0gaW5pdEFqYXhPcGVyYXRvcigkdGFyZ2V0cylcblxuICAgICAgY29uc3QgbmV3QmVmb3JlU2VuZCA9ICgpID0+IHtcbiAgICAgICAgYmVmb3JlU2VuZCAmJiBiZWZvcmVTZW5kKClcbiAgICAgIH1cbiAgICAgIGNvbnN0IG5ld0NvbXBsZXRlID0gKCkgPT4ge1xuICAgICAgICBjb21wbGV0ZSAmJiBjb21wbGV0ZSgpXG4gICAgICB9XG4gICAgICBjb25zdCBuZXdFcnIgPSAoKSA9PiB7XG4gICAgICAgIG9wZXJhdG9yLnNldHRsZShmYWxzZSlcbiAgICAgICAgZXJyICYmIGVycigpXG4gICAgICB9XG4gICAgICBjb25zdCBuZXdTdWMgPSAocmVzKSA9PiB7XG4gICAgICAgIG9wZXJhdG9yLnNldHRsZSgpXG4gICAgICAgIHN1YyhyZXMpXG4gICAgICB9XG5cbiAgICAgIGNvbnN0IGRhdGEgPSAoKCkgPT4ge1xuICAgICAgICBpZiAoIWdldFF1ZXJ5KSByZXR1cm4ge31cbiAgICAgICAgaWYgKF8uaXNGdW5jdGlvbihnZXRRdWVyeSkpIHJldHVybiBnZXRRdWVyeSgpXG4gICAgICAgIHJldHVybiBnZXRRdWVyeVxuICAgICAgfSkoKVxuXG4gICAgICAkLmdsb2JhbC5haih7XG4gICAgICAgIHVybCxcbiAgICAgICAgbWV0aG9kLFxuICAgICAgICBkYXRhLFxuICAgICAgICBiZWZvcmVTZW5kOiBuZXdCZWZvcmVTZW5kLFxuICAgICAgICBzdWM6IG5ld1N1YyxcbiAgICAgICAgZXJyOiBuZXdFcnIsXG4gICAgICAgIGNvbXBsZXRlOiBuZXdDb21wbGV0ZSxcbiAgICAgIH0pXG4gICAgfSxcbiAgfSlcblxuICByZXR1cm4gJHNlbGZcbn1cbiIsIi8vIOWuouijveWMluaXpeacn+mBuOaTh1xuJC5mbi5kYXRlUGlja2VyID0gZnVuY3Rpb24gKG9wdCA9IHt9KSB7XG4gIGNvbnN0ICRzZWxmID0gdGhpc1xuICBjb25zdCBsYW5nID0gJC5kYXRlcGlja2VyLnJlZ2lvbmFsW2B6aC1UV2BdXG5cbiAgb3B0ID0gXy5hc3NpZ24oe1xuICAgIHNob3dPdGhlck1vbnRoczogdHJ1ZSxcbiAgICBzZWxlY3RPdGhlck1vbnRoczogdHJ1ZSxcbiAgICBtYXhEYXRlOiAwLFxuICAgIGNoYW5nZU1vbnRoOiB0cnVlLFxuICAgIGNoYW5nZVllYXI6IHRydWUsXG4gICAgZGF0ZUZvcm1hdDogYHl5LW1tLWRkYCxcbiAgfSwgb3B0KVxuICAkc2VsZi5kYXRlcGlja2VyKGBvcHRpb25gLCBsYW5nKS5kYXRlcGlja2VyKG9wdClcbiAgJHNlbGYuYWRkQ2xhc3MoJ2Zvcm0tY29udHJvbCcpLmNzcyh7XG4gICAgZGlzcGxheTogJ2lubGluZS1ibG9jaycsXG4gICAgd2lkdGg6ICdhdXRvJyxcbiAgfSlcblxuICBpZiAob3B0Lm5vdykge1xuICAgICRzZWxmLmRhdGVwaWNrZXIoYHNldERhdGVgLCBtb21lbnQoKS5mb3JtYXQoYFlZWVktTU0tRERgKSlcbiAgfVxuICBpZiAob3B0LnN1YnRyYWN0RGF5KSB7XG4gICAgJHNlbGYuZGF0ZXBpY2tlcihgc2V0RGF0ZWAsIG1vbWVudCgpLnN1YnRyYWN0KG9wdC5zdWJ0cmFjdERheSwgYGRgKS5mb3JtYXQoYFlZWVktTU0tRERgKSlcbiAgfVxuICBpZiAob3B0LmRhdGUpIHtcbiAgICAkc2VsZi5kYXRlcGlja2VyKGBzZXREYXRlYCwgb3B0LmRhdGUpXG4gIH1cblxuICByZXR1cm4gJHNlbGZcbn0iLCIvLyDlj5blvpflupXkuIvmiYDmnInnmoQgY2hpbGRyZW4gZG9tIOS4piBkaXNhYmxlZFxuJC5mbi5kaXNhYmxlQ2hpbGRyZW4gPSBmdW5jdGlvbiAoe3NlbGVjdG9yLCBkaXNhYmxlZCA9IHRydWV9KSB7XG4gIGNvbnN0ICRzZWxmID0gdGhpc1xuXG4gICRzZWxmLmZpbmQoc2VsZWN0b3IpLnByb3AoJ2Rpc2FibGVkJywgZGlzYWJsZWQpXG5cbiAgcmV0dXJuICRzZWxmXG59IiwiLy8g6Kit572uL+WPluW+lyBkaXNhYmxlZFxuJC5mbi5kaXNhYmxlZCA9IGZ1bmN0aW9uIChkaXNhYmxlZCkge1xuICBjb25zdCAkc2VsZiA9IHRoaXNcblxuICBpZiAoXy5pc05pbChkaXNhYmxlZCkpIHJldHVybiAkc2VsZi5wcm9wKCdkaXNhYmxlZCcpXG4gICRzZWxmLnByb3AoJ2Rpc2FibGVkJywgZGlzYWJsZWQpXG5cbiAgcmV0dXJuICRzZWxmXG59IiwiLy8gRE9NIOmhr+ekuuWIh+aPm1xuJC5mbi5kaXNwbGF5U3dpdGNoZXIgPSBmdW5jdGlvbiAoZG9tQXJyTGlzdCA9IFtdKSB7XG4gIGNvbnN0ICRzZWxmID0gdGhpc1xuICBjb25zdCBpbmRleExpc3QgPSBbXVxuXG4gIF8uYXNzaWduKCRzZWxmLCB7XG4gICAgLy8g6aGv56S65oyH5a6a6ZqO5bGkXG4gICAgZGlzcGxheUxheWVyOiAoaW5kZXggPSAwKSA9PiB7XG4gICAgICBpZiAoIWRvbUFyckxpc3RbaW5kZXhdKSB0aHJvdyBFcnJvcihgVGhlcmUgaXMgbm8gbGF5ZXIgZm9yIGluZGV4ICR7aW5kZXh9YClcblxuICAgICAgLy8gZS5nLiBkb21BcnJMaXN0ID0gW1skZG9tMSwgJGRvbTJdLCBbJGRvbTMsICRkb200XSwgLi4uXVxuICAgICAgbGV0ICRkb20sIG1ldGhvZFxuICAgICAgXy5mb3JFYWNoKGRvbUFyckxpc3QsIChkb21BcnIsIGkpID0+IHtcbiAgICAgICAgaWYgKCFfLmlzQXJyYXkoZG9tQXJyKSkgZG9tQXJyID0gW2RvbUFycl1cbiAgICAgICAgbWV0aG9kID0gaSA9PT0gaW5kZXggPyAnZmFkZUluJyA6ICdoaWRlJ1xuICAgICAgICBmb3IgKCRkb20gb2YgZG9tQXJyKSB7XG4gICAgICAgICAgJGRvbVttZXRob2RdKClcbiAgICAgICAgfVxuICAgICAgfSlcblxuICAgICAgLy8g5a+r5YWl6ZqO5bGk57SA6YyEXG4gICAgICBpZiAoXy5sYXN0KGluZGV4TGlzdCkgIT09IGluZGV4KSBpbmRleExpc3QucHVzaChpbmRleClcbiAgICAgIGlmIChpbmRleExpc3QubGVuZ3RoID4gMTIpIGluZGV4TGlzdC5zaGlmdCgpIC8vIOacgOWkmiAxMiDpmo7ntIDpjIRcblxuICAgICAgcmV0dXJuICRzZWxmXG4gICAgfSxcbiAgICAvLyDpoa/npLrkuIrkuIDlgIvpmo7lsaRcbiAgICBkaXNwbGF5UHJldkxheWVyOiAoKSA9PiB7XG4gICAgICBpZiAoaW5kZXhMaXN0Lmxlbmd0aCA8IDIpIHJldHVybiAkc2VsZiAvLyDnhKHkuIrkuIDmrKHnmoTpmo7lsaTntIDpjIQsIOS4jeWft+ihjFxuXG4gICAgICAvLyBlLmcuIGluZGV4TGlzdCA9IFt75LiK5qyh6aGv56S655qE6ZqO5bGkfSwge+eVtuS4i+mhr+ekuueahOmajuWxpH1dXG4gICAgICBpbmRleExpc3QucG9wKCkgLy8g5YWI56e76Zmk55W25LiL55qE6ZqO5bGk57SA6YyEXG4gICAgICBjb25zdCBwcmV2SW5kZXggPSBpbmRleExpc3QucG9wKCkgLy8g5Y+W5b6X5LiK5qyh55qE6ZqO5bGk57SA6YyEXG4gICAgICBpZiAoXy5pc05pbChwcmV2SW5kZXgpKSByZXR1cm4gJHNlbGZcblxuICAgICAgcmV0dXJuICRzZWxmLmRpc3BsYXlMYXllcihwcmV2SW5kZXgpXG4gICAgfSxcbiAgfSlcblxuICByZXR1cm4gJHNlbGZcbn0iLCIvLyDkuIvovIkgY3N2IOmAo+e1kFxuJC5mbi5kb3dubG9hZENzdkxpbmsgPSBmdW5jdGlvbiAodXJsLCB7cXVlcnkgPSB7fSwgdGl0bGUgPSAn5LiL6LyJY3N2J30gPSB7fSkge1xuICBjb25zdCAkc2VsZiA9IHRoaXNcblxuICAvLyDlsIcgJHNlbGYg55qE5a655Zmo6Kit572u54K655u45bCN5L2N572uLCDpgJnmqKPmiY3og73orpMgJGRvd25sb2FkTGluayDmraPnorrlrprkvY1cbiAgLy8gTm90ZS4g6KuL56K66KqNICRzZWxmIOacrOi6q+W3suiiqyBhcHBlbmQg6IezIGRvY3VtZW50IOS4rVxuICAkc2VsZi5wYXJlbnQoKS5jc3Moe3Bvc2l0aW9uOiAncmVsYXRpdmUnfSlcblxuICAkc2VsZi5odG1sKHRpdGxlKS5saW5rU3R5bGUoKVxuXG4gIC8vIOioree9rumaseW9oueahOS4i+i8iSBjc3Yg5LiL5ouJ6YG45ZauXG4gIGNvbnN0ICRkb3dubG9hZExpbmsgPSAkKCc8ZGl2PicpLmRvd25sb2FkQ3N2T3B0aW9uKHVybCwge1xuICAgIHF1ZXJ5LFxuICAgIHRpdGxlLFxuICAgIGRlZkRpc2FibGVkOiBmYWxzZSxcbiAgICBzaXplOiAnc20nLFxuICB9KVxuICAkZG93bmxvYWRMaW5rLmdldEJ0bigpLmhpZGUoKSAvLyDpmrHol4/kuIvmi4npgbjllq7mjInpiJVcbiAgJHNlbGYuYXBwZW5kKCRkb3dubG9hZExpbmspLmF0dHIoeydkYXRhLXRvZ2dsZSc6ICdkcm9wZG93bid9KSAvLyDoqK3nva4gJ2RhdGEtdG9nZ2xlJyDop7jnmbzpu57mk4rplovllZ/kuIvmi4npgbjllq5cblxuICByZXR1cm4gJHNlbGZcbn0iLCIvLyDkuIvovIkgY3N2IOS4i+aLiemBuOWWrlxuJC5mbi5kb3dubG9hZENzdk9wdGlvbiA9IGZ1bmN0aW9uICh1cmwsIHtcbiAgcXVlcnkgPSB7fSwgZGVmRGlzYWJsZWQgPSB0cnVlLFxuICAvLyDku6XkuIvngrogZHJvcERvd24g5Y+D5pW4XG4gIHRpdGxlID0gJ+S4i+i8iWNzdicsIHNpemUgPSAnbWQnLFxufSA9IHt9KSB7XG4gIGNvbnN0ICRzZWxmID0gdGhpc1xuXG4gIGNvbnN0IGFyciA9IFtcbiAgICB7aHRtbDogJ2JpZzXnt6jnorwnLCB2YWw6ICdiaWc1J30sXG4gICAge2h0bWw6ICd1dGYtOOe3qOeivCcsIHZhbDogJ3V0Zi04J30sXG4gIF1cbiAgY29uc3QgZHJvcERvd25PcHQgPSB7XG4gICAgZGVmVGl0bGU6IHRpdGxlLFxuICAgIHN0eWxlOiAnd2FybmluZycsXG4gICAgc2l6ZSxcbiAgICBzZWxlY3RlZENiOiAoKSA9PiB7XG4gICAgICBjb25zdCBuZXdRdWVyeSA9IF8uaXNGdW5jdGlvbihxdWVyeSkgPyBxdWVyeSgpIDogcXVlcnlcbiAgICAgIG5ld1F1ZXJ5LmVuY29kZSA9ICRzZWxmLnZhbCgpXG4gICAgICAkLmRvd25sb2FkZXIuZG93bmxvYWQodXJsLCBuZXdRdWVyeSlcbiAgICAgIHVuc2VsZWN0QWxsRm4odHJ1ZSlcbiAgICB9LFxuICB9XG4gICRzZWxmLmRyb3BEb3duKGFyciwgZHJvcERvd25PcHQpXG5cbiAgaWYgKGRlZkRpc2FibGVkKSAkc2VsZi5kaXNhYmxlQnRuKClcblxuICBjb25zdCB1bnNlbGVjdEFsbEZuID0gJHNlbGYudW5zZWxlY3RBbGxcblxuICBfLmFzc2lnbigkc2VsZiwge1xuICAgIHVuc2VsZWN0QWxsOiAoKSA9PiB7IC8vIOWPluS7oyAkLmZuLmRyb3BEb3duIOWOn+acrOeahCB1bnNlbGVjdEFsbCBmdW5jdGlvblxuICAgICAgdW5zZWxlY3RBbGxGbih0cnVlKVxuICAgIH0sXG4gIH0pXG5cbiAgdW5zZWxlY3RBbGxGbih0cnVlKVxuXG4gIHJldHVybiAkc2VsZlxufSIsIi8vIOWuouijveWMluS4i+aLiemBuOWWrlxuJC5mbi5kcm9wRG93biA9IGZ1bmN0aW9uIChsaXN0ID0gW10sIG9wdCA9IHt9KSB7XG4gIGxldCB7XG4gICAgYWRkRW1wdHkgPSBmYWxzZSwgLy8g5piv5ZCm5paw5aKe6aCQ6Kit56m66YG46aCFXG4gICAgZGVmVGl0bGUgPSAn6KuL6YG45pOHJywgLy8g6YG45Zau5Yid5aeL6KaB6aGv56S655qE5paH5a2XXG4gICAgc3R5bGUgPSAnaW5mbycsIC8vIGJ0biDmqKPlvI9cbiAgICBzaXplID0gJ21kJywgLy8gYnRuIOWkp+Wwj1xuICAgIG11bHRpcGxlLCAvLyDopIfpgbjmqKHlvI8sIDA95rKS5pyJ5oyJ6YiVLCAxPemhr+ekuuWFqOmBuCwgMj3pgbjnpLrlj5bmtojpgbjlj5YsIDM96aGv56S65YWo6YG4L+WPlua2iOmBuOWPllxuICAgIG1heFJvdyA9IDEyLCAvLyDmnIDlpKfpgbjllq7ooYzmlbhcbiAgICBjb2x1bW4gPSAxLCAvLyDmnJ/mnJvpgbjllq7liJfmlbhcbiAgICBzZWxlY3RlZENiLCAvLyDpgbjllq7ooqvpgbjlj5bmmYLlm57lkbznmoQgZnVuY3Rpb25cbiAgICBzaG93QXJyb3cgPSB0cnVlLCAvLyDmmK/lkKbpoa/npLrnrq3poK1cbiAgICBkZWZJbmRleCwgLy8g6aCQ6Kit6YG45Y+W6aCF55uuLCDlvp4gMCDplovlp4ssIOaUr+aPtOaVuOWtl+WPiuaVuOWtl+mZo+WIl1xuICAgIGRlZlZhbCwgLy8g6aCQ6Kit6YG45Y+W5YC8LCDmlK/mj7Tllq7nrYblj4rpmaPliJdcbiAgfSA9IG9wdFxuXG4gIGNvbnN0ICRzZWxmID0gdGhpc1xuICBjb25zdCAkaXRlbXMgPSBbXVxuICBjb25zdCB2YWx1ZXMgPSBbXVxuICBjb25zdCBpc011bHRpcGxlID0gWzAsIDEsIDIsIDNdLmluY2x1ZGVzKG11bHRpcGxlKVxuICBjb25zdCBzZWxlY3RlZENsYXNzID0gYGRyb3Bkb3duLXNlbGVjdGVkYFxuICBjb25zdCB0ZXh0Q2xhc3MgPSBgdGV4dC0ke3N0eWxlfWBcblxuICBpZiAoYWRkRW1wdHkpIGxpc3QudW5zaGlmdCh7aHRtbDogJ1vmuIXpmaRdJywgX2RvQ2xlYW51cDogdHJ1ZX0pXG5cbiAgY29uc3QgbGlzdENvdW50ID0gXy5zaXplKGxpc3QpXG4gIGNvbnN0IGxhc3RJdGVtSW5kZXggPSBsaXN0Q291bnQgLSAxXG4gIGNvbnN0IHRkQXJyID0gW10gLy8g55So5L6G5Y2U5Yqp5pS+572u6YG45Zau6YG46aCFXG4gIGNvbnN0IHZhbHVlQXJyID0gW10gLy8g5a2Y5YSy6KaB5Zue5YKz55qE5YC8XG5cbiAgLy8g55W26KGM5pW45aSn5pa85pyA5aSn5YC85pmCLCDlmJfoqablop7liqDliJfmlbgo55u05o6SKSwg5Lim6YeN5paw6KiI566X6KGM5pW4XG4gIGxldCByb3cgPSBNYXRoLmNlaWwobGlzdENvdW50IC8gY29sdW1uKVxuICB3aGlsZSAocm93ID4gbWF4Um93KSB7XG4gICAgcm93ID0gTWF0aC5jZWlsKGxpc3RDb3VudCAvICsrY29sdW1uKVxuICB9XG5cbiAgLy8g5pu05paw6YG45Zau55qE6YG45Y+W54uA5oWLXG4gIGNvbnN0IHNldEl0ZW1TZWxlY3RTdGF0dXMgPSAoJGl0ZW0sIGlzU2VsZWN0ZWQpID0+IHtcbiAgICBpZiAoaXNNdWx0aXBsZSkgcmV0dXJuICRpdGVtLnNldFNlbGVjdFN0YXR1cyhpc1NlbGVjdGVkKVxuXG4gICAgLy8g5Zau6YG45qih5byPIOWmguaenOS7o+WFpeeahCAkaXRlbSDmmK8gYm9vbGVhbiwg5YmH5by35Yi26L2J5o+b5omA5pyJ6YG45Zau6aCF55uuXG4gICAgXy5mb3JFYWNoKCRpdGVtcywgKCRpKSA9PiB7XG4gICAgICBpZiAoXy5pc0Jvb2xlYW4oJGl0ZW0pKSByZXR1cm4gJGkuc2V0U2VsZWN0U3RhdHVzKCRpdGVtKVxuICAgICAgJGkuc2V0U2VsZWN0U3RhdHVzKCRpID09PSAkaXRlbSkgLy8g56ym5ZCI55qEICRpdGVtIOaJjeacg+iiq+ioreeCuumBuOWPllxuICAgIH0pXG4gIH1cbiAgLy8g57WQ566X6YG45Y+W5YC8LCDkuKbmm7TmlrDpgbjllq7mloflrZdcbiAgY29uc3QgY29uY2x1ZGVWYWwgPSAoKSA9PiB7XG4gICAgY29uc3QgaHRtbEFyciA9IFtdXG4gICAgdmFsdWVBcnIubGVuZ3RoID0gMCAvLyDmuIXnqbrpgbjlj5blgLxcbiAgICBfLmZvckVhY2goJGl0ZW1zLCAoJGkpID0+IHtcbiAgICAgIGlmICghJGkuaXNTZWxlY3RlZCgpKSByZXR1cm5cbiAgICAgIGlmICgkaS5fZG9DbGVhbnVwKSByZXR1cm5cbiAgICAgIHZhbHVlQXJyLnB1c2goJGkuZ2V0VmFsKCkpXG4gICAgICBodG1sQXJyLnB1c2goJGkuZ2V0SHRtbCgpKVxuICAgIH0pXG5cbiAgICBpZiAoaHRtbEFyci5sZW5ndGgpIHtcbiAgICAgIGxldCBodG1sID0gaHRtbEFyclswXVxuICAgICAgaWYgKGh0bWxBcnIubGVuZ3RoID4gMSkgaHRtbCArPSBgLC4uLmBcbiAgICAgICRidG4uaHRtbChgJHtkZWZUaXRsZX0gJHtodG1sfWApXG4gICAgfSBlbHNlIHtcbiAgICAgICRidG4uaHRtbChkZWZUaXRsZSlcbiAgICB9XG4gIH1cbiAgY29uc3QgYnVpbGRVcEl0ZW0gPSAoZGF0YSwgaSkgPT4ge1xuICAgIGNvbnN0IGNvbHVtbkluZGV4ID0gTWF0aC5mbG9vcigoJGl0ZW1zLmxlbmd0aCkgLyByb3cpXG4gICAgY29uc3QgJHRkID0gdGRBcnJbY29sdW1uSW5kZXhdXG5cbiAgICBjb25zdCBodG1sID0gXy5pc1BsYWluT2JqZWN0KGRhdGEpID8gZGF0YS5odG1sIDogZGF0YVxuICAgIGNvbnN0IHZhbCA9IF8uaXNQbGFpbk9iamVjdChkYXRhKSA/IGRhdGEudmFsIDogZGF0YVxuICAgIGNvbnN0IGlzU2VsZWN0ZWQgPSBfLmlzUGxhaW5PYmplY3QoZGF0YSkgPyBkYXRhLmlzU2VsZWN0ZWQgOiBmYWxzZVxuICAgIGNvbnN0IGRpdmlkZXIgPSBfLmlzUGxhaW5PYmplY3QoZGF0YSkgPyBkYXRhLmRpdmlkZXIgOiB1bmRlZmluZWRcbiAgICBjb25zdCBfZG9DbGVhbnVwID0gXy5pc1BsYWluT2JqZWN0KGRhdGEpID8gZGF0YS5fZG9DbGVhbnVwIDogdW5kZWZpbmVkXG5cbiAgICBjb25zdCAkaXRlbSA9ICQoYDxhIGNsYXNzPVwiZHJvcGRvd24taXRlbVwiIHN0eWxlPVwiY3Vyc29yOnBvaW50ZXI7XCI+PC9hPmApLmNsaWNrKCgpID0+IHtcbiAgICAgIGlmICgkaXRlbS5fZG9DbGVhbnVwKSB7XG4gICAgICAgICRzZWxmLnVuc2VsZWN0QWxsKClcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNldEl0ZW1TZWxlY3RTdGF0dXMoJGl0ZW0pXG4gICAgICAgIGNvbmNsdWRlVmFsKClcbiAgICAgIH1cblxuICAgICAgaWYgKCEkaXRlbS5fZG9UcmlnZ2VyKSB7XG4gICAgICAgICRpdGVtLnNldFRyaWdnZXIoKSAvLyDkuIvmrKHlho3ooqsgY2xpY2sg5pmC6aCQ6Kit5Y+v5Lul6Ke455m8XG4gICAgICAgIHJldHVyblxuICAgICAgfVxuICAgICAgc2VsZWN0ZWRDYiAmJiBzZWxlY3RlZENiKClcbiAgICB9KVxuICAgIGNvbnN0ICRjaGVja2VkID0gJChgPHNwYW4gc3R5bGU9XCJwYWRkaW5nLXJpZ2h0OiA1cHg7XCI+4oiaPHNwYW4+YCkuaGlkZSgpXG5cbiAgICAkaXRlbS5zZXRTZWxlY3RTdGF0dXMgPSAoaXNDaGVja2VkKSA9PiB7XG4gICAgICBpZiAoaXNDaGVja2VkID09PSB0cnVlKSB7XG4gICAgICAgICRpdGVtLmFkZENsYXNzKGAke3NlbGVjdGVkQ2xhc3N9ICR7dGV4dENsYXNzfWApXG4gICAgICAgICRjaGVja2VkLnNob3coKVxuICAgICAgfSBlbHNlIGlmIChpc0NoZWNrZWQgPT09IGZhbHNlKSB7XG4gICAgICAgICRpdGVtLnJlbW92ZUNsYXNzKGAke3NlbGVjdGVkQ2xhc3N9ICR7dGV4dENsYXNzfWApXG4gICAgICAgICRjaGVja2VkLmhpZGUoKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgJGl0ZW0udG9nZ2xlQ2xhc3MoYCR7c2VsZWN0ZWRDbGFzc30gJHt0ZXh0Q2xhc3N9YClcbiAgICAgICAgJGNoZWNrZWQudG9nZ2xlKClcbiAgICAgIH1cbiAgICB9XG4gICAgJGl0ZW0uaXNTZWxlY3RlZCA9ICgpID0+IHtcbiAgICAgIHJldHVybiAkaXRlbS5oYXNDbGFzcyhzZWxlY3RlZENsYXNzKVxuICAgIH1cbiAgICAkaXRlbS5nZXRIdG1sID0gKCkgPT4ge1xuICAgICAgcmV0dXJuIGh0bWxcbiAgICB9XG4gICAgJGl0ZW0uZ2V0VmFsID0gKCkgPT4ge1xuICAgICAgcmV0dXJuIHZhbFxuICAgIH1cbiAgICAkaXRlbS5zZXRUcmlnZ2VyID0gKGRvVHJpZ2dlciA9IHRydWUpID0+IHtcbiAgICAgICRpdGVtLl9kb1RyaWdnZXIgPSBkb1RyaWdnZXJcbiAgICB9XG4gICAgJGl0ZW0uX2RvQ2xlYW51cCA9IF9kb0NsZWFudXBcbiAgICAkaXRlbS5fZG9UcmlnZ2VyID0gdHJ1ZVxuXG4gICAgdmFsdWVzLnB1c2godmFsKVxuICAgICRpdGVtcy5wdXNoKCRpdGVtKVxuICAgICRpdGVtLmFwcGVuZCgkY2hlY2tlZCkuYXBwZW5kKGh0bWwpLnJlYWR5KCgpID0+IHtcbiAgICAgIGlmIChpc1NlbGVjdGVkKSAkaXRlbS5zZXRTZWxlY3RTdGF0dXModHJ1ZSlcbiAgICAgIGlmIChpID09PSBsYXN0SXRlbUluZGV4KSBjb25jbHVkZVZhbCgpXG4gICAgfSlcblxuICAgICR0ZC5hcHBlbmQoJGl0ZW0pXG4gICAgaWYgKGRpdmlkZXIpICR0ZC5hcHBlbmQoJzxkaXYgY2xhc3M9XCJkcm9wZG93bi1kaXZpZGVyXCI+PC9kaXY+JylcbiAgfVxuXG4gIGNvbnN0ICRidG4gPSAoKCkgPT4ge1xuICAgIGNvbnN0ICRidG4gPSAkKGA8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBjbGFzcz1cImJ0biBidG4tb3V0bGluZS0ke3N0eWxlfSBidG4tJHtzaXplfVwiIGRhdGEtdG9nZ2xlPVwiZHJvcGRvd25cIj5gKVxuICAgIGlmIChzaG93QXJyb3cpICRidG4uYWRkQ2xhc3MoJ2Ryb3Bkb3duLXRvZ2dsZScpXG4gICAgaWYgKGxpc3RDb3VudCA9PT0gMCkgJGJ0bi5hdHRyKCdkaXNhYmxlZCcsIHRydWUpXG4gICAgcmV0dXJuICRidG5cbiAgfSkoKVxuICBjb25zdCAkZHJvcGRvd25NZW51ID0gKCgpID0+IHtcbiAgICBjb25zdCAkZHJvcGRvd25NZW51ID0gJChgPGRpdiBjbGFzcz1cImRyb3Bkb3duLW1lbnVcIj5gKS5jc3Moe1xuICAgICAgJ21pbi13aWR0aCc6ICcycmVtJyxcbiAgICB9KVxuXG4gICAgLy8g55So5L6G5pS+572u6YG46aCFXG4gICAgY29uc3QgJGRyb3Bkb3duQ29udGVudCA9ICQoYDxkaXYgY2xhc3M9XCJkcm9wZG93bi1jb250ZW50XCI+YCkuY3NzKHtcbiAgICAgICdtYXgtaGVpZ2h0JzogJ2NhbGMoMTAwdmggLSAzMDBweCknLFxuICAgICAgJ21heC13aWR0aCc6ICdjYWxjKDEwMHZoIC0gMjAwcHgpJyxcbiAgICAgIG92ZXJmbG93OiAnYXV0bycsXG4gICAgfSlcblxuICAgIC8vIOioree9ruWIl+aVuCB0YWJsZVxuICAgIGNvbnN0ICRjb2x1bW5UYWJsZSA9ICgoKSA9PiB7XG4gICAgICBjb25zdCAkdCA9ICQoYDx0YWJsZT48dHI+PC90cj48L3RhYmxlPmApIC8vIOeUqOS+huiuk+mBuOWWruWPr+S7peWRiOePviBuIOWIl1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjb2x1bW47IGkrKykge1xuICAgICAgICBjb25zdCAkdGQgPSAkKGA8dGQ+PC90ZD5gKVxuICAgICAgICAkdC5hcHBlbmQoJHRkKVxuICAgICAgICB0ZEFyci5wdXNoKCR0ZClcbiAgICAgIH1cbiAgICAgIHJldHVybiAkdFxuICAgIH0pKClcbiAgICAkZHJvcGRvd25NZW51LmFwcGVuZCgkZHJvcGRvd25Db250ZW50LmFwcGVuZCgkY29sdW1uVGFibGUpKVxuXG4gICAgLy8g6Kit572u6YG45ZauXG4gICAgLy8gaWYgKGFkZEVtcHR5KSBidWlsZFVwSXRlbSh7aHRtbDogJ1vmuIXpmaRdJywgX2RvQ2xlYW51cDogdHJ1ZX0pXG4gICAgXy5mb3JFYWNoKGxpc3QsIChkYXRhLCBpKSA9PiB7XG4gICAgICBpZiAoIShfLmlzUGxhaW5PYmplY3QoZGF0YSkgfHwgXy5pc1N0cmluZyhkYXRhKSkpIHJldHVyblxuICAgICAgYnVpbGRVcEl0ZW0oZGF0YSwgaSlcbiAgICB9KVxuXG4gICAgaWYgKCFpc011bHRpcGxlKSByZXR1cm4gJGRyb3Bkb3duTWVudVxuXG4gICAgJGRyb3Bkb3duTWVudS5wcmVwZW5kKFtcbiAgICAgIGA8ZGl2IGNsYXNzPVwiZHJvcGRvd24taXRlbSBkaXNhYmxlZCB0ZXh0LWNlbnRlclwiPuikh+mBuDwvZGl2PmAsXG4gICAgICBgPGRpdiBjbGFzcz1cImRyb3Bkb3duLWRpdmlkZXJcIj48L2Rpdj5gLFxuICAgIF0pXG4gICAgJGRyb3Bkb3duTWVudS5hcHBlbmQoW1xuICAgICAgYDxkaXYgY2xhc3M9XCJkcm9wZG93bi1kaXZpZGVyXCI+PC9kaXY+YCxcbiAgICAgICgoKSA9PiB7XG4gICAgICAgIGNvbnN0ICRmb290ZXIgPSAkKGA8ZGl2IGNsYXNzPVwiZHJvcGRvd24taXRlbSBidG4tZ3JvdXBcIj48L2Rpdj5gKVxuICAgICAgICBpZiAobXVsdGlwbGUgPT09IDEgfHwgbXVsdGlwbGUgPT09IDMpIHtcbiAgICAgICAgICBjb25zdCAkc2VsZWN0QWxsQnRuID0gJChgPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgY2xhc3M9XCJidG4gYnRuLXByaW1hcnlcIiBzdHlsZT1cIm1hcmdpbjogMCBhdXRvO1wiPuWFqOmBuDwvYnV0dG9uPmApLmNsaWNrKCgpID0+IHtcbiAgICAgICAgICAgICRzZWxmLnNlbGVjdEFsbCgpXG4gICAgICAgICAgICBzZWxlY3RlZENiICYmIHNlbGVjdGVkQ2IoKVxuICAgICAgICAgIH0pXG4gICAgICAgICAgJGZvb3Rlci5hcHBlbmQoJHNlbGVjdEFsbEJ0bilcbiAgICAgICAgfVxuICAgICAgICBpZiAobXVsdGlwbGUgPT09IDIgfHwgbXVsdGlwbGUgPT09IDMpIHtcbiAgICAgICAgICBjb25zdCAkdW5zZWxlY3RBbGxCdG4gPSAkKGA8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBjbGFzcz1cImJ0biBidG4tZGFuZ2VyXCIgc3R5bGU9XCJtYXJnaW46IDAgYXV0bztcIj7muIXpmaQ8L2J1dHRvbj5gKS5jbGljaygoKSA9PiB7XG4gICAgICAgICAgICAkc2VsZi51bnNlbGVjdEFsbCgpXG4gICAgICAgICAgICBzZWxlY3RlZENiICYmIHNlbGVjdGVkQ2IoKVxuICAgICAgICAgIH0pXG4gICAgICAgICAgJGZvb3Rlci5hcHBlbmQoJHVuc2VsZWN0QWxsQnRuKVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiAkZm9vdGVyXG4gICAgICB9KSgpLFxuICAgIF0pXG4gICAgJGRyb3Bkb3duTWVudS5jbGljaygoZXZlbnQpID0+IHtcbiAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpIC8vIOikh+mBuOaooeW8jywg6Ziy5q2i6bue6YG45pmC6YG45Zau5raI5aSxXG4gICAgfSlcbiAgICByZXR1cm4gJGRyb3Bkb3duTWVudVxuICB9KSgpXG5cbiAgJHNlbGYuaHRtbChgYCkuY3NzKHtcbiAgICBkaXNwbGF5OiAnaW5saW5lLWJsb2NrJyxcbiAgICB2ZXJ0aWNhbEFsaWduOiAnbWlkZGxlJyxcbiAgfSkuYXBwZW5kKCgoKSA9PiB7XG4gICAgY29uc3QgYXJyID0gWyRidG5dXG4gICAgaWYgKGxpc3RDb3VudCA+IDApIGFyci5wdXNoKCRkcm9wZG93bk1lbnUpXG4gICAgcmV0dXJuIGFyclxuICB9KSgpKVxuXG4gIF8uYXNzaWduKCRzZWxmLCB7XG4gICAgLy8g6Kit572u5oiW5Y+W5b6X6YG45Zau5YC8XG4gICAgdmFsOiAodmFsKSA9PiB7XG4gICAgICBpZiAoXy5pc1VuZGVmaW5lZCh2YWwpKSByZXR1cm4gKGlzTXVsdGlwbGUpID8gdmFsdWVBcnIgOiB2YWx1ZUFyclswXVxuICAgICAgY29uc3QgdmFsQXJyID0gXy5pc0FycmF5KHZhbCkgPyB2YWwgOiBbdmFsXVxuICAgICAgXy5mb3JFYWNoKCRpdGVtcywgKCRpdGVtKSA9PiB7XG4gICAgICAgIGNvbnN0IGl0ZW1WYWwgPSAkaXRlbS5nZXRWYWwoKVxuICAgICAgICBpZiAoIXZhbEFyci5pbmNsdWRlcyhpdGVtVmFsKSkgcmV0dXJuXG4gICAgICAgICRpdGVtLmNsaWNrKClcbiAgICAgIH0pXG4gICAgfSxcbiAgICAvLyDpgbjlj5bmjIflrprpgbjpoIVcbiAgICBjbGlja0l0ZW06IChpdGVtSW5kZXggPSAwLCBkb1RyaWdnZXIpID0+IHtcbiAgICAgIGNvbnN0IGl0ZW1JbmRleGVzID0gXy5pc0FycmF5KGl0ZW1JbmRleCkgPyBpdGVtSW5kZXggOiBbaXRlbUluZGV4XVxuICAgICAgXy5mb3JFYWNoKGl0ZW1JbmRleGVzLCAoaSkgPT4ge1xuICAgICAgICBjb25zdCAkaXRlbSA9ICRpdGVtc1tpXVxuICAgICAgICAkaXRlbSAmJiAkaXRlbS5zZXRUcmlnZ2VyKGRvVHJpZ2dlcikgfHwgJGl0ZW0uY2xpY2soKVxuICAgICAgfSlcbiAgICAgIHJldHVybiAkc2VsZlxuICAgIH0sXG4gICAgLy8g5YWo6YG4XG4gICAgc2VsZWN0QWxsOiAoZm9yY2VNb2RlKSA9PiB7XG4gICAgICBpZiAoIWlzTXVsdGlwbGUpIHtcbiAgICAgICAgaWYgKGZvcmNlTW9kZSkge1xuICAgICAgICAgIHNldEl0ZW1TZWxlY3RTdGF0dXModHJ1ZSkgLy8g5by35Yi25YWo6YOo5Y+W5raIXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY29uc3QgJGl0ZW0gPSAkaXRlbXNbJGl0ZW1zLmxlbmd0aCAtIDFdXG4gICAgICAgICAgJGl0ZW0gJiYgc2V0SXRlbVNlbGVjdFN0YXR1cygkaXRlbSkgLy8g6YG45Y+W5pyA5b6M5LiA5YCL6YG46aCFXG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIF8uZm9yRWFjaCgkaXRlbXMsICgkaXRlbSkgPT4ge1xuICAgICAgICAgIHNldEl0ZW1TZWxlY3RTdGF0dXMoJGl0ZW0sIHRydWUpXG4gICAgICAgIH0pXG4gICAgICB9XG4gICAgICBjb25jbHVkZVZhbCgpXG4gICAgICByZXR1cm4gJHNlbGZcbiAgICB9LFxuICAgIC8vIOWPlua2iOWFqOmBuFxuICAgIHVuc2VsZWN0QWxsOiAoZm9yY2VNb2RlKSA9PiB7XG4gICAgICBpZiAoIWlzTXVsdGlwbGUpIHtcbiAgICAgICAgaWYgKGZvcmNlTW9kZSkge1xuICAgICAgICAgIHNldEl0ZW1TZWxlY3RTdGF0dXMoZmFsc2UpIC8vIOW8t+WItuWFqOmDqOWPlua2iFxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNvbnN0ICRpdGVtID0gJGl0ZW1zWzBdXG4gICAgICAgICAgJGl0ZW0gJiYgc2V0SXRlbVNlbGVjdFN0YXR1cygkaXRlbSkgLy8g6YG45Y+W56ys5LiA5YCL6YG46aCFXG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIF8uZm9yRWFjaCgkaXRlbXMsICgkaXRlbSkgPT4ge1xuICAgICAgICAgIHNldEl0ZW1TZWxlY3RTdGF0dXMoJGl0ZW0sIGZhbHNlKVxuICAgICAgICB9KVxuICAgICAgfVxuICAgICAgY29uY2x1ZGVWYWwoKVxuICAgICAgcmV0dXJuICRzZWxmXG4gICAgfSxcbiAgICAvLyDlj5blvpfkuIvmi4npgbjllq7mjInpiJVcbiAgICBnZXRCdG46ICgpID0+IHtcbiAgICAgIHJldHVybiAkYnRuXG4gICAgfSxcbiAgICAvLyDlsIfkuIvmi4npgbjllq7mjInpiJXoqK3ngrrnhKEv5pyJ5pWIXG4gICAgZGlzYWJsZUJ0bjogKGRpc2FibGVkID0gdHJ1ZSkgPT4ge1xuICAgICAgJGJ0bi5wcm9wKCdkaXNhYmxlZCcsIGRpc2FibGVkKVxuICAgIH0sXG4gICAgLy8g6YeN572u6aCQ6Kit6YG46aCFXG4gICAgcmVzZXREZWZhdWx0OiAoKSA9PiB7XG4gICAgICAkc2VsZi51bnNlbGVjdEFsbCgpXG4gICAgICBpZiAoXy5pc051bWJlcihkZWZJbmRleCkgfHwgXy5pc0FycmF5KGRlZkluZGV4KSkge1xuICAgICAgICBpZiAoXy5pc051bWJlcihkZWZJbmRleCkpIGRlZkluZGV4ID0gW2RlZkluZGV4XVxuICAgICAgICBfLmZvckVhY2goZGVmSW5kZXgsIChpKSA9PiB7XG4gICAgICAgICAgJHNlbGYuY2xpY2tJdGVtKGkpXG4gICAgICAgIH0pXG4gICAgICAgIHJldHVyblxuICAgICAgfVxuICAgICAgaWYgKCFfLmlzRW1wdHkoZGVmVmFsKSkge1xuICAgICAgICBpZiAoIV8uaXNBcnJheShkZWZWYWwpKSBkZWZWYWwgPSBbZGVmVmFsXVxuICAgICAgICBfLmZvckVhY2goZGVmVmFsLCAodikgPT4ge1xuICAgICAgICAgICRzZWxmLmNsaWNrSXRlbShfLmluZGV4T2YodmFsdWVzLCB2KSlcbiAgICAgICAgfSlcbiAgICAgIH1cbiAgICB9LFxuICAgIC8vIOioree9rumgkOioreaomemhjFxuICAgIHNldERlZlRpdGxlOiAodGl0bGUpID0+IHtcbiAgICAgIGRlZlRpdGxlID0gdGl0bGUgPyBgWyR7dGl0bGV9XWAgOiB0aXRsZVxuICAgIH0sXG4gIH0pXG5cbiAgJHNlbGYuc2V0RGVmVGl0bGUoZGVmVGl0bGUpXG4gICRzZWxmLnJlc2V0RGVmYXVsdCgpXG5cbiAgcmV0dXJuICRzZWxmXG59XG4iLCIvLyDnuK7nn63poa/npLogdGFibGUg5Lit55qE5qyE5L2N5YWn5a65XG4kLmZuLmZvbGRDb2x1bW4gPSBmdW5jdGlvbiAoc2V0dGluZ0Fyciwge1xuICBmb2xkV2lkdGggPSA4MCwgLy8g6aCQ6Kit57iu55+t5b6M55qE5a+s5bqmXG4gIHNwcmVhZCA9IDQwLCAvLyDpu57mk4rlsZXplovnmoTlr6zluqZcbn0gPSB7fSkge1xuICBjb25zdCAkc2VsZiA9IHRoaXNcblxuICBpZiAoIUFycmF5LmlzQXJyYXkoc2V0dGluZ0FycikpIHNldHRpbmdBcnIgPSBbc2V0dGluZ0Fycl1cbiAgaWYgKF8uaXNFbXB0eShzZXR0aW5nQXJyKSkgcmV0dXJuICRzZWxmXG5cbiAgJHNlbGYuZmluZCgndGQnKS5jc3Moe1xuICAgIHdvcmRCcmVhazogJ2JyZWFrLWFsbCcsXG4gIH0pXG5cbiAgZm9yIChsZXQgc2V0dGluZyBvZiBzZXR0aW5nQXJyKSB7XG4gICAgY29uc3QgZHVyID0gMC4zXG4gICAgY29uc3QgdGRBcnIgPSBbXVxuICAgIGxldCBpc1NwcmVhZCA9IGZhbHNlXG4gICAgLy8g5q+P5YCL5qyE5L2N5ZCE5Yil55qE6Kit5a6aXG4gICAgY29uc3QgZldpZHRoID0gc2V0dGluZy5mb2xkV2lkdGggfHwgZm9sZFdpZHRoXG4gICAgY29uc3Qgc3AgPSBzZXR0aW5nLnNwcmVhZCB8fCBzcHJlYWRcbiAgICBjb25zdCBrZXkgPSBzZXR0aW5nLmtleVxuXG4gICAgY29uc3Qgc3ByZWFkV2lkdGggPSBmV2lkdGggKyBzcFxuICAgIGNvbnN0ICR0aCA9ICRzZWxmLmZpbmQoYHRoW2RhdGEta2V5PScke2tleX0nXWApLmNzcyh7XG4gICAgICBjdXJzb3I6ICdwb2ludGVyJyxcbiAgICAgIHdpZHRoOiBmV2lkdGgsXG4gICAgfSkuY2xpY2soKCkgPT4ge1xuICAgICAgaXNTcHJlYWQgPSAhaXNTcHJlYWRcbiAgICAgIGNvbnN0IHdpZHRoID0gaXNTcHJlYWQgPyBzcHJlYWRXaWR0aCA6IGZXaWR0aFxuICAgICAgY29uc3QgY3NzID0gaXNTcHJlYWQgPyB7XG4gICAgICAgIHdvcmRCcmVhazogJ2JyZWFrLWFsbCcsIHdoaXRlU3BhY2U6ICdub3JtYWwnLFxuICAgICAgfSA6IHtcbiAgICAgICAgd29yZEJyZWFrOiAna2VlcC1hbGwnLCB3aGl0ZVNwYWNlOiAnbm93cmFwJyxcbiAgICAgIH1cbiAgICAgIGdzYXAudG8oJHRoLCBkdXIsIHt3aWR0aH0pXG4gICAgICBnc2FwLnNldCh0ZEFyciwgY3NzKVxuICAgIH0pXG5cbiAgICBmb3IgKGNvbnN0IGVsZSBvZiAkc2VsZi5maW5kKGB0ZFtkYXRhLWtleT0nJHtrZXl9J11gKSkge1xuICAgICAgY29uc3QgJHRkID0gJChlbGUpXG4gICAgICB0ZEFyci5wdXNoKCR0ZClcbiAgICAgICR0ZC5jc3Moe1xuICAgICAgICB3b3JkQnJlYWs6ICdrZWVwLWFsbCcsXG4gICAgICAgIHdoaXRlU3BhY2U6ICdub3dyYXAnLFxuICAgICAgICB0ZXh0T3ZlcmZsb3c6ICdlbGxpcHNpcycsXG4gICAgICAgIG92ZXJmbG93OiAnaGlkZGVuJyxcbiAgICAgIH0pXG4gICAgfVxuICB9XG5cbiAgJHNlbGYuY3NzKHtcbiAgICB0YWJsZUxheW91dDogJ2ZpeGVkJyxcbiAgfSlcblxuICByZXR1cm4gJHNlbGZcbn0iLCIvLyDmj5DkvpvkuIDkupvmlrnkvr/lrqLoo73ljJbnmoQgdGV4dCDoqK3lrppcbiQuZm4uZnVuY3Rpb25UZXh0ID0gZnVuY3Rpb24gKHtlbnRlckNifSkge1xuICBjb25zdCAkc2VsZiA9IHRoaXNcblxuICAkc2VsZi5mb2N1cyhmdW5jdGlvbiAoKSB7XG4gICAgJCh0aGlzKS5zZWxlY3QoKVxuICB9KVxuICAkc2VsZi5rZXl1cChmdW5jdGlvbiAoZSkge1xuICAgIGlmIChlLmtleUNvZGUgIT09IDEzKSByZXR1cm5cbiAgICBlbnRlckNiICYmIGVudGVyQ2IoKVxuICB9KVxuXG4gIHJldHVybiAkc2VsZlxufSIsIi8vIOWbnuS4iuWxpOmAo+e1kFxuJC5mbi5nb0JhY2tMaW5rID0gZnVuY3Rpb24gKHtcbiAgdGl0bGUgPSAn4oaQ5Zue5LiK5bGkJyxcbiAgc3R5bGUgPSAncHJpbWFyeScsXG4gIGNiLFxufSA9IHt9KSB7XG4gIGNvbnN0ICRzZWxmID0gdGhpc1xuXG4gICRzZWxmLmh0bWwodGl0bGUpLmNzcyh7XG4gICAgZGlzcGxheTogJ2lubGluZS1ibG9jaycsIGZsb2F0OiAncmlnaHQnLCBmb250U2l6ZTogJzEuMWVtJywgbWFyZ2luQm90dG9tOiAxMixcbiAgfSkubGlua1N0eWxlKHN0eWxlKS5jbGljaygoKSA9PiB7XG4gICAgY2IoKVxuICB9KVxuICByZXR1cm4gJHNlbGZcbn0iLCIvLyDlrqLoo73ljJYgaW5wdXQg6Ly45YWl5qyE5L2NXG4kLmZuLmlucHV0ID0gZnVuY3Rpb24gKHBhcmFtID0ge30pIHtcbiAgY29uc3QgJHNlbGYgPSB0aGlzXG4gIGNvbnN0IHt0aXRsZSA9ICcnLCB0eXBlID0gJ3RleHQnLCB2YWwgPSAnJywgZW1wdHlWYWwgPSAnJywgd2lkdGggPSAnYXV0bycsIHBsYWNlaG9sZGVyLCBzaXplfSA9IHBhcmFtXG5cbiAgY29uc3QgJHRpdGxlID0gJChgPHNwYW4+JHt0aXRsZX08L3NwYW4+YClcbiAgY29uc3QgJGlucHV0ID0gJChgPGlucHV0IHR5cGU9XCIke3R5cGV9XCIgY2xhc3M9XCJmb3JtLWNvbnRyb2xcIiB2YWx1ZT1cIiR7dmFsfVwiPmApLmNzcyh7XG4gICAgd2lkdGgsXG4gIH0pLm9uKCdibHVyJywgKCkgPT4ge1xuICAgIGNvbnN0IHZhbCA9IF8udHJpbSgkaW5wdXQudmFsKCkpXG4gICAgaWYgKHZhbCkgcmV0dXJuXG4gICAgJGlucHV0LnZhbChlbXB0eVZhbClcbiAgfSlcbiAgaWYgKHBsYWNlaG9sZGVyKSAkaW5wdXQuYXR0cigncGxhY2Vob2xkZXInLCBwbGFjZWhvbGRlcilcbiAgaWYgKHNpemUpICRpbnB1dC5hdHRyKCdzaXplJywgc2l6ZSlcblxuICAkc2VsZi5pbnB1dEdyb3VwKFskaW5wdXRdLCB7cHJlcGVuZEl0ZW1zOiBbJHRpdGxlXX0pXG5cbiAgXy5hc3NpZ24oJHNlbGYsIHtcbiAgICAvLyDoqK3nva7miJblj5blvpflgLxcbiAgICB2YWw6ICguLi5hcmdzKSA9PiB7XG4gICAgICByZXR1cm4gJGlucHV0LnZhbC5hcHBseSgkaW5wdXQsIGFyZ3MpXG4gICAgfSxcbiAgICAvLyDoqK3nva4gZGlzYWJsZWQgcHJvcGVydHlcbiAgICBkaXNhYmxlZDogKGRpc2FibGVkKSA9PiB7XG4gICAgICBpZiAoXy5pc05pbChkaXNhYmxlZCkpIHJldHVybiAkaW5wdXQucHJvcCgnZGlzYWJsZWQnKVxuICAgICAgJGlucHV0LnByb3AoJ2Rpc2FibGVkJywgZGlzYWJsZWQpXG4gICAgfSxcbiAgICAvLyDlm57lvqnpoJDoqK3lgLxcbiAgICByZXNldERlZlZhbDogKCkgPT4ge1xuICAgICAgJGlucHV0LnZhbCh2YWwpXG4gICAgfSxcbiAgfSlcblxuICByZXR1cm4gJHNlbGZcbn0iLCIvLyDlv6vpgJ/lu7rmp4sgYm9vdHN0cmFwIGlucHV0LWdyb3VwXG4kLmZuLmlucHV0R3JvdXAgPSBmdW5jdGlvbiAoaXRlbXMsIHtwcmVwZW5kSXRlbXMgPSBbXSwgYXBwZW5kSXRlbXMgPSBbXX0gPSB7fSkge1xuICBjb25zdCAkc2VsZiA9IHRoaXNcblxuICBjb25zdCAkaW5wdXRHcm91cCA9ICQoJzxkaXYgY2xhc3M9XCJpbnB1dC1ncm91cFwiPicpXG4gIGNvbnN0IHNldENsYXNzVG9TcGFuID0gKGl0ZW1zKSA9PiB7XG4gICAgZm9yIChjb25zdCBpdGVtIG9mIGl0ZW1zKSB7XG4gICAgICBpZiAoaXRlbS5wcm9wKCd0YWdOYW1lJykgIT09ICdTUEFOJykgY29udGludWVcbiAgICAgIGl0ZW0uYWRkQ2xhc3MoJ2lucHV0LWdyb3VwLXRleHQnKVxuICAgIH1cbiAgfVxuXG4gIGlmICghXy5pc0VtcHR5KHByZXBlbmRJdGVtcykpIHtcbiAgICBjb25zdCAkcHJlcGVuZCA9ICQoJzxkaXYgY2xhc3M9XCJpbnB1dC1ncm91cC1wcmVwZW5kXCI+JylcbiAgICAkcHJlcGVuZC5hcHBlbmQocHJlcGVuZEl0ZW1zKVxuICAgICRpbnB1dEdyb3VwLmFwcGVuZCgkcHJlcGVuZClcbiAgICBzZXRDbGFzc1RvU3BhbihwcmVwZW5kSXRlbXMpXG4gIH1cblxuICAkaW5wdXRHcm91cC5hcHBlbmQoaXRlbXMpXG4gIHNldENsYXNzVG9TcGFuKGl0ZW1zKVxuXG4gIGlmICghXy5pc0VtcHR5KGFwcGVuZEl0ZW1zKSkge1xuICAgIGNvbnN0ICRhcHBlbmQgPSAkKCc8ZGl2IGNsYXNzPVwiaW5wdXQtZ3JvdXAtYXBwZW5kXCI+JylcbiAgICAkYXBwZW5kLmFwcGVuZChhcHBlbmRJdGVtcylcbiAgICAkaW5wdXRHcm91cC5hcHBlbmQoJGFwcGVuZClcbiAgICBzZXRDbGFzc1RvU3BhbihhcHBlbmRJdGVtcylcbiAgfVxuXG4gICRzZWxmLmNzcyh7XG4gICAgZGlzcGxheTogJ2lubGluZS1ibG9jaycsXG4gICAgdmVydGljYWxBbGlnbjogJ21pZGRsZScsXG4gIH0pLmFwcGVuZCgkaW5wdXRHcm91cClcblxuICByZXR1cm4gJHNlbGZcbn0iLCIvLyDmmK/lkKblt7LliKrpmaTkuIvmi4npgbjllq5cbiQuZm4uaXNEaXNhYmxlZE9wdGlvbiA9IGZ1bmN0aW9uIChvcHQgPSB7fSkge1xuICBjb25zdCAkc2VsZiA9IHRoaXNcblxuICAkc2VsZi5ib29sZWFuT3B0aW9uKF8uYXNzaWduKHtkZWZUaXRsZTogJ+W3suWIqumZpCd9LCBvcHQpKVxuXG4gIHJldHVybiAkc2VsZlxufSIsIi8vIOWuouijveWMluavj+mggeethuaVuOi8uOWFpeagvFxuJC5mbi5saW1pdElucHV0ID0gZnVuY3Rpb24gKCkge1xuICBjb25zdCAkc2VsZiA9IHRoaXNcbiAgY29uc3QgZGVmVmFsID0gNTBcbiAgY29uc3QgbWluID0gMVxuICBjb25zdCBtYXggPSAyMDBcblxuICAkc2VsZi5pbnB1dCh7dGl0bGU6IGDmr4/poIHnrYbmlbhgLCB2YWw6IGRlZlZhbCwgc2l6ZTogMn0pXG4gICRzZWxmLmtleXVwKCgpID0+IHtcbiAgICBsZXQgdmFsID0gTnVtYmVyKCRzZWxmLnZhbCgpKVxuXG4gICAgaWYgKF8uaXNOYU4odmFsKSkge1xuICAgICAgdmFsID0gZGVmVmFsXG4gICAgfSBlbHNlIGlmICh2YWwgPCBtaW4pIHtcbiAgICAgIHZhbCA9IG1pblxuICAgIH0gZWxzZSBpZiAodmFsID4gbWF4KSB7XG4gICAgICB2YWwgPSBtYXhcbiAgICB9XG5cbiAgICAkc2VsZi52YWwodmFsKVxuICB9KVxuXG4gIHJldHVybiAkc2VsZlxufSIsIi8vIOWwh+WFp+WuueaUueeCuumAo+e1kOaoo+W8j1xuJC5mbi5saW5rU3R5bGUgPSBmdW5jdGlvbiAoc3R5bGUgPSAnaW5mbycpIHtcbiAgY29uc3QgJHNlbGYgPSB0aGlzXG5cbiAgJHNlbGYuYWRkQ2xhc3MoYHRleHQtJHtzdHlsZX1gKS5jc3Moe1xuICAgIGN1cnNvcjogJ3BvaW50ZXInLFxuICAgIHRleHREZWNvcmF0aW9uOiAndW5kZXJsaW5lJyxcbiAgICB0ZXh0VW5kZXJsaW5lUG9zaXRpb246ICd1bmRlcicsXG4gIH0pXG5cbiAgcmV0dXJuICRzZWxmXG59IiwiLy8gTG9hZGluZyDnlavpnaJcbiQuZm4ubG9hZGluZyA9IGZ1bmN0aW9uICgpIHtcbiAgY29uc3QgJHNlbGYgPSB0aGlzXG4gIGNvbnN0ICRsb2FkaW5nTXNnID0gJChgPGRpdj48aDEgY2xhc3M9XCJsb2FkaW5nTXNnXCI+6LOH5paZ6JmV55CG5LitLi4uPC9oMT48L2Rpdj5gKS5jc3Moe1xuICAgIHBvc2l0aW9uOiBgYWJzb2x1dGVgLFxuICAgIHRvcDogYDUwJWAsXG4gICAgbGVmdDogYDUwJWAsXG4gICAgdHJhbnNmb3JtOiBgdHJhbnNsYXRlKC01MCUsIC01MCUpYCxcbiAgfSlcbiAgY29uc3QgJGxvYWRpbmcgPSAkKGA8ZGl2PmApLmNzcyh7XG4gICAgd2lkdGg6IGAxMDAlYCxcbiAgICBoZWlnaHQ6IGAxMDAlYCxcbiAgICBvcGFjaXR5OiBgMC41YCxcbiAgICBwb3NpdGlvbjogYGFic29sdXRlYCxcbiAgICAnYmFja2dyb3VuZC1jb2xvcic6IGBibGFja2AsXG4gICAgJ3RleHQtYWxpZ24nOiBgY2VudGVyYCxcbiAgfSkuaGlkZSgpLmFwcGVuZCgkbG9hZGluZ01zZylcblxuICAkc2VsZi5wcmVwZW5kKCRsb2FkaW5nKVxuXG4gIF8uYXNzaWduKCRzZWxmLCB7XG4gICAgLy8g6aGv56S6IGxvYWRpbmcg54uA5oWLXG4gICAgc2hvd0xvYWRpbmc6ICgpID0+IHtcbiAgICAgIGNvbnN0IHpJbmRleExpc3QgPSBfLm1hcCgkc2VsZi5maW5kKGAqYCksIChlKSA9PiB7XG4gICAgICAgIGlmICgkKGUpLmNzcyhgcG9zaXRpb25gKSA9PT0gYGFic29sdXRlYCkge1xuICAgICAgICAgIHJldHVybiBwYXJzZUludCgkKGUpLmNzcyhgei1pbmRleGApKSB8fCAxXG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIDBcbiAgICAgIH0pXG4gICAgICBjb25zdCBtYXhJbmRleFogPSBfLm1heCh6SW5kZXhMaXN0KVxuICAgICAgJGxvYWRpbmcuY3NzKHtcbiAgICAgICAgJ3otaW5kZXgnOiBtYXhJbmRleFogKyAxLFxuICAgICAgfSlcblxuICAgICAgJGxvYWRpbmcuc2hvdygpXG4gICAgfSxcbiAgICAvLyDntZDmnZ8gbG9hZGluZyDni4DmhYtcbiAgICBoaWRlTG9hZGluZzogKCkgPT4ge1xuICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICRsb2FkaW5nLmZhZGVPdXQoKVxuICAgICAgfSwgMjAwKVxuICAgIH0sXG4gIH0pXG5cbiAgcmV0dXJuICRzZWxmXG59IiwiLy8gVGFiIOmhr+ekuuWKn+iDvVxuJC5mbi5uYXZUYWIgPSBmdW5jdGlvbiAoaXRlbVNldHRpbmdzID0gW10pIHtcbiAgY29uc3QgJHNlbGYgPSB0aGlzXG5cbiAgY29uc3QgJG5hdiA9ICQoYDx1bCBjbGFzcz1cIm5hdiBuYXYtdGFic1wiPmApXG4gIGNvbnN0IHRhcmdldHMgPSBbXVxuICBjb25zdCB0YWJMaW5rcyA9IFtdXG5cbiAgZm9yIChjb25zdCBpdGVtU2V0dGluZyBvZiBpdGVtU2V0dGluZ3MpIHtcbiAgICBjb25zdCB0aXRsZSA9ICFfLmlzRW1wdHkoaXRlbVNldHRpbmcudGl0bGUpID8gaXRlbVNldHRpbmcudGl0bGUgOiBgLWBcbiAgICBjb25zdCBpc0RlZiA9IGl0ZW1TZXR0aW5nLmlzRGVmXG4gICAgY29uc3Qgb25DbGljayA9IGl0ZW1TZXR0aW5nLm9uQ2xpY2tcbiAgICBsZXQgJHRhcmdldCA9IGl0ZW1TZXR0aW5nLiR0YXJnZXRcblxuICAgIGlmIChfLmlzU3RyaW5nKCR0YXJnZXQpKSAkdGFyZ2V0ID0gJCgkdGFyZ2V0KVxuICAgIGlmICghJHRhcmdldCkgdGhyb3cgbmV3IEVycm9yKGDoq4voqK3lrpogJHRhcmdldGApXG4gICAgaWYgKCR0YXJnZXQubGVuZ3RoID09PSAwKSB0aHJvdyBuZXcgRXJyb3IoYOaJvuS4jeWIsCAkdGFyZ2V0YClcblxuICAgIHRhcmdldHMucHVzaCgkdGFyZ2V0KVxuXG4gICAgY29uc3QgJHRhYkxpbmsgPSAkKGA8YSBjbGFzcz1cIm5hdi1saW5rXCIgc3R5bGU9XCJjdXJzb3I6IHBvaW50ZXI7XCI+JHt0aXRsZX08L2E+YClcbiAgICB0YWJMaW5rcy5wdXNoKCR0YWJMaW5rKVxuXG4gICAgY29uc3QgJHRhYiA9ICQoYDxsaSBjbGFzcz1cIm5hdi1pdGVtXCI+PC9saT5gKS5jbGljaygoKSA9PiB7XG4gICAgICBfLmZvckVhY2godGFiTGlua3MsICgkbGluaykgPT4ge1xuICAgICAgICAkbGluay5yZW1vdmVDbGFzcyhgYWN0aXZlYCkuYWRkQ2xhc3MoYHRleHQtcHJpbWFyeWApXG4gICAgICB9KVxuICAgICAgJHRhYkxpbmsucmVtb3ZlQ2xhc3MoYHRleHQtcHJpbWFyeWApLmFkZENsYXNzKGBhY3RpdmVgKVxuXG4gICAgICBfLmZvckVhY2godGFyZ2V0cywgKCR0KSA9PiB7XG4gICAgICAgICR0LmhpZGUoKVxuICAgICAgfSlcbiAgICAgICR0YXJnZXQuZmFkZUluKClcbiAgICAgIG9uQ2xpY2sgJiYgb25DbGljaygpXG4gICAgfSlcblxuICAgICRuYXYuYXBwZW5kKCR0YWIpXG4gICAgJHRhYi5hcHBlbmQoJHRhYkxpbmspXG5cbiAgICBpZiAoaXNEZWYpIHtcbiAgICAgICR0YWJMaW5rLmFkZENsYXNzKGBhY3RpdmVgKVxuICAgIH0gZWxzZSB7XG4gICAgICAkdGFiTGluay5hZGRDbGFzcyhgdGV4dC1wcmltYXJ5YClcbiAgICAgICR0YXJnZXQuaGlkZSgpXG4gICAgfVxuICB9XG5cbiAgJHNlbGYuYXBwZW5kKCRuYXYpXG5cbiAgcmV0dXJuICRzZWxmXG59IiwiLy8g5o+Q6YaS5Y2A5aGKXG4kLmZuLm5vdGljZUFyZWEgPSBmdW5jdGlvbiAocGFyYW0pIHtcbiAgY29uc3QgJHNlbGYgPSB0aGlzXG4gIGNvbnN0IHtub3RpY2VBcnIgPSBbXSwgdHlwZSA9ICd3YXJuaW5nJ30gPSBwYXJhbVxuICBjb25zdCBwb2ludGVyTXNnMSA9ICcmbmJzcDsmbmJzcDvihpDpu57mk4rlsZXplosnXG4gIGNvbnN0IHBvaW50ZXJNc2cyID0gJyZuYnNwO+KGkCZuYnNwO+m7nuaTiuWxlemWiydcbiAgY29uc3QgbXNnU2l6ZSA9IF8uc2l6ZShub3RpY2VBcnIpXG4gIGxldCB0b2dnbGUgPSBmYWxzZVxuICBsZXQgcG9pbnRlclRvZ2dsZSA9IGZhbHNlXG5cbiAgaWYgKF8uaXNFbXB0eShub3RpY2VBcnIpKSByZXR1cm4gJHNlbGZcblxuICBjb25zdCBmaXJzdE1zZyA9IG5vdGljZUFyci5zaGlmdCgpXG5cbiAgY29uc3QgJHRpdGxlID0gJCgnPGRpdi8+JykuYWRkQ2xhc3MoYGJnLSR7dHlwZX1gKS5jc3Moe3BhZGRpbmc6IDN9KVxuICBjb25zdCAkc2lnbiA9ICQoJzxzcGFuPuKWszwvc3Bhbj4nKVxuICBjb25zdCAkcG9pbnRlciA9ICQoJzxzcGFuLz4nKS5odG1sKHBvaW50ZXJNc2cxKVxuICBjb25zdCAkZmlyc3RNc2cgPSAkKCc8ZGl2Lz4nKS5odG1sKGZpcnN0TXNnKS5jc3Moe3BhZGRpbmc6IDMsIHBhZGRpbmdCb3R0b206IDB9KVxuICBjb25zdCAkY29udGVudCA9ICQoJzxkaXYvPicpLmNzcyh7ZGlzcGxheTogJ25vbmUnLCBwYWRkaW5nOiAzLCBwYWRkaW5nVG9wOiAwfSlcbiAgY29uc3Qgc2V0TXNnID0gKG1zZywgcGFkZGluZ1RpbWVzID0gMCkgPT4ge1xuICAgIGlmIChfLmlzQXJyYXkobXNnKSkge1xuICAgICAgcGFkZGluZ1RpbWVzICs9IDJcbiAgICAgIF8uZm9yRWFjaChtc2csIChtKSA9PiB7XG4gICAgICAgIHNldE1zZyhtLCBwYWRkaW5nVGltZXMpXG4gICAgICB9KVxuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgY29uc3QgJG1zZyA9ICQoJzxkaXYvPicpXG4gICAgaWYgKCFtc2cpICRtc2cuY3NzKHtoZWlnaHQ6IDZ9KVxuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwYWRkaW5nVGltZXM7IGkrKykge1xuICAgICAgbXNnID0gYCZuYnNwOyR7bXNnfWBcbiAgICB9XG4gICAgJG1zZy5odG1sKG1zZylcbiAgICAkY29udGVudC5hcHBlbmQoJG1zZylcbiAgfVxuXG4gIGNvbnN0ICRmcmFtZSA9ICQoJzxkaXYvPicpLmNzcyh7XG4gICAgYm9yZGVyOiAnMnB4IHNvbGlkJyxcbiAgICBtYXJnaW5Cb3R0b206IDI0LFxuICB9KVxuICAkdGl0bGUuYXBwZW5kKFskc2lnbiwgJyDosrzlv4Ppq5TphpInXSlcbiAgJGZyYW1lLmFwcGVuZChbJHRpdGxlLCAkZmlyc3RNc2csICRjb250ZW50XSlcblxuICBfLmZvckVhY2gobm90aWNlQXJyLCAobSkgPT4ge1xuICAgIHNldE1zZyhtKVxuICB9KVxuXG4gICRzZWxmLmFwcGVuZCgkZnJhbWUpXG5cbiAgaWYgKG1zZ1NpemUgPiAxKSB7XG4gICAgJHRpdGxlLmFwcGVuZCgkcG9pbnRlcikuY3NzKHtjdXJzb3I6ICdwb2ludGVyJ30pLmNsaWNrKCgpID0+IHtcbiAgICAgIGlmICghdG9nZ2xlKSAkc2lnbi5odG1sKCfilr0nKVxuICAgICAgZWxzZSAkc2lnbi5odG1sKCfilrMnKVxuICAgICAgJHBvaW50ZXIuaGlkZSgpXG4gICAgICB0b2dnbGUgPSAhdG9nZ2xlXG4gICAgICAkY29udGVudC5zbGlkZVRvZ2dsZSgyMDApXG4gICAgfSlcbiAgICBzZXRJbnRlcnZhbCgoKSA9PiB7XG4gICAgICAkcG9pbnRlci5odG1sKHBvaW50ZXJUb2dnbGUgPyBwb2ludGVyTXNnMSA6IHBvaW50ZXJNc2cyKVxuICAgICAgcG9pbnRlclRvZ2dsZSA9ICFwb2ludGVyVG9nZ2xlXG4gICAgfSwgOTAwKVxuICB9XG5cbiAgcmV0dXJuICRzZWxmXG59XG4iLCIvLyDpoIHpnaLlhaflrrlcbiQuZm4ucGFnZUNvbnRlbnQgPSBmdW5jdGlvbiAoKSB7XG4gIGNvbnN0ICRzZWxmID0gdGhpc1xuICBjb25zdCB0bCA9IGdzYXAudGltZWxpbmUoKVxuICBjb25zdCBlcnJvciA9ICgpID0+IHtcbiAgICAkc2VsZi5odG1sKGA8aDEgY2xhc3M9XCJ0ZXh0LWNlbnRlclwiPueEoeazleiugOWPlumggemdojwvaDE+YClcbiAgfVxuXG4gICRzZWxmLmh0bWwoYDxoMSBjbGFzcz1cInRleHQtY2VudGVyXCI+6KuL6YG45pOH5bem6YKK6YG45ZauPC9oMT5gKVxuXG4gICRzZWxmLnNob3dQYWdlID0gKHVybCwge2JlZkxvYWQsIGFmdExvYWR9ID0ge30pID0+IHtcbiAgICBiZWZMb2FkICYmIGJlZkxvYWQoKVxuICAgICQuZ2xvYmFsLmFqKHtcbiAgICAgIHVybCxcbiAgICAgIG1ldGhvZDogJ0dFVCcsXG4gICAgICBlcnI6IGVycm9yLFxuICAgICAgcmF3OiAocmVzdWx0KSA9PiB7XG4gICAgICAgIHRsLnRvKCRzZWxmLCAwLjIsIHtcbiAgICAgICAgICB5OiAtMzAsIG9wYWNpdHk6IDAsIG9uQ29tcGxldGU6ICgpID0+IHtcbiAgICAgICAgICAgICRzZWxmLmh0bWwocmVzdWx0KVxuICAgICAgICAgICAgYWZ0TG9hZCAmJiBhZnRMb2FkKClcbiAgICAgICAgICB9LFxuICAgICAgICB9KS50bygkc2VsZiwgMC4yLCB7ZWFzZTogZ3NhcC5wYXJzZUVhc2UoJ0JhY2snKS5lYXNlT3V0LmNvbmZpZygzKSwgeTogMCwgb3BhY2l0eTogMSwgZGVsYXk6IDAuMn0pXG4gICAgICB9LFxuICAgIH0pXG4gICAgcmV0dXJuICRzZWxmXG4gIH1cblxuICByZXR1cm4gJHNlbGZcbn0iLCIvLyDpoIHpnaLmqJnpoK1cbiQuZm4ucGFnZUhlYWRlciA9IGZ1bmN0aW9uICgpIHtcbiAgY29uc3QgJHNlbGYgPSB0aGlzXG5cbiAgJHNlbGYuaHRtbCgnJykuY3NzKHtcbiAgICBwb3NpdGlvbjogJ3JlbGF0aXZlJyxcbiAgfSkuYWRkQ2xhc3MoJ2JnLXByaW1hcnknKVxuXG4gIGNvbnN0IGluZGV4WiA9IDFcblxuICBjb25zdCAkaGVhZGVyUmlnaHRGcmFtZSA9ICgoKSA9PiB7XG4gICAgY29uc3QgJHJpZ2h0RnJhbWUgPSAkKCc8c3Bhbj4nKS5jc3Moe1xuICAgICAgJ3otaW5kZXgnOiBpbmRleFogKyAxLFxuICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgICB0b3A6IDI1LFxuICAgICAgcmlnaHQ6IDEwLFxuICAgIH0pXG4gICAgY29uc3QgJGFjY291bnRPcGVyYXRvciA9ICQoJzxzcGFuPicpIC8vIOaUvue9ruW4s+iZn+izh+ioiuWPiuaTjeS9nFxuICAgIGNvbnN0ICRib290c3RyYXBUaGVtZSA9ICQoJzxzcGFuPicpLmJvb3RzdHJhcFRoZW1lKCkgLy8gdGhlbWUg5LiL5ouJ6YG45ZauXG4gICAgJHJpZ2h0RnJhbWUuYXBwZW5kKFskYWNjb3VudE9wZXJhdG9yLCAkYm9vdHN0cmFwVGhlbWVdKVxuICAgICRyaWdodEZyYW1lLiRhY2NvdW50T3BlcmF0b3IgPSAkYWNjb3VudE9wZXJhdG9yXG4gICAgcmV0dXJuICRyaWdodEZyYW1lXG4gIH0pKClcbiAgJHNlbGYuYXBwZW5kKCRoZWFkZXJSaWdodEZyYW1lKVxuXG4gIF8uYXNzaWduKCRzZWxmLCB7XG4gICAgLy8g6Kit572u6aCB6Z2i5qiZ6aGMXG4gICAgc2V0VGl0bGU6ICh0aXRsZSkgPT4ge1xuICAgICAgY29uc3QgdGwgPSBnc2FwLnRpbWVsaW5lKHtyZXBlYXQ6IC0xfSlcbiAgICAgIGNvbnN0ICR0aXRsZXMgPSBfLm1hcCh0aXRsZS5zcGxpdCgnJyksICh0KSA9PiAkKGA8ZGl2PiR7dH08L2Rpdj5gKS5jc3Moe1xuICAgICAgICBkaXNwbGF5OiAnaW5saW5lLWJsb2NrJyxcbiAgICAgIH0pKVxuXG4gICAgICBjb25zdCAkaDEgPSAkKGA8aDEgY2xhc3M9XCJ0ZXh0LXdoaXRlXCIgaWQ9XCJoMVwiPjwvaDE+YCkuY3NzKHtcbiAgICAgICAgJ3otaW5kZXgnOiBpbmRleFosXG4gICAgICAgICdtYXJnaW4nOiAnYXV0bycsXG4gICAgICAgICd0ZXh0LWFsaWduJzogJ2NlbnRlcicsXG4gICAgICB9KS5hcHBlbmQoJHRpdGxlcylcblxuICAgICAgJHNlbGYuZmluZCgnI2gxJykucmVtb3ZlKClcbiAgICAgICRzZWxmLmFwcGVuZCgkaDEpXG5cbiAgICAgIGNvbnN0IGR1cmF0aW9uID0gMC41XG4gICAgICBjb25zdCBzdGFnZ2VyID0gZHVyYXRpb24gKiAwLjVcbiAgICAgIHRsLmZyb20oJHRpdGxlcywge1xuICAgICAgICBkdXJhdGlvbiwgZWFzZTogZ3NhcC5wYXJzZUVhc2UoJ0JhY2snKS5lYXNlT3V0LmNvbmZpZygxKSwgb3BhY2l0eTogMCwgc2NhbGU6IDIsIHg6IDMwMCxcbiAgICAgIH0pLnRvKCR0aXRsZXMsIHtkdXJhdGlvbiwgb3BhY2l0eTogMCwgeDogLTMwMCwgZGVsYXk6IDYsIHN0YWdnZXJ9KVxuICAgIH0sXG4gICAgLy8g6Kit572u5biz6Jmf5o6n5Yi26aCFXG4gICAgc2V0QWNjb3VudE9wZXJhdG9yOiAoJCRhY2NvdW50VXNlciwgcGFnZVN1YmplY3QpID0+IHtcbiAgICAgICRoZWFkZXJSaWdodEZyYW1lLiRhY2NvdW50T3BlcmF0b3IuYWNjb3VudE9wZXJhdG9yKCQkYWNjb3VudFVzZXIsIHBhZ2VTdWJqZWN0KVxuICAgIH0sXG4gIH0pXG5cbiAgcmV0dXJuICRzZWxmXG59XG4iLCIvLyDpoIHpnaLlt6bpgorpgbjllq5cbiQuZm4ucGFnZU1lbnUgPSBmdW5jdGlvbiAoX3BhZ2VTdWJqZWN0LCBtZW51R3JvdXBzKSB7XG4gIGNvbnN0ICRzZWxmID0gdGhpc1xuICBjb25zdCBhbGxNZW51VGl0bGVzID0gW11cbiAgY29uc3QgYWxsTWVudUNhdGVnb3JpZXMgPSBbXVxuICBjb25zdCBhbGxNZW51SXRlbXMgPSBbXVxuXG4gICRzZWxmLmhpZGUoKS5odG1sKCcnKVxuXG4gIC8vIOW7uueriyBoZWFkZXIg6KOh6Z2i55qE5oyJ6YiVXG4gIGNvbnN0IGNyZWF0ZUhlYWRlckJ0biA9IChodG1sLCB0eXBlID0gJ3ByaW1hcnknKSA9PiB7XG4gICAgcmV0dXJuICQoYDxkaXYgY2xhc3M9XCJidG4tb3V0bGluZS0ke3R5cGV9XCI+YCkuY3NzKHtcbiAgICAgIGRpc3BsYXk6ICdpbmxpbmUtYmxvY2snLFxuICAgICAgd2lkdGg6ICc1MCUnLFxuICAgICAgcGFkZGluZzogNSxcbiAgICAgIHRleHRBbGlnbjogJ2NlbnRlcicsXG4gICAgICBjdXJzb3I6ICdwb2ludGVyJyxcbiAgICAgIGZpbHRlcjogJ2Ryb3Atc2hhZG93KDVweCA1cHggMnB4IHJnYmEoMCwgMCwgMCwgMC4yKSknLFxuICAgIH0pLmh0bWwoaHRtbClcbiAgfVxuICAvLyDlu7rnq4vpgbjllq7nmoQgaGVhZGVyXG4gIGNvbnN0IGNyZWF0ZU1lbnVIZWFkZXIgPSAoKSA9PiB7XG4gICAgY29uc3QgJG1lbnVIZWFkZXIgPSAkKCc8ZGl2IGNsYXNzPVwibWVudS1oZWFkZXJcIj48L2Rpdj4nKS5jc3Moe3BhZGRpbmc6IDB9KVxuICAgIGNvbnN0ICRleHRlbmRCdG4gPSBjcmVhdGVIZWFkZXJCdG4oJ+WxlemWiycpLmNsaWNrKCgpID0+IHtcbiAgICAgICRzZWxmLmV4dGVuZENhdGVnb3J5KClcbiAgICB9KVxuICAgIGNvbnN0ICRjb2xsYXBzZUJ0biA9IGNyZWF0ZUhlYWRlckJ0bign57iu5ZCIJywgJ3NlY29uZGFyeScpLmNsaWNrKCgpID0+IHtcbiAgICAgICRzZWxmLmNvbGxhcHNlQ2F0ZWdvcnkoKVxuICAgIH0pXG4gICAgJG1lbnVIZWFkZXIuYXBwZW5kKFskZXh0ZW5kQnRuLCAkY29sbGFwc2VCdG5dKVxuICAgIHJldHVybiAkbWVudUhlYWRlclxuICB9XG4gIC8vIOW7uueri+mBuOWWruWuueWZqFxuICBjb25zdCBjcmVhdGVNZW51UmVjZXB0YWNsZSA9ICgpID0+IHtcbiAgICByZXR1cm4gJCgnPGRpdiBjbGFzcz1cIm1lbnUtcmVjZXB0YWNsZVwiLz4nKS5jc3Moe1xuICAgICAgaGVpZ2h0OiAnMTAwJScsXG4gICAgICBvdmVyZmxvdzogJ3Njcm9sbCcsXG4gICAgICAnZmxleC1ncm93JzogMSxcbiAgICB9KVxuICB9XG4gIC8vIOW7uueri+mBuOWWrue+pOe1hOeahOaomemhjOaMiemIlVxuICBjb25zdCBjcmVhdGVNZW51Q2F0ZWdvcnlUaXRsZSA9IChjYXRlZ29yeSkgPT4ge1xuICAgIGNvbnN0ICRtZW51Q2F0ZWdvcnlUaXRsZSA9ICQoYDxhIGNsYXNzPVwibGlzdC1ncm91cC1pdGVtIGxpc3QtZ3JvdXAtaXRlbS1kYXJrXCI+JHtjYXRlZ29yeX0gLTwvYT5gKS5jc3Moe1xuICAgICAgJ2ZvbnQtd2VpZ2h0JzogJ2JvbGRlcicsXG4gICAgICBwYWRkaW5nOiAnMC4zcmVtIDEuMjVyZW0nLFxuICAgICAgY3Vyc29yOiAnY29udGV4dC1tZW51JyxcbiAgICAgICdib3JkZXItdG9wLXdpZHRoJzogMixcbiAgICAgICdib3JkZXItdG9wLWNvbG9yJzogJyNhZGI1YmQnLFxuICAgIH0pLmNsaWNrKCgpID0+IHtcbiAgICAgICRtZW51Q2F0ZWdvcnlUaXRsZS4kXyRtZW51Q2F0ZWdvcnkudG9nZ2xlQ2F0ZWdvcnkoKVxuICAgIH0pXG5cbiAgICBfLmFzc2lnbigkbWVudUNhdGVnb3J5VGl0bGUsIHtcbiAgICAgIC8vIOmrmOS6rue+pOe1hOaomemhjFxuICAgICAgaGlnaGxpZ2h0OiAoKSA9PiB7XG4gICAgICAgIF8uZm9yRWFjaChhbGxNZW51VGl0bGVzLCAoJHRpdGxlKSA9PiB7XG4gICAgICAgICAgY29uc3QgaXNTYW1lVGl0bGUgPSAkdGl0bGUgPT09ICRtZW51Q2F0ZWdvcnlUaXRsZVxuICAgICAgICAgIGlmIChpc1NhbWVUaXRsZSkge1xuICAgICAgICAgICAgJHRpdGxlLnJlbW92ZUNsYXNzKCdsaXN0LWdyb3VwLWl0ZW0tZGFyaycpXG4gICAgICAgICAgICAkdGl0bGUuYWRkQ2xhc3MoJ2xpc3QtZ3JvdXAtaXRlbS1zZWNvbmRhcnknKVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAkdGl0bGUucmVtb3ZlQ2xhc3MoJ2xpc3QtZ3JvdXAtaXRlbS1zZWNvbmRhcnknKVxuICAgICAgICAgICAgJHRpdGxlLmFkZENsYXNzKCdsaXN0LWdyb3VwLWl0ZW0tZGFyaycpXG4gICAgICAgICAgfVxuICAgICAgICB9KVxuICAgICAgfSxcbiAgICAgIC8vIOmhr+ekuuaomemhjOeCuiArXG4gICAgICBzaG93UGx1czogKCkgPT4ge1xuICAgICAgICAkbWVudUNhdGVnb3J5VGl0bGUuaHRtbChgJHtjYXRlZ29yeX0gK2ApXG4gICAgICB9LFxuICAgICAgLy8g6aGv56S65qiZ6aGM54K6IC1cbiAgICAgIHNob3dNaW51czogKCkgPT4ge1xuICAgICAgICAkbWVudUNhdGVnb3J5VGl0bGUuaHRtbChgJHtjYXRlZ29yeX0gLWApXG4gICAgICB9LFxuICAgIH0pXG5cbiAgICBhbGxNZW51VGl0bGVzLnB1c2goJG1lbnVDYXRlZ29yeVRpdGxlKVxuICAgIHJldHVybiAkbWVudUNhdGVnb3J5VGl0bGVcbiAgfVxuICAvLyDlu7rnq4vpgbjllq7liIbpoZ7nvqTntYRcbiAgY29uc3QgY3JlYXRlTWVudUNhdGVnb3J5ID0gKGNhdGVnb3J5KSA9PiB7XG4gICAgY29uc3QgJG1lbnVDYXRlZ29yeSA9ICQoJzxkaXYgY2xhc3M9XCJsaXN0LWdyb3VwXCIvPicpLmNzcyh7XG4gICAgICBvdmVyZmxvdzogJ2hpZGRlbicsXG4gICAgfSlcbiAgICBjb25zdCB0bCA9IGdzYXAudGltZWxpbmUoe3BhdXNlZDogdHJ1ZX0pXG5cbiAgICB0bC50bygkbWVudUNhdGVnb3J5LCAwLjIsIHtoZWlnaHQ6IDB9KVxuXG4gICAgXy5hc3NpZ24oJG1lbnVDYXRlZ29yeSwge1xuICAgICAgLy8g5bGV6ZaL576k57WEXG4gICAgICBleHRlbmRDYXRlZ29yeTogKCkgPT4ge1xuICAgICAgICBpZiAoJG1lbnVDYXRlZ29yeS4kX2lzT3BlbikgcmV0dXJuXG4gICAgICAgIHRsLnJldmVyc2UoKVxuICAgICAgICAkbWVudUNhdGVnb3J5LiRfaXNPcGVuID0gdHJ1ZVxuICAgICAgICAkbWVudUNhdGVnb3J5LiRfJG1lbnVDYXRlZ29yeVRpdGxlLnNob3dNaW51cygpXG4gICAgICB9LFxuICAgICAgLy8g57iu5ZCI576k57WEXG4gICAgICBjb2xsYXBzZUNhdGVnb3J5OiAoKSA9PiB7XG4gICAgICAgIGlmICghJG1lbnVDYXRlZ29yeS4kX2lzT3BlbikgcmV0dXJuXG4gICAgICAgIHRsLnBsYXkoKVxuICAgICAgICAkbWVudUNhdGVnb3J5LiRfaXNPcGVuID0gZmFsc2VcbiAgICAgICAgJG1lbnVDYXRlZ29yeS4kXyRtZW51Q2F0ZWdvcnlUaXRsZS5zaG93UGx1cygpXG4gICAgICB9LFxuICAgICAgLy8g5YiH5o+b576k57WE5bGV6ZaL54uA5oWLXG4gICAgICB0b2dnbGVDYXRlZ29yeTogKCkgPT4ge1xuICAgICAgICBpZiAoJG1lbnVDYXRlZ29yeS4kX2lzT3BlbikgcmV0dXJuICRtZW51Q2F0ZWdvcnkuY29sbGFwc2VDYXRlZ29yeSgpXG4gICAgICAgICRtZW51Q2F0ZWdvcnkuZXh0ZW5kQ2F0ZWdvcnkoKVxuICAgICAgfSxcbiAgICAgICRfaXNPcGVuOiB0cnVlLFxuICAgIH0pXG5cbiAgICBhbGxNZW51Q2F0ZWdvcmllcy5wdXNoKCRtZW51Q2F0ZWdvcnkpXG4gICAgcmV0dXJuICRtZW51Q2F0ZWdvcnlcbiAgfVxuICAvLyDlu7rnq4vpgbjllq7mjInpiJVcbiAgY29uc3QgY3JlYXRlTWVudUl0ZW0gPSAodGl0bGUsIF9wYWdlTmFtZSwgb3B0ID0ge30pID0+IHtcbiAgICBjb25zdCB7YWJhbmRvbn0gPSBvcHRcbiAgICBjb25zdCAkbWVudUl0ZW0gPSAkKGA8ZGl2IGNsYXNzPVwibGlzdC1ncm91cC1pdGVtXCI+JHt0aXRsZX08L2Rpdj5gKS5jbGljaygoKSA9PiB7XG4gICAgICAkc2VsZi5zZXRBY3RpdmVJdGVtKF9wYWdlU3ViamVjdCwgX3BhZ2VOYW1lKVxuICAgICAgJC5nbG9iYWwuc2ltcGxlTG9hZFBhZ2UoX3BhZ2VTdWJqZWN0LCBfcGFnZU5hbWUpXG4gICAgfSkubW91c2VvdmVyKCgpID0+IHtcbiAgICAgIHRsLnBsYXkoKVxuICAgIH0pLm1vdXNlbGVhdmUoKCkgPT4ge1xuICAgICAgdGwucmV2ZXJzZSgpXG4gICAgfSkuY3NzKHtcbiAgICAgIGN1cnNvcjogJ3BvaW50ZXInLFxuICAgIH0pXG5cbiAgICBpZiAoYWJhbmRvbikge1xuICAgICAgJG1lbnVJdGVtLmNzcyh7J3RleHQtZGVjb3JhdGlvbic6ICdsaW5lLXRocm91Z2gnfSlcbiAgICB9XG5cbiAgICBjb25zdCB0bCA9IGdzYXAudGltZWxpbmUoe3BhdXNlZDogdHJ1ZX0pXG5cbiAgICB0bC50bygkbWVudUl0ZW0sIDAuMiwge1xuICAgICAgYm94U2hhZG93OiBgMHB4IDVweCAycHggMXB4IHJnYmEoMCwgMCwgMCwgMC4zKSBpbnNldGAsXG4gICAgICB0cmFuc2Zvcm1QZXJzcGVjdGl2ZTogNTAwLFxuICAgICAgdHJhbnNmb3JtT3JpZ2luOiAnbGVmdCcsXG4gICAgICByb3RhdGlvblk6IDYsXG4gICAgfSlcblxuICAgIF8uYXNzaWduKCRtZW51SXRlbSwge1xuICAgICAgLy8g6Kit572u54K66YG45Y+W54uA5oWLXG4gICAgICBzZXRBY3RpdmU6ICgpID0+IHtcbiAgICAgICAgJG1lbnVJdGVtLmFkZENsYXNzKCdhY3RpdmUnKVxuICAgICAgICAkbWVudUl0ZW0uJF8kbWVudUNhdGVnb3J5VGl0bGUuaGlnaGxpZ2h0KClcbiAgICAgIH0sXG4gICAgICAvLyDoqK3nva7ngrrmnKrpgbjlj5bni4DmhYtcbiAgICAgIHVuc2V0QWN0aXZlOiAoKSA9PiB7XG4gICAgICAgICRtZW51SXRlbS5yZW1vdmVDbGFzcygnYWN0aXZlJylcbiAgICAgIH0sXG4gICAgfSlcblxuICAgIGFsbE1lbnVJdGVtcy5wdXNoKCRtZW51SXRlbSlcbiAgICByZXR1cm4gJG1lbnVJdGVtXG4gIH1cblxuICBjb25zdCAkbWVudUhlYWRlciA9IGNyZWF0ZU1lbnVIZWFkZXIoKVxuICBjb25zdCAkbWVudVJlY2VwdGFjbGUgPSBjcmVhdGVNZW51UmVjZXB0YWNsZSgpXG5cbiAgJHNlbGYuYXBwZW5kKFskbWVudUhlYWRlciwgJG1lbnVSZWNlcHRhY2xlXSlcblxuICBfLmZvckVhY2gobWVudUdyb3VwcywgKG1lbnVHcm91cCkgPT4ge1xuICAgIGNvbnN0IHtjYXRlZ29yeSwgbWVudXN9ID0gbWVudUdyb3VwXG4gICAgY29uc3QgJG1lbnVDYXRlZ29yeSA9IGNyZWF0ZU1lbnVDYXRlZ29yeShjYXRlZ29yeSlcbiAgICBjb25zdCAkbWVudUNhdGVnb3J5VGl0bGUgPSBjcmVhdGVNZW51Q2F0ZWdvcnlUaXRsZShjYXRlZ29yeSlcblxuICAgIF8uYXNzaWduKCRtZW51Q2F0ZWdvcnksIHtcbiAgICAgICRfY2F0ZWdvcnk6IGNhdGVnb3J5LFxuICAgICAgJF8kbWVudUNhdGVnb3J5VGl0bGU6ICRtZW51Q2F0ZWdvcnlUaXRsZSxcbiAgICB9KVxuICAgIF8uYXNzaWduKCRtZW51Q2F0ZWdvcnlUaXRsZSwge1xuICAgICAgJF9jYXRlZ29yeTogY2F0ZWdvcnksXG4gICAgICAkXyRtZW51Q2F0ZWdvcnk6ICRtZW51Q2F0ZWdvcnksXG4gICAgfSlcblxuICAgICRtZW51UmVjZXB0YWNsZS5hcHBlbmQoWyRtZW51Q2F0ZWdvcnlUaXRsZSwgJG1lbnVDYXRlZ29yeV0pXG5cbiAgICBfLmZvckVhY2gobWVudXMsICh0aXRsZU9wdGlvbiwgX3BhZ2VOYW1lKSA9PiB7XG4gICAgICAvLyBOb3RlLiB0aXRsZU9wdGlvbiDlj6/og73ngrrlrZfkuLLmiJYge3RpdGxlOiAneHh4JywgYWJhbmRvbjogdHJ1ZX0g5oiWIHt0aXRsZTogJ3h4eCcsIGFiYW5kb246ICfoqIrmga8gZm9yIOW7ouajhOiqquaYjid9XG4gICAgICBsZXQgdGl0bGUgPSB0aXRsZU9wdGlvblxuICAgICAgbGV0IGFiYW5kb24gPSBmYWxzZVxuICAgICAgaWYgKF8uaXNQbGFpbk9iamVjdCh0aXRsZU9wdGlvbikpIHtcbiAgICAgICAgdGl0bGUgPSB0aXRsZU9wdGlvbi50aXRsZVxuICAgICAgICBhYmFuZG9uID0gdGl0bGVPcHRpb24uYWJhbmRvblxuICAgICAgfVxuICAgICAgaWYgKGFiYW5kb24pIHRpdGxlID0gYCR7dGl0bGV9KCR7Xy5pc1N0cmluZyhhYmFuZG9uKSA/IGFiYW5kb24gOiAn5b6F56e76ZmkJ30pYFxuICAgICAgY29uc3QgJG1lbnVJdGVtID0gY3JlYXRlTWVudUl0ZW0odGl0bGUsIF9wYWdlTmFtZSwge2FiYW5kb259KVxuICAgICAgXy5hc3NpZ24oJG1lbnVJdGVtLCB7XG4gICAgICAgICRfY2F0ZWdvcnk6IGNhdGVnb3J5LFxuICAgICAgICAkX3RpdGxlOiB0aXRsZSxcbiAgICAgICAgJF9wYWdlU3ViamVjdDogX3BhZ2VTdWJqZWN0LFxuICAgICAgICAkX3BhZ2VOYW1lOiBfcGFnZU5hbWUsXG4gICAgICAgICRfJG1lbnVDYXRlZ29yeVRpdGxlOiAkbWVudUNhdGVnb3J5VGl0bGUsXG4gICAgICAgICRfJG1lbnVDYXRlZ29yeTogJG1lbnVDYXRlZ29yeSxcbiAgICAgIH0pXG4gICAgICAkbWVudUNhdGVnb3J5LmFwcGVuZCgkbWVudUl0ZW0pXG4gICAgfSlcbiAgfSlcblxuICBjb25zdCB3aWR0aCA9IDE4MFxuICBjb25zdCBsZWZ0ID0gLTEwXG5cbiAgJHNlbGYuY3NzKHtcbiAgICB3aWR0aCxcbiAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgcG9zaXRpb246ICdmaXhlZCcsXG4gICAgb3ZlcmZsb3c6ICdoaWRkZW4nLFxuICAgIGhlaWdodDogJzg1JScsXG4gICAgZmlsdGVyOiAnZHJvcC1zaGFkb3coNXB4IDVweCAycHggcmdiYSgwLCAwLCAwLCAwLjIpKScsXG4gICAgJ3otaW5kZXgnOiAxMDAsXG4gICAgJ2ZsZXgtZmxvdyc6ICdjb2x1bW4nLFxuICAgIGxlZnQsXG4gIH0pLm1vdXNlZW50ZXIoKCkgPT4ge1xuICAgIGdzYXAudG8oJHNlbGYsIDAuMywge3g6IC1sZWZ0fSlcbiAgfSkubW91c2VsZWF2ZSgoKSA9PiB7XG4gICAgZ3NhcC50bygkc2VsZiwgMC4xLCB7eDogMH0pXG4gIH0pLmZhZGVJbigpXG5cbiAgXy5hc3NpZ24oJHNlbGYsIHtcbiAgICAvLyDoqK3nva7lt7Lpgbjlj5bpgbjllq5cbiAgICBzZXRBY3RpdmVJdGVtOiAoX3BhZ2VTdWJqZWN0LCBfcGFnZU5hbWUpID0+IHtcbiAgICAgICRzZWxmLmNvbGxhcHNlQ2F0ZWdvcnkoKSAvLyDlhYjnuK7lkIjmiYDmnInnvqTntYRcblxuICAgICAgXy5mb3JFYWNoKGFsbE1lbnVJdGVtcywgKCRpdGVtKSA9PiB7XG4gICAgICAgICRpdGVtLnVuc2V0QWN0aXZlKClcbiAgICAgICAgaWYgKCRpdGVtLiRfcGFnZVN1YmplY3QgIT09IF9wYWdlU3ViamVjdCB8fCAkaXRlbS4kX3BhZ2VOYW1lICE9PSBfcGFnZU5hbWUpIHJldHVyblxuICAgICAgICAkaXRlbS5zZXRBY3RpdmUoKVxuICAgICAgICAkaXRlbS4kXyRtZW51Q2F0ZWdvcnkuZXh0ZW5kQ2F0ZWdvcnkoKVxuICAgICAgfSlcbiAgICB9LFxuICAgIC8vIOWxlemWi+mBuOWWrue+pOe1hCwg54Sh5oyH5a6a5pmC54K65YWo6YOoXG4gICAgZXh0ZW5kQ2F0ZWdvcnk6IChjYXRlZ29yeSkgPT4ge1xuICAgICAgXy5mb3JFYWNoKGFsbE1lbnVDYXRlZ29yaWVzLCAoJGNhdGVnb3J5KSA9PiB7XG4gICAgICAgIGlmIChjYXRlZ29yeSAmJiAkY2F0ZWdvcnkuJF9jYXRlZ29yeSAhPT0gY2F0ZWdvcnkpIHJldHVyblxuICAgICAgICAkY2F0ZWdvcnkuZXh0ZW5kQ2F0ZWdvcnkoKVxuICAgICAgfSlcbiAgICB9LFxuICAgIC8vIOe4ruWQiOaMh+WumumBuOWWrue+pOe1hCwg54Sh5oyH5a6a5pmC54K65YWo6YOoXG4gICAgY29sbGFwc2VDYXRlZ29yeTogKGNhdGVnb3J5KSA9PiB7XG4gICAgICBfLmZvckVhY2goYWxsTWVudUNhdGVnb3JpZXMsICgkY2F0ZWdvcnkpID0+IHtcbiAgICAgICAgaWYgKGNhdGVnb3J5ICYmICRjYXRlZ29yeS4kX2NhdGVnb3J5ICE9PSBjYXRlZ29yeSkgcmV0dXJuXG4gICAgICAgICRjYXRlZ29yeS5jb2xsYXBzZUNhdGVnb3J5KClcbiAgICAgIH0pXG4gICAgfSxcbiAgfSlcblxuICByZXR1cm4gJHNlbGZcbn0iLCIvLyDlrqLoo73ljJYgcGx1Z2luLnBvcFdpbmRvdywg55So5Zyo6aCB6Z2i55qE6Kqq5piOXG4kLmZuLnBhZ2VUaXBzID0gZnVuY3Rpb24gKHBhcmFtKSB7XG4gIGNvbnN0ICRzZWxmID0gdGhpc1xuICBjb25zdCB7dGl0bGUgPSAnVGlwcycsIG1vZGFsU3ViSWQgPSAnJywgYnRuVHlwZSA9ICd3YXJuaW5nJywgdGlwQXJyID0gW119ID0gcGFyYW1cbiAgbGV0IHJvd051bSA9IDBcblxuICBpZiAoXy5pc0VtcHR5KHRpcEFycikpIHJldHVybiAkc2VsZi5oaWRlKClcblxuICBjb25zdCAkdGFyZ2V0Qm9keSA9ICQoYDxkaXYgY2xhc3M9XCJ0aXBzQ29udGVudFwiPmApXG4gIGNvbnN0IHJlY3Vyc2l2ZVNldEl0ZW1zID0gKGNvbnRlbnQsIHNoaWZ0Q291bnQgPSAtMSkgPT4ge1xuICAgIGlmIChfLmlzQXJyYXkoY29udGVudCkpIHtcbiAgICAgIHNoaWZ0Q291bnQgKz0gMVxuICAgICAgZm9yIChjb25zdCBzdWIgb2YgY29udGVudCkge1xuICAgICAgICByZWN1cnNpdmVTZXRJdGVtcyhzdWIsIHNoaWZ0Q291bnQpXG4gICAgICB9XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICBmb3IgKGxldCBjYXRlZ29yeSBvZiBbJ3ByaW1hcnknLCAnc2Vjb25kYXJ5JywgJ3N1Y2Nlc3MnLCAnZGFuZ2VyJywgJ3dhcm5pbmcnLCAnaW5mbyddKSB7XG4gICAgICBjb250ZW50ID0gY29udGVudC5yZXBsYWNlKG5ldyBSZWdFeHAoYDxcXC8ke2NhdGVnb3J5fT5gLCAnZycpLCAnPC9zcGFuPicpXG4gICAgICBjb250ZW50ID0gY29udGVudC5yZXBsYWNlKG5ldyBSZWdFeHAoYDwke2NhdGVnb3J5fT5gLCAnZycpLCBgPHNwYW4gY2xhc3M9XCJ0ZXh0LSR7Y2F0ZWdvcnl9XCI+YClcbiAgICB9XG5cbiAgICBjb250ZW50ID0gXy50cmltKGNvbnRlbnQpXG4gICAgaWYgKHNoaWZ0Q291bnQgPT09IDAgJiYgY29udGVudCkgcm93TnVtKysgLy8g5Zyo56ysMOWxpCwg5LiU5pyJ5YWn5a655pmC5omN57Sv6KiI6KGM6JmfXG5cbiAgICBjb25zdCBwcmVmaXggPSBzaGlmdENvdW50ID09PSAwID8gYCR7cm93TnVtfS5gIDogJy0nXG5cbiAgICAkdGFyZ2V0Qm9keS5hcHBlbmQoJChgPGRpdj4ke3ByZWZpeH0gJHtjb250ZW50IHx8ICcmbmJzcDsnfTwvZGl2PmApLmNzcyh7XG4gICAgICAnbWFyZ2luLWxlZnQnOiBgJHtzaGlmdENvdW50fWVtYCxcbiAgICB9KSlcbiAgfVxuXG4gIC8vIOioree9ruS4gOiIrOmgheebrlxuICByZWN1cnNpdmVTZXRJdGVtcyh0aXBBcnIpXG5cbiAgJHNlbGYuaHRtbCh0aXRsZSkuYWRkQ2xhc3MoYGJ0biBidG4tc20gYnRuLSR7YnRuVHlwZX1gKS5jc3Moe1xuICAgICdtYXJnaW4tbGVmdCc6IDMsICdtYXJnaW4tcmlnaHQnOiAzLCAnbWFyZ2luLWJvdHRvbSc6IDMsXG4gIH0pXG5cbiAgJHNlbGYucG9wV2luZG93KHtcbiAgICBtb2RhbElkOiBgcGFnZVRpcHNNb2RhbC0ke21vZGFsU3ViSWR9YCxcbiAgICAkdGFyZ2V0Qm9keSxcbiAgfSlcblxuICByZXR1cm4gJHNlbGZcbn1cbiIsIi8vIOWIhumggeWKn+iDvVxuJC5mbi5wYWdpbmF0aW9uID0gZnVuY3Rpb24gKHt0b3RhbCA9IDAsIGxpbWl0ID0gNTAsIGN1cnJlbnRQYWdlID0gMSwgY2J9KSB7XG4gIGNvbnN0ICRzZWxmID0gdGhpc1xuXG4gICRzZWxmLmh0bWwoYGApXG5cbiAgY29uc3QgdG9JbnQgPSAobnVtLCBkZWYgPSAwKSA9PiB7XG4gICAgbnVtID0gcGFyc2VJbnQobnVtLCAxMClcbiAgICBpZiAoXy5pc05hTihudW0pIHx8IG51bSA8IDEpIG51bSA9IGRlZlxuICAgIHJldHVybiBudW1cbiAgfVxuICBjb25zdCBpbml0ID0gKCkgPT4ge1xuICAgICR0b3RhbC5odG1sKHRvdGFsKVxuXG4gICAgY3VycmVudFBhZ2UgPSAkY3VycmVudFBhZ2UudmFsKCkgfHwgY3VycmVudFBhZ2VcbiAgICBsaW1pdCA9ICRsaW1pdC5odG1sKCkgfHwgbGltaXRcblxuICAgIHRvdGFsID0gdG9JbnQodG90YWwpXG4gICAgbGltaXQgPSB0b0ludChsaW1pdCwgNTApXG4gICAgY3VycmVudFBhZ2UgPSB0b0ludChjdXJyZW50UGFnZSwgMSlcblxuICAgIGlmIChvcmlnaW5MaW1pdCAhPT0gbGltaXQpIHtcbiAgICAgIG9yaWdpbkxpbWl0ID0gbGltaXRcbiAgICAgIGN1cnJlbnRQYWdlID0gMSAvLyDmnInmlLnpgY4gbGltaXQsIOW8t+WItuaUueeCuuesrOS4gOmggVxuICAgIH1cblxuICAgIGNvbnN0IHRvdGFsUGFnZSA9IE1hdGguY2VpbCh0b3RhbCAvIGxpbWl0KVxuICAgICR0b3RhbFBhZ2UuaHRtbCh0b3RhbFBhZ2UpXG5cbiAgICBpZiAoY3VycmVudFBhZ2UgPiB0b3RhbFBhZ2UpIGN1cnJlbnRQYWdlID0gdG90YWxQYWdlXG4gICAgaWYgKGN1cnJlbnRQYWdlIDwgMSkgY3VycmVudFBhZ2UgPSAxXG5cbiAgICAkbGltaXQuaHRtbChsaW1pdClcblxuICAgIGNvbnN0IGN1cnJlbnRQYWdlU2l6ZSA9IF8uc2l6ZShTdHJpbmcoY3VycmVudFBhZ2UpKSArIDFcbiAgICAkY3VycmVudFBhZ2UucHJvcChgc2l6ZWAsIGN1cnJlbnRQYWdlU2l6ZSkudmFsKGN1cnJlbnRQYWdlKVxuXG4gICAgaWYgKHRvdGFsUGFnZSA+IDAgJiYgY3VycmVudFBhZ2UgPiAxKSB7XG4gICAgICAkcHJlUGFnZS5hZGRDbGFzcyhgdGV4dC1wcmltYXJ5YCkuY3NzKHtjdXJzb3I6IGBwb2ludGVyYH0pLm9mZihgY2xpY2tgKS5jbGljaygoKSA9PiB7XG4gICAgICAgICRwcmVQYWdlLl9fY2xpY2tGbigpXG4gICAgICAgIGluaXQoKVxuICAgICAgICBlbWl0Q2IoKVxuICAgICAgfSlcbiAgICB9IGVsc2Uge1xuICAgICAgJHByZVBhZ2UucmVtb3ZlQ2xhc3MoYHRleHQtcHJpbWFyeWApLmNzcyh7Y3Vyc29yOiBgYXV0b2B9KS5vZmYoYGNsaWNrYClcbiAgICB9XG5cbiAgICBpZiAodG90YWxQYWdlID4gMCAmJiBjdXJyZW50UGFnZSAhPT0gdG90YWxQYWdlKSB7XG4gICAgICAkbmV4dFBhZ2UuYWRkQ2xhc3MoYHRleHQtcHJpbWFyeWApLmNzcyh7Y3Vyc29yOiBgcG9pbnRlcmB9KS5vZmYoYGNsaWNrYCkuY2xpY2soKCkgPT4ge1xuICAgICAgICAkbmV4dFBhZ2UuX19jbGlja0ZuKClcbiAgICAgICAgaW5pdCgpXG4gICAgICAgIGVtaXRDYigpXG4gICAgICB9KVxuICAgIH0gZWxzZSB7XG4gICAgICAkbmV4dFBhZ2UucmVtb3ZlQ2xhc3MoYHRleHQtcHJpbWFyeWApLmNzcyh7Y3Vyc29yOiBgYXV0b2B9KS5vZmYoYGNsaWNrYClcbiAgICB9XG4gIH1cbiAgY29uc3QgZ2V0UHJlQW5kU3VmID0gKHtwcmUsIHN1Zn0pID0+IHtcbiAgICBjb25zdCAkcHJlID0gJChgPHNwYW4+YCkuaHRtbChwcmUpLmNzcyh7XG4gICAgICAncGFkZGluZy1sZWZ0JzogMTAsXG4gICAgICAncGFkZGluZy1yaWdodCc6IDUsXG4gICAgfSlcbiAgICBjb25zdCAkc3VmID0gJChgPHNwYW4+YCkuaHRtbChzdWYpLmNzcyh7XG4gICAgICAncGFkZGluZy1sZWZ0JzogNSxcbiAgICAgICdwYWRkaW5nLXJpZ2h0JzogMTAsXG4gICAgfSkuYWRkQ2xhc3MoYGJvcmRlci1yaWdodCBib3JkZXItaW5mb2ApXG4gICAgcmV0dXJuIHskcHJlLCAkc3VmfVxuICB9XG4gIGNvbnN0IGNyZWF0ZVRleHQgPSAoe3ByZSwgc3VmfSkgPT4ge1xuICAgIGNvbnN0IHskcHJlLCAkc3VmfSA9IGdldFByZUFuZFN1Zih7cHJlLCBzdWZ9KVxuICAgIGNvbnN0ICRvYmogPSAkKGA8c3Bhbj5gKVxuXG4gICAgJHNlbGYuYXBwZW5kKFskcHJlLCAkb2JqLCAkc3VmXSlcbiAgICByZXR1cm4gJG9ialxuICB9XG4gIGNvbnN0IGNyZWF0ZUlucHV0ID0gKHtwcmUsIHN1Zn0pID0+IHtcbiAgICBjb25zdCB7JHByZSwgJHN1Zn0gPSBnZXRQcmVBbmRTdWYoe3ByZSwgc3VmfSlcbiAgICBjb25zdCAkb2JqID0gJChgPGlucHV0IHR5cGU9XCJ0ZXh0XCI+YCkuZm9jdXMoZnVuY3Rpb24gKCkge1xuICAgICAgJCh0aGlzKS5zZWxlY3QoKVxuICAgIH0pLmtleXVwKGZ1bmN0aW9uIChlKSB7XG4gICAgICBpZiAoZS5rZXlDb2RlICE9PSAxMykgcmV0dXJuXG4gICAgICBpbml0KClcbiAgICAgIGVtaXRDYigpXG4gICAgfSlcblxuICAgICRzZWxmLmFwcGVuZChbJHByZSwgJG9iaiwgJHN1Zl0pXG4gICAgcmV0dXJuICRvYmpcbiAgfVxuICBjb25zdCBjcmVhdGVMaW5rID0gKHR4dCwgY2xpY2tGbikgPT4ge1xuICAgIGNvbnN0ICRvYmogPSAkKGA8YT5gKS5odG1sKHR4dCkuY3NzKHtcbiAgICAgICdwYWRkaW5nLWxlZnQnOiAxMCxcbiAgICAgICdwYWRkaW5nLXJpZ2h0JzogMTAsXG4gICAgfSkuYWRkQ2xhc3MoYGJvcmRlci1yaWdodCBib3JkZXItaW5mb2ApXG4gICAgJG9iai5fX2NsaWNrRm4gPSBjbGlja0ZuXG4gICAgJHNlbGYuYXBwZW5kKCRvYmopXG4gICAgcmV0dXJuICRvYmpcbiAgfVxuICBjb25zdCBlbWl0Q2IgPSAoKSA9PiB7XG4gICAgY29uc3Qgc2tpcCA9IChjdXJyZW50UGFnZSAtIDEpICogbGltaXRcbiAgICBjYih7dG90YWwsIGxpbWl0LCBjdXJyZW50UGFnZSwgc2tpcH0pXG4gIH1cblxuICBjb25zdCAkdG90YWwgPSBjcmVhdGVUZXh0KHtwcmU6IGDnuL3lhbFgLCBzdWY6IGDnrYZgfSlcbiAgY29uc3QgJHRvdGFsUGFnZSA9IGNyZWF0ZVRleHQoe3ByZTogYOWFsWAsIHN1ZjogYOmggWB9KVxuICBjb25zdCAkbGltaXQgPSBjcmVhdGVUZXh0KHtwcmU6IGDmr4/poIFgLCBzdWY6IGDnrYZgfSlcbiAgY29uc3QgJGN1cnJlbnRQYWdlID0gY3JlYXRlSW5wdXQoe3ByZTogYOebruWJjeWcqOesrGAsIHN1ZjogYOmggWB9KVxuICBjb25zdCAkcHJlUGFnZSA9IGNyZWF0ZUxpbmsoYOS4iuS4gOmggWAsICgpID0+IHtcbiAgICAkY3VycmVudFBhZ2UudmFsKHRvSW50KCRjdXJyZW50UGFnZS52YWwoKSkgLSAxKVxuICB9KVxuICBjb25zdCAkbmV4dFBhZ2UgPSBjcmVhdGVMaW5rKGDkuIvkuIDpoIFgLCAoKSA9PiB7XG4gICAgJGN1cnJlbnRQYWdlLnZhbCh0b0ludCgkY3VycmVudFBhZ2UudmFsKCkpICsgMSlcbiAgfSlcblxuICAkc2VsZi5hcHBlbmQoJG5leHRQYWdlKS5jc3MoeydtYXJnaW4tYm90dG9tJzogNX0pXG5cbiAgbGV0IG9yaWdpbkxpbWl0ID0gdG9JbnQobGltaXQpIC8vIOeUqOS+huavlOWwjSBsaW1pdCDmmK/lkKbmnInooqvmm7TmlrBcblxuICBfLmFzc2lnbigkc2VsZiwge1xuICAgIC8vIOWPluW+l+ebruWJjemggeaVuFxuICAgIHNldEN1cnJlbnRQYWdlOiAobnVtID0gMSkgPT4ge1xuICAgICAgJGN1cnJlbnRQYWdlLnZhbCh0b0ludChudW0pKVxuICAgIH0sXG4gIH0pXG5cbiAgaW5pdCgpXG4gIHJldHVybiAkc2VsZlxufSIsIi8vIGJvb3RzdHJhcCBNb2RhbCDkupLli5XlvI/nqpdcbiQuZm4ucG9wV2luZG93ID0gZnVuY3Rpb24gKHttb2RhbElkLCAkdGFyZ2V0Qm9keSwgJHRhcmdldEhlYWRlciwgJHRhcmdldEZvb3Rlcn0pIHtcbiAgY29uc3QgJHNlbGYgPSB0aGlzXG5cbiAgJChgIyR7bW9kYWxJZH1gKS5yZW1vdmUoKVxuXG4gIGNvbnN0ICRtb2RhbCA9ICQoYDxkaXYgY2xhc3M9XCJtb2RhbCBmYWRlXCIgaWQ9XCIke21vZGFsSWR9XCIgdGFiaW5kZXg9XCItMVwiIHJvbGU9XCJkaWFsb2dcIiBhcmlhLWhpZGRlbj1cInRydWVcIj5gKVxuICBjb25zdCAkZGlhbG9nID0gJChgPGRpdiBjbGFzcz1cIm1vZGFsLWRpYWxvZ1wiIHJvbGU9XCJkb2N1bWVudFwiPmApXG4gIGNvbnN0ICRjb250ZW50ID0gJChgPGRpdiBjbGFzcz1cIm1vZGFsLWNvbnRlbnRcIj5gKVxuICBjb25zdCAkaGVhZGVyID0gJChgPGRpdiBjbGFzcz1cIm1vZGFsLWhlYWRlclwiPmApXG4gIGNvbnN0ICRib2R5ID0gJChgPGRpdiBjbGFzcz1cIm1vZGFsLWJvZHlcIj5gKVxuICBjb25zdCAkZm9vdGVyID0gJChgPGRpdiBjbGFzcz1cIm1vZGFsLWZvb3RlclwiPmApXG4gIGNvbnN0ICRjbG9zZUJ0biA9ICQoYDxidXR0b24gdHlwZT1cImJ1dHRvblwiIGNsYXNzPVwiY2xvc2VcIiBkYXRhLWRpc21pc3M9XCJtb2RhbFwiIGFyaWEtbGFiZWw9XCJDbG9zZVwiPiA8c3BhbiBhcmlhLWhpZGRlbj1cInRydWVcIj4mdGltZXM7PC9zcGFuPjwvYnV0dG9uPmApXG5cbiAgaWYgKF8uaXNTdHJpbmcoJHRhcmdldEJvZHkpKSAkdGFyZ2V0Qm9keSA9ICQoJHRhcmdldEJvZHkpXG4gIGlmIChfLmlzU3RyaW5nKCR0YXJnZXRIZWFkZXIpKSAkdGFyZ2V0SGVhZGVyID0gJCgkdGFyZ2V0SGVhZGVyKVxuICBpZiAoXy5pc1N0cmluZygkdGFyZ2V0Rm9vdGVyKSkgJHRhcmdldEZvb3RlciA9ICQoJHRhcmdldEZvb3RlcilcblxuICAkc2VsZi5hdHRyKGBkYXRhLXRvZ2dsZWAsIGBtb2RhbGApLmF0dHIoYGRhdGEtdGFyZ2V0YCwgYCMke21vZGFsSWR9YClcblxuICAkbW9kYWwuYXBwZW5kKCRkaWFsb2cpXG4gICRkaWFsb2cuYXBwZW5kKCRjb250ZW50KVxuICAkY29udGVudC5hcHBlbmQoWyRoZWFkZXIsICRib2R5LCAkZm9vdGVyXSlcbiAgJGJvZHkuYXBwZW5kKCR0YXJnZXRCb2R5KVxuICBpZiAoJHRhcmdldEhlYWRlcikgJGhlYWRlci5hcHBlbmQoJHRhcmdldEhlYWRlcilcbiAgaWYgKCR0YXJnZXRGb290ZXIpICRmb290ZXIuYXBwZW5kKCR0YXJnZXRGb290ZXIpXG4gICRoZWFkZXIuYXBwZW5kKCRjbG9zZUJ0bilcblxuICAkKCdib2R5JykuYXBwZW5kKCRtb2RhbClcblxuICBfLmFzc2lnbih7XG4gICAgLy8g6Zqx6JeP6KaW56qXXG4gICAgaGlkZU1vZGFsOiAoKSA9PiB7XG4gICAgICAkY2xvc2VCdG4uY2xpY2soKVxuICAgIH0sXG4gIH0pXG5cbiAgcmV0dXJuICRzZWxmXG59IiwiLy8g5Y+W5b6X5bqV5LiL5omA5pyJ5YyF5ZCrIGlkL2NsYXNzIOeahCAkZG9tLCDkuKblr6vliLAgZG9tTWFwIOS4rVxuJC5mbi5yZWNlcHRhY2xlID0gZnVuY3Rpb24gKCkge1xuICBjb25zdCAkc2VsZiA9IHRoaXNcbiAgY29uc3QgZG9tTWFwID0ge31cblxuICAvLyBlLmcuICRzZWxmIOW6leS4i+WMheWQq+S6hiA8ZGl2IGNsYXNzPVwiYmxvY2tcIj48aW5wdXQgaWQ9XCJhXCI+PGlucHV0IGlkPVwiYlwiPlxuICAvLyBkb21NYXAgPSB7YmxvY2tDbGFzczogJCgnLmJsb2NrJyksIGE6ICQoJyNhJyksIGI6ICQoJyNiJyl9XG5cbiAgJHNlbGYuZmluZChgW2lkXWApLmVhY2goZnVuY3Rpb24gKCkge1xuICAgIGNvbnN0IGF0dHJWYWwgPSAkKHRoaXMpLmF0dHIoJ2lkJylcbiAgICBkb21NYXBbYCR7YXR0clZhbH1gXSA9ICQoYCMke2F0dHJWYWx9YClcbiAgfSlcblxuICAkc2VsZi5maW5kKGBbY2xhc3NdYCkuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgY29uc3QgYXR0clZhbCA9ICQodGhpcykuYXR0cignY2xhc3MnKVxuICAgIGRvbU1hcFtgJHthdHRyVmFsfUNsYXNzYF0gPSAkKGAuJHthdHRyVmFsfWApXG4gIH0pXG5cbiAgXy5hc3NpZ24oJHNlbGYsIHtcbiAgICAvLyDlj5blvpflupXkuIvmiYDmnInnmoQgJGRvbS52YWwoKVxuICAgIGdldE1hcFZhbDogKGRhdGEgPSB7fSkgPT4ge1xuICAgICAgXy5mb3JFYWNoKGRvbU1hcCwgKCRkLCBlbGVOYW1lKSA9PiB7XG4gICAgICAgIGlmICghXy5pc0Z1bmN0aW9uKCRkLnZhbCkpIHJldHVyblxuICAgICAgICBjb25zdCB2YWwgPSAkZC52YWwoKVxuICAgICAgICBpZiAodmFsID09PSB1bmRlZmluZWQgfHwgdmFsID09PSAnJykgcmV0dXJuXG4gICAgICAgIGRhdGFbZWxlTmFtZV0gPSB2YWxcbiAgICAgIH0pXG4gICAgICByZXR1cm4gZGF0YVxuICAgIH0sXG4gICAgZG9tTWFwOiBkb21NYXAsXG4gIH0pXG5cbiAgcmV0dXJuICRzZWxmXG59IiwiLy8g54mp5Lu2IHRvcCDkvY3nva7ooqvmjbLli5XliLDnlavpnaLlpJbmmYIsIOeUoueUnyBzY3JvbGwgdG9wIOaMiemIlVxuJC5mbi5zY3JvbGxUb3BCdG4gPSBmdW5jdGlvbiAoeyRjb250YWluZXIgPSAkKCdib2R5Jyl9ID0ge30pIHtcbiAgY29uc3QgJHNlbGYgPSB0aGlzXG5cbiAgY29uc3QgJHNob3dUb3BCdG5PdXRlciA9ICQoYDxkaXYvPmApLmNzcyh7XG4gICAgb3BhY2l0eTogMC44LFxuICAgIHBvc2l0aW9uOiAnZml4ZWQnLFxuICAgIGJvdHRvbTogMjAsXG4gICAgcmlnaHQ6IDQwLFxuICAgIGRpc3BsYXk6ICdpbmxpbmUtZmxleCcsXG4gIH0pLmhpZGUoKVxuXG4gIGNvbnN0IGhpZGVCdG5MZW5ndGggPSAyMFxuICBjb25zdCBoaWRlQnRuUmFkaXVzID0gaGlkZUJ0bkxlbmd0aCAvIDJcbiAgY29uc3QgJGNyb3NzID0gJCgnPGRpdj54PC9kaXY+JykuY3NzKHtcbiAgICBkaXNwbGF5OiAndGFibGUtY2VsbCcsXG4gICAgJ3RleHQtYWxpZ24nOiAnY2VudGVyJyxcbiAgICAndmVydGljYWwtYWxpZ24nOiAnbWlkZGxlJyxcbiAgICAnbGluZS1oZWlnaHQnOiAwLFxuICAgICdwYWRkaW5nLWJvdHRvbSc6IDQsXG4gIH0pXG4gIGNvbnN0ICRoaWRlQnRuID0gJChgPGRpdiBpZD1cImhpZGVCdG5TY3JvbGxUb3BCdG5cIj48ZGl2PmApLmNzcyh7XG4gICAgcG9zaXRpb246ICdyZWxhdGl2ZScsXG4gICAgZGlzcGxheTogJ3RhYmxlJyxcbiAgICB3aWR0aDogaGlkZUJ0bkxlbmd0aCxcbiAgICBoZWlnaHQ6IGhpZGVCdG5MZW5ndGgsXG4gICAgYm90dG9tOiBoaWRlQnRuUmFkaXVzLFxuICAgIGxlZnQ6IC1oaWRlQnRuUmFkaXVzLFxuICAgIGN1cnNvcjogJ3BvaW50ZXInLFxuICAgICdib3JkZXItcmFkaXVzJzogaGlkZUJ0blJhZGl1cyxcbiAgICAnYmFja2dyb3VuZC1jb2xvcic6ICdyZWQnLFxuICB9KS5hcHBlbmQoJGNyb3NzKS5jbGljaygoKSA9PiB7XG4gICAgJHNob3dUb3BCdG5PdXRlci5mYWRlT3V0KClcbiAgfSlcblxuICBjb25zdCAkc2hvd1RvcEJ0biA9ICQoYDxidXR0b24gY2xhc3M9XCJidG4gYnRuLXNlY29uZGFyeSBhbGlnbi1taWRkbGVcIj48aDM+LSBTY3JvbGwgVG9wIC08L2gzPjwvYnV0dG9uPmApLmNzcyh7XG4gICAgcG9zaXRpb246ICdyZWxhdGl2ZScsXG4gICAgJ2JveC1zaGFkb3cnOiAnNXB4IDVweCA1cHggcmdiYSgwLCAwLCAwLCAwLjIpJyxcbiAgfSkuY2xpY2soKCkgPT4ge1xuICAgIGNvbnN0ICR0YXJnZXQgPSAoJHNlbGZbMF0gPT09IHdpbmRvdykgPyAkKCdodG1sLCBib2R5JykgOiAkc2VsZlxuICAgICR0YXJnZXQuYW5pbWF0ZSh7c2Nyb2xsVG9wOiAwfSlcbiAgfSlcblxuICAkc2hvd1RvcEJ0bk91dGVyLmFwcGVuZChbJHNob3dUb3BCdG4sICRoaWRlQnRuXSlcbiAgJGNvbnRhaW5lci5hcHBlbmQoJHNob3dUb3BCdG5PdXRlcilcblxuICAkc2VsZi5zY3JvbGwoKCkgPT4ge1xuICAgIGNvbnN0IGhlaWdodCA9ICRzZWxmLmhlaWdodCgpXG4gICAgY29uc3QgdG9wID0gJHNlbGYuc2Nyb2xsVG9wKClcbiAgICBpZiAodG9wID4gaGVpZ2h0KSByZXR1cm4gJHNob3dUb3BCdG5PdXRlci5mYWRlSW4oKVxuICAgIHJldHVybiAkc2hvd1RvcEJ0bk91dGVyLmZhZGVPdXQoKVxuICB9KVxuXG4gIF8uYXNzaWduKCRzZWxmLCB7XG4gICAgc2Nyb2xsVG9Ub3A6ICgpID0+IHtcbiAgICAgICRzaG93VG9wQnRuLmNsaWNrKClcbiAgICB9LFxuICB9KVxuXG4gIHJldHVybiAkc2VsZlxufVxuIiwiLy8g6Kit572uIHRhYmxlIOeahCBoZWFkZXIg5o6S5bqP6aGv56S6XG4kLmZuLnRhYmxlSGVhZGVyU29ydGVyID0gZnVuY3Rpb24gKHtcbiAga2V5cyA9IFtdLCAvLyDmjIflrprlj6/ku6Xpu57pgbjmjpLluo/nmoQgaGVhZGVyIOmgheebrjsgZS5nLiBbJ25hbWUnLCAnY3JlYXRlZEF0J11cbiAgZm4gPSB7fSwgLy8g6bue6YG45o6S5bqP5pmC55qEIGNiXG4gIHNvcnRLZXkgPSAnJywgLy8g5oyH5a6a6aCQ6Kit6aGv56S65Y2H6ZmN5Yaq55qEIGhlYWRlciDpoIXnm647IGUuZy4gJ2NyZWF0ZWRBdCcsICctY3JlYXRlZEF0J1xufSA9IHt9KSB7XG4gIGNvbnN0ICRzZWxmID0gdGhpc1xuXG4gIGNvbnN0ICRoZWFkZXIgPSAkc2VsZi5maW5kKGB0cjpmaXJzdGApXG4gIGNvbnN0IHN0YXR1c0FyciA9IFt1bmRlZmluZWQsIGZhbHNlLCB0cnVlXSAvLyDljYflhqrni4DmhYvliJfooahcbiAgY29uc3QgbWF4U3RhdHVzSW5kZXggPSBzdGF0dXNBcnIubGVuZ3RoIC0gMVxuICBjb25zdCBpbmZvID0gKCgpID0+IHtcbiAgICBsZXQga2V5XG4gICAgbGV0IGFzY1xuICAgIGlmIChzb3J0S2V5LmluZGV4T2YoJy0nKSA9PT0gMCkge1xuICAgICAgYXNjID0gZmFsc2VcbiAgICAgIGtleSA9IHNvcnRLZXkuc2xpY2UoMSlcbiAgICB9IGVsc2UgaWYgKHNvcnRLZXkpIHtcbiAgICAgIGFzYyA9IHRydWVcbiAgICAgIGtleSA9IHNvcnRLZXlcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgIGtleSxcbiAgICAgIGFzYyxcbiAgICB9XG4gIH0pKClcbiAgY29uc3QgZ2V0SGVhZGVyRWxlbWVudCA9IChrZXkpID0+IHtcbiAgICByZXR1cm4gJGhlYWRlci5maW5kKGBbZGF0YS1rZXk9JyR7a2V5fSddYClcbiAgfVxuXG4gIF8uZm9yRWFjaChrZXlzLCAoa2V5KSA9PiB7XG4gICAgY29uc3QgJHRpdGxlID0gZ2V0SGVhZGVyRWxlbWVudChrZXkpXG4gICAgY29uc3Qgb3JpZ2luYWxIdG1sID0gJHRpdGxlLmh0bWwoKVxuICAgIGxldCBhc2MgPSAoa2V5ID09PSBpbmZvLmtleSkgPyBpbmZvLmFzYyA6IHVuZGVmaW5lZFxuICAgIGxldCBzdGF0dXNJbmRleCA9IHN0YXR1c0Fyci5pbmRleE9mKGFzYykgLy8g5Y2H5Yaq54uA5oWL55qEIGluZGV4XG5cbiAgICBjb25zdCBzZXRUckh0bWwgPSAoKSA9PiB7IC8vIOabtOaWsCBoZWFkZXIg55qE6aGv56S65paH5a2XXG4gICAgICBjb25zdCBzeW1ib2wgPSBhc2MgPyAn4oaRJyA6IChhc2MgPT09IGZhbHNlID8gJ+KGkycgOiAnJylcbiAgICAgIGNvbnN0IGh0bWwgPSBgJHtvcmlnaW5hbEh0bWx9JHtzeW1ib2x9YFxuICAgICAgJHRpdGxlLmh0bWwoaHRtbClcbiAgICB9XG5cbiAgICAkdGl0bGUuY3NzKHtjdXJzb3I6ICdwb2ludGVyJywgJ3RleHQtZGVjb3JhdGlvbic6ICd1bmRlcmxpbmUnfSlcbiAgICAkdGl0bGUuY2xpY2soKCkgPT4ge1xuICAgICAgLy8g6L2J5o+b5Y2H5Yaq54uA5oWLXG4gICAgICBpZiAoKytzdGF0dXNJbmRleCA+IG1heFN0YXR1c0luZGV4KSBzdGF0dXNJbmRleCA9IDBcbiAgICAgIGFzYyA9IHN0YXR1c0FycltzdGF0dXNJbmRleF1cblxuICAgICAgaW5mby5rZXkgPSAoYXNjICE9PSB1bmRlZmluZWQpID8gJHRpdGxlLmF0dHIoYGRhdGEta2V5YCkgOiB1bmRlZmluZWRcbiAgICAgIGluZm8uYXNjID0gYXNjXG4gICAgICBzZXRUckh0bWwoKVxuICAgICAgZm4oKVxuICAgIH0pXG4gICAgc2V0VHJIdG1sKClcbiAgfSlcblxuICBfLmFzc2lnbigkc2VsZiwge1xuICAgIC8vIOWPluW+l+aOkuW6j+WAvFxuICAgIGdldFNvcnRLZXk6ICgpID0+IHtcbiAgICAgIHJldHVybiBgJHsoaW5mby5hc2MgPT09IGZhbHNlKSA/ICctJyA6ICcnfSR7aW5mby5rZXkgfHwgJyd9YFxuICAgIH0sXG4gIH0pXG5cbiAgcmV0dXJuICRzZWxmXG59IiwiLy8g6Kit572uIHRhYmxlIOeahCBsYXlvdXRcbiQuZm4udGFibGVMYXlvdXQgPSBmdW5jdGlvbiAodGl0bGVNYXApIHtcbiAgY29uc3QgJHNlbGYgPSB0aGlzXG5cbiAgY29uc3QgJHRoZWFkID0gJChgPHRoZWFkPmApXG4gIGNvbnN0ICR0Ym9keSA9ICQoYDx0Ym9keT5gKVxuICBjb25zdCAkaGVhZFRyID0gJChgPHRyPmApXG4gIGNvbnN0ICRib2R5VHIgPSAkKGA8dHI+YClcblxuICBfLmZvckVhY2godGl0bGVNYXAsIChkYXRhS2V5LCB0aXRsZSkgPT4ge1xuICAgIGlmICghZGF0YUtleSkgcmV0dXJuXG4gICAgJGhlYWRUci5hcHBlbmQoYDx0aCBkYXRhLWtleT1cIiR7ZGF0YUtleX1cIj4ke3RpdGxlfTwvdGg+YClcbiAgICAkYm9keVRyLmFwcGVuZChgPHRkIGRhdGEta2V5PVwiJHtkYXRhS2V5fVwiPiR7dGl0bGV9PC90ZD5gKVxuICB9KVxuXG4gICRzZWxmLmh0bWwoJycpLmFwcGVuZChbJHRoZWFkLCAkdGJvZHldKS5hZGRDbGFzcyhgdGFibGUgdGFibGUtc3RyaXBlZCB0YWJsZS1ob3ZlcmApXG4gICR0aGVhZC5hcHBlbmQoJGhlYWRUcikuYWRkQ2xhc3MoYHRoZWFkLWRhcmtgKVxuICAkdGJvZHkuYXBwZW5kKCRib2R5VHIpXG5cbiAgcmV0dXJuICRzZWxmXG59IiwiLy8g6Kit572uIHRhYmxlIOizh+aWmeWIl+ihqFxuJC5mbi50YWJsZUxpc3QgPSBmdW5jdGlvbiAobGlzdCwgY2IsIHthZGRJbmRleCA9IHRydWV9ID0ge30pIHtcbiAgY29uc3QgJHNlbGYgPSB0aGlzXG4gIGNvbnN0IGluZGV4U2VhcmNoU3RyID0gYFtkYXRhLWluZGV4PSd0cnVlJ11gXG4gIGNvbnN0ICR0aGVhZCA9ICRzZWxmLmZpbmQoJ3RoZWFkJylcbiAgY29uc3QgJHRib2R5ID0gJHNlbGYuZmluZCgndGJvZHknKVxuICBjb25zdCAkaGVhZFRyID0gJHRoZWFkLmZpbmQoYHRyOmZpcnN0YClcbiAgY29uc3QgJGJvZHlUciA9ICR0Ym9keS5maW5kKGB0cjpmaXJzdGApXG5cbiAgaWYgKGFkZEluZGV4KSB7XG4gICAgJGhlYWRUci5wcmVwZW5kKCQoYDx0aD4jPC90aD5gKS5jc3Moe1xuICAgICAgd2lkdGg6IDUwLFxuICAgIH0pKVxuICAgICRib2R5VHIucHJlcGVuZCgkKGA8dGQgZGF0YS1pbmRleD1cInRydWVcIj48L3RkPmApKVxuICB9XG4gICR0aGVhZC5maW5kKCd0aCcpLmNzcyh7XG4gICAgcG9zaXRpb246ICdzdGlja3knLFxuICAgIHRvcDogLTEsXG4gIH0pXG4gICR0Ym9keS5odG1sKGBgKVxuXG4gIGNvbnN0ICR0ckxpc3QgPSBfLm1hcChsaXN0LCAoZGF0YSwgaW5kZXgpID0+IHtcbiAgICBjb25zdCAkdHIgPSAkYm9keVRyLmNsb25lKClcbiAgICAkdHIuZmluZChpbmRleFNlYXJjaFN0cikuaHRtbChpbmRleCArIDEpXG4gICAgJHRyLmZpbmQoYFtkYXRhLWtleV1gKS5lYWNoKChpLCB0YXJnZXQpID0+IHtcbiAgICAgIGNvbnN0ICRlbGUgPSAkKHRhcmdldClcbiAgICAgIGNvbnN0IGtleSA9ICRlbGUuYXR0cihgZGF0YS1rZXlgKVxuXG4gICAgICAkZWxlLmh0bWwoYGApXG5cbiAgICAgIGxldCB2YWwgPSBfLmdldChkYXRhLCBrZXkpXG4gICAgICB2YWwgPSAhXy5pc05pbCh2YWwpID8gdmFsIDogYGBcbiAgICAgIGlmIChjYikge1xuICAgICAgICBjb25zdCBnb3RWYWwgPSBjYih7dmFsLCBrZXksIGRhdGEsICR0ciwgJGVsZSwgaW5kZXh9KVxuICAgICAgICBpZiAoZ290VmFsID09PSB1bmRlZmluZWQpIHJldHVyblxuICAgICAgICB2YWwgPSBnb3RWYWxcbiAgICAgIH1cbiAgICAgICRlbGUuaHRtbCh2YWwpXG4gICAgfSlcbiAgICByZXR1cm4gJHRyXG4gIH0pXG5cbiAgJHRib2R5LmFwcGVuZCgkdHJMaXN0KVxuXG4gIGNvbnN0IHRsID0gZ3NhcC50aW1lbGluZSgpXG5cbiAgdGwuZnJvbSgkdHJMaXN0LCB7XG4gICAgZHVyYXRpb246IDAuMiwgZWFzZTogJ2JhY2suaW5PdXQoMSknLCB4OiAxMDAsIG9wYWNpdHk6IDAsIHN0YWdnZXI6IDAuMDQsXG4gICAgY2xlYXJQcm9wczogJ3RyYW5zZm9ybScsXG4gIH0pXG5cbiAgXy5hc3NpZ24oJHNlbGYsIHtcbiAgICAvLyDlj5blvpfmqJnpoYzmrITkvY1cbiAgICBnZXRIZWFkZXJFbGVtZW50OiAoa2V5KSA9PiB7XG4gICAgICByZXR1cm4gJHNlbGYuZmluZCgndHI6Zmlyc3QnKS5maW5kKGBbZGF0YS1rZXk9JyR7a2V5fSddYClcbiAgICB9LFxuICB9KVxuXG4gIHJldHVybiAkc2VsZlxufVxuIiwiLy8g5a6i6KO95YyWIHRleHRhcmVhIOi8uOWFpeashOS9jVxuJC5mbi50ZXh0YXJlYSA9IGZ1bmN0aW9uICh7dGl0bGUgPSAnJywgd2lkdGggPSAnYXV0byd9ID0ge30pIHtcbiAgY29uc3QgJHNlbGYgPSB0aGlzXG5cbiAgY29uc3QgJHRpdGxlID0gJChgPHNwYW4+JHt0aXRsZX08L3NwYW4+YClcbiAgY29uc3QgJHRleHRhcmVhID0gJChgPHRleHRhcmVhIGNsYXNzPVwiZm9ybS1jb250cm9sXCIgYXJpYS1sYWJlbD1cIiR7JHRpdGxlfVwiPjwvdGV4dGFyZWE+YCkuY3NzKHt9KVxuXG4gICRzZWxmLmlucHV0R3JvdXAoWyR0ZXh0YXJlYV0sIHtwcmVwZW5kSXRlbXM6IFskdGl0bGVdfSkuY3NzKHtcbiAgICB3aWR0aCxcbiAgfSlcblxuICBfLmFzc2lnbigkc2VsZiwge1xuICAgIC8vIOWPluW+l+i8uOWFpeashOS9jVxuICAgIGdldFRleHRhcmVhOiAoKSA9PiB7XG4gICAgICByZXR1cm4gJHRleHRhcmVhXG4gICAgfSxcbiAgfSlcblxuICByZXR1cm4gJHNlbGZcbn0iLCIvLyDlrqLoo73ljJbmmYLplpPnr4TlnI3pgbjmk4dcbiQuZm4udGltZVJhbmdlUGlja2VycyA9IGZ1bmN0aW9uICh7XG4gIHRpdGxlID0gJ+aZgumWk+WNgOmWkycsXG4gIHN0YXJ0T3B0ID0ge30sIC8vIOi1t+Wni+aXpeacn+S4i+aLiemBuOWWrueahCBvcHRpb25zXG4gIGVuZE9wdCA9IHt9LCAvLyDntZDmnZ/ml6XmnJ/kuIvmi4npgbjllq7nmoQgb3B0aW9uc1xuICBzaG93U3RhcnQgPSB0cnVlLCAvLyDpoa/npLrotbfntZDml6VcbiAgc2hvd0VuZCA9IHRydWUsIC8vIOmhr+ekuue1kOadn+aXpVxuICBzaG93SG91ciA9IGZhbHNlLFxuICBzaG93TWludXRlID0gZmFsc2UsXG4gIHNob3dTZWNvbmQgPSBmYWxzZSxcbiAgZGVmU3RhcnRHZXRWYWwgPSAnJywgLy8g5aaC5p6c5Y+W5b6X6ZaL5aeL5pmC6ZaT5YC854K656m6LCDpoJDoqK3nmoTlgLxcbiAgZGVmRW5kR2V0VmFsID0gJycsIC8vIOWmguaenOWPluW+l+e1kOadn+aZgumWk+WAvOeCuuepuiwg6aCQ6Kit55qE5YC8XG59ID0ge30pIHtcbiAgY29uc3QgJHNlbGYgPSB0aGlzXG5cbiAgY29uc3QgZ2V0VGltZURyb3BEb3duID0gKHRpdGxlLCBtYXhDb3VudCwgY29sdW1uID0gMikgPT4ge1xuICAgIGNvbnN0IGRyb3Bkb3duID0gJChgPGRpdj5gKVxuICAgIGNvbnN0IHRpbWVBcnIgPSBbXVxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbWF4Q291bnQ7IGkrKykge1xuICAgICAgdGltZUFyci5wdXNoKF8ucGFkU3RhcnQoU3RyaW5nKGkpLCAyLCAnMCcpKVxuICAgIH1cbiAgICBkcm9wZG93bi5kcm9wRG93bih0aW1lQXJyLCB7ZGVmVGl0bGU6IHRpdGxlLCBzdHlsZTogJ3NlY29uZGFyeScsIHNob3dBcnJvdzogZmFsc2UsIGNvbHVtbn0pLmNsaWNrSXRlbSgpXG4gICAgZHJvcGRvd24uZ2V0QnRuKCkuY3NzKHtcbiAgICAgICdib3JkZXItcmFkaXVzJzogMCxcbiAgICB9KS5hZGRDbGFzcygnZm9ybS1jb250cm9sJylcbiAgICByZXR1cm4gZHJvcGRvd25cbiAgfVxuICBjb25zdCBjcmVhdGVIb3VyRHJvcERvd24gPSAoKSA9PiB7XG4gICAgcmV0dXJuIGdldFRpbWVEcm9wRG93bign5pmCJywgMjQpXG4gIH1cbiAgY29uc3QgY3JlYXRlTWludXRlRHJvcERvd24gPSAoKSA9PiB7XG4gICAgcmV0dXJuIGdldFRpbWVEcm9wRG93bign5YiGJywgNjAsIDYpXG4gIH1cbiAgY29uc3QgY3JlYXRlU2Vjb25kRHJvcERvd24gPSAoKSA9PiB7XG4gICAgcmV0dXJuIGdldFRpbWVEcm9wRG93bign56eSJywgNjAsIDYpXG4gIH1cblxuICBjb25zdCBpbnB1dFN0ciA9IGA8aW5wdXQgdHlwZT1cInRleHRcIiBzaXplPVwiMTBcIj5gXG4gIGNvbnN0ICRzdGFydERhdGUgPSAkKGlucHV0U3RyKS5kYXRlUGlja2VyKHN0YXJ0T3B0KVxuICBjb25zdCAkc3RhcnRIb3VyID0gY3JlYXRlSG91ckRyb3BEb3duKClcbiAgY29uc3QgJHN0YXJ0TWludXRlID0gY3JlYXRlTWludXRlRHJvcERvd24oKVxuICBjb25zdCAkc3RhcnRTZWNvbmQgPSBjcmVhdGVTZWNvbmREcm9wRG93bigpXG5cbiAgY29uc3QgJHRvID0gJChgPHNwYW4+LTwvc3Bhbj5gKS5jc3Moe1xuICAgIHBhZGRpbmc6IDIsXG4gICAgJ2JhY2tncm91bmQtY29sb3InOiAncmdiYSgwLDAsMCwwKScsXG4gICAgJ2JvcmRlci1jb2xvcic6ICdyZ2JhKDAsMCwwLDApJyxcbiAgICAnYm9yZGVyLXJhZGl1cyc6IDAsXG4gIH0pXG5cbiAgY29uc3QgJGVuZERhdGUgPSAkKGlucHV0U3RyKS5kYXRlUGlja2VyKGVuZE9wdClcbiAgY29uc3QgJGVuZEhvdXIgPSBjcmVhdGVIb3VyRHJvcERvd24oKVxuICBjb25zdCAkZW5kTWludXRlID0gY3JlYXRlTWludXRlRHJvcERvd24oKVxuICBjb25zdCAkZW5kU2Vjb25kID0gY3JlYXRlU2Vjb25kRHJvcERvd24oKVxuXG4gIC8vIOWIneWni+eahOmWi+Wni+e1kOadn+aXpeacn+WAvFxuICBjb25zdCBzdGFydERhdGVWYWwgPSAkc3RhcnREYXRlLnZhbCgpXG4gIGNvbnN0IGVuZERhdGVWYWwgPSAkZW5kRGF0ZS52YWwoKVxuXG4gIGlmICghc2hvd1N0YXJ0KSB7XG4gICAgJHN0YXJ0RGF0ZS5oaWRlKClcbiAgICAkdG8uaGlkZSgpXG4gIH1cbiAgaWYgKCFzaG93RW5kKSB7XG4gICAgJGVuZERhdGUuaGlkZSgpXG4gICAgJHRvLmhpZGUoKVxuICB9XG4gIGlmICghc2hvd0hvdXIpIHtcbiAgICAkc3RhcnRIb3VyLmhpZGUoKVxuICAgICRlbmRIb3VyLmhpZGUoKVxuICB9XG4gIGlmICghc2hvd01pbnV0ZSkge1xuICAgICRzdGFydE1pbnV0ZS5oaWRlKClcbiAgICAkZW5kTWludXRlLmhpZGUoKVxuICB9XG4gIGlmICghc2hvd1NlY29uZCkge1xuICAgICRzdGFydFNlY29uZC5oaWRlKClcbiAgICAkZW5kU2Vjb25kLmhpZGUoKVxuICB9XG5cbiAgY29uc3QgJHRpdGxlID0gJChgPHNwYW4+JHt0aXRsZX08L3NwYW4+YClcbiAgY29uc3QgaXRlbUFyciA9IFskc3RhcnREYXRlLCAkc3RhcnRIb3VyLCAkc3RhcnRNaW51dGUsICRzdGFydFNlY29uZCwgJHRvLCAkZW5kRGF0ZSwgJGVuZEhvdXIsICRlbmRNaW51dGUsICRlbmRTZWNvbmRdXG4gICRzZWxmLmlucHV0R3JvdXAoaXRlbUFyciwge3ByZXBlbmRJdGVtczogWyR0aXRsZV19KVxuXG4gIF8uYXNzaWduKCRzZWxmLCB7XG4gICAgLy8g5Y+W5b6X5oiW6Kit572u6LW35aeL5pmC6ZaTXG4gICAgc3RhcnREYXRlVGltZVZhbDogKHZhbCkgPT4ge1xuICAgICAgaWYgKF8uaXNOaWwodmFsKSkge1xuICAgICAgICBjb25zdCBkZWZTdGFydERhdGUgPSBkZWZTdGFydEdldFZhbCA/IG1vbWVudChkZWZTdGFydEdldFZhbCkuZm9ybWF0KCdZWVlZLU1NLUREJykgOiAnJ1xuICAgICAgICBsZXQgZGF0ZSA9ICRzdGFydERhdGUudmFsKCkgfHwgZGVmU3RhcnREYXRlXG5cbiAgICAgICAgaWYgKGRhdGUpIHsgLy8g5L+u5q2j5pel5pyf6Ly45YWl5qC85byPXG4gICAgICAgICAgY29uc3QgaXNWYWxpZCA9IG1vbWVudChkYXRlLCAnWVlZWS1NTS1ERCcsIHRydWUpLmlzVmFsaWQoKVxuICAgICAgICAgIGlmICghaXNWYWxpZCkgZGF0ZSA9IGRlZlN0YXJ0RGF0ZVxuICAgICAgICB9XG5cbiAgICAgICAgJHN0YXJ0RGF0ZS52YWwoZGF0ZSlcbiAgICAgICAgaWYgKCFkYXRlKSByZXR1cm4gZGF0ZVxuXG4gICAgICAgIGxldCBzdHIgPSBkYXRlICsgJyAnICsgJHN0YXJ0SG91ci52YWwoKSArICc6JyArICRzdGFydE1pbnV0ZS52YWwoKSArICc6JyArICRzdGFydFNlY29uZC52YWwoKVxuICAgICAgICBzdHIgPSBtb21lbnQoc3RyKS50b0lTT1N0cmluZygpXG4gICAgICAgIHJldHVybiBzdHJcbiAgICAgIH1cbiAgICAgIGNvbnN0IHRpbWUgPSBtb21lbnQodmFsKVxuICAgICAgJHN0YXJ0RGF0ZS52YWwodGltZS5mb3JtYXQoJ1lZWVktTU0tREQnKSlcbiAgICAgICRzdGFydEhvdXIudmFsKHRpbWUuZm9ybWF0KCdISCcpKVxuICAgICAgJHN0YXJ0TWludXRlLnZhbCh0aW1lLmZvcm1hdCgnbW0nKSlcbiAgICAgICRzdGFydFNlY29uZC52YWwodGltZS5mb3JtYXQoJ3NzJykpXG4gICAgfSxcbiAgICAvLyDlj5blvpfmiJboqK3nva7ntZDmnZ/mmYLplpNcbiAgICBlbmREYXRlVGltZVZhbDogKHZhbCkgPT4ge1xuICAgICAgaWYgKF8uaXNOaWwodmFsKSkge1xuICAgICAgICBsZXQgZGF0ZSA9ICRlbmREYXRlLnZhbCgpXG5cbiAgICAgICAgaWYgKGRhdGUpIHsgLy8g5L+u5q2j5pel5pyf6Ly45YWl5qC85byPXG4gICAgICAgICAgY29uc3QgaXNWYWxpZCA9IG1vbWVudChkYXRlLCAnWVlZWS1NTS1ERCcsIHRydWUpLmlzVmFsaWQoKVxuICAgICAgICAgIGlmICghaXNWYWxpZCkgZGF0ZSA9IGRlZkVuZEdldFZhbCA/IG1vbWVudChkZWZFbmRHZXRWYWwpLmZvcm1hdCgnWVlZWS1NTS1ERCcpIDogJydcbiAgICAgICAgfVxuXG4gICAgICAgICRlbmREYXRlLnZhbChkYXRlKVxuICAgICAgICBpZiAoIWRhdGUpIHJldHVybiBkZWZFbmRHZXRWYWxcblxuICAgICAgICBsZXQgc3RyID0gZGF0ZSArICcgJyArICRlbmRIb3VyLnZhbCgpICsgJzonICsgJGVuZE1pbnV0ZS52YWwoKSArICc6JyArICRlbmRTZWNvbmQudmFsKClcbiAgICAgICAgc3RyID0gbW9tZW50KHN0cikudG9JU09TdHJpbmcoKVxuICAgICAgICByZXR1cm4gc3RyXG4gICAgICB9XG4gICAgICBjb25zdCB0aW1lID0gbW9tZW50KHZhbClcbiAgICAgICRlbmREYXRlLnZhbCh0aW1lLmZvcm1hdCgnWVlZWS1NTS1ERCcpKVxuICAgICAgJGVuZEhvdXIudmFsKHRpbWUuZm9ybWF0KCdISCcpKVxuICAgICAgJGVuZE1pbnV0ZS52YWwodGltZS5mb3JtYXQoJ21tJykpXG4gICAgICAkZW5kU2Vjb25kLnZhbCh0aW1lLmZvcm1hdCgnc3MnKSlcbiAgICB9LFxuICAgIC8vIOa4heepuuaXpeacn+aZgumWk1xuICAgIHJlc2V0RGVmOiAoe3Jlc2V0U3RhcnQgPSB0cnVlLCByZXNldEVuZCA9IHRydWV9ID0ge30pID0+IHtcbiAgICAgIGlmIChyZXNldFN0YXJ0KSB7XG4gICAgICAgICRzdGFydERhdGUudmFsKHN0YXJ0RGF0ZVZhbClcbiAgICAgICAgXy5mb3JFYWNoKFskc3RhcnRIb3VyLCAkc3RhcnRNaW51dGUsICRzdGFydFNlY29uZF0sICgkZG9tKSA9PiB7XG4gICAgICAgICAgJGRvbS52YWwoJzAwJylcbiAgICAgICAgfSlcbiAgICAgIH1cbiAgICAgIGlmIChyZXNldEVuZCkge1xuICAgICAgICAkZW5kRGF0ZS52YWwoZW5kRGF0ZVZhbClcbiAgICAgICAgXy5mb3JFYWNoKFskZW5kSG91ciwgJGVuZE1pbnV0ZSwgJGVuZFNlY29uZF0sICgkZG9tKSA9PiB7XG4gICAgICAgICAgJGRvbS52YWwoJzAwJylcbiAgICAgICAgfSlcbiAgICAgIH1cbiAgICB9LFxuICAgIGdldFN0YXJ0SW5wdXQ6ICgpID0+IHtcbiAgICAgIHJldHVybiAkc3RhcnREYXRlXG4gICAgfSxcbiAgICBnZXRFbmRJbnB1dDogKCkgPT4ge1xuICAgICAgcmV0dXJuICRlbmREYXRlXG4gICAgfSxcbiAgfSlcblxuICByZXR1cm4gJHNlbGZcbn1cbiIsIi8vIOWuouijvea1ruWLleaPkOekuuioiuaBr1xuJC5mbi50b29sVGlwID0gZnVuY3Rpb24gKHRpdGxlLCBvcHQgPSB7fSkge1xuICBjb25zdCAkc2VsZiA9IHRoaXNcblxuICAkc2VsZi5hdHRyKHt0aXRsZTogdGl0bGV9KS50b29sdGlwKG9wdClcblxuICByZXR1cm4gJHNlbGZcbn0iLCIvLyDlrqLoo73ljJbkuIrlgrPmqpTmoYjlip/og71cbmxldCBpbmRleCA9IDBcbiQuZm4udXBsb2FkRmlsZSA9IGZ1bmN0aW9uICh1cmwsIHt0aXRsZSA9IGDpgbjmk4fmqpTmoYhgLCBidG5UeHQgPSBg5LiK5YKzYH0gPSB7fSkge1xuICBjb25zdCAkc2VsZiA9IHRoaXNcblxuICBjb25zdCB0eHQgPSBg6bue5pOK6YG45pOH5qqU5qGIYFxuICBjb25zdCBmaWxlSWQgPSBgdXBsb2FkRmlsZSR7aW5kZXgrK31gXG5cbiAgY29uc3QgZ2V0RmlsZSA9ICgpID0+IHtcbiAgICByZXR1cm4gJGlucHV0RmlsZVswXS5maWxlc1swXVxuICB9XG4gIGNvbnN0IGdldEZpbGVuYW1lID0gKCkgPT4ge1xuICAgIGNvbnN0IGZpbGUgPSBnZXRGaWxlKClcbiAgICByZXR1cm4gZmlsZSA/IGZpbGUubmFtZSA6ICcnXG4gIH1cbiAgY29uc3Qgc2V0SW5wdXRGaWxlRGlzcGxheSA9ICgpID0+IHtcbiAgICBjb25zdCBmaWxlbmFtZSA9IGdldEZpbGVuYW1lKClcbiAgICBjb25zdCBuZXdUeHQgPSBmaWxlbmFtZSB8fCB0eHRcbiAgICAkbGFiZWwuaHRtbChuZXdUeHQpXG4gIH1cblxuICBjb25zdCAkZmlsZURpdiA9ICQoYDxkaXYgY2xhc3M9XCJjdXN0b20tZmlsZVwiPmApXG4gIGNvbnN0ICRpbnB1dEZpbGUgPSAkKGA8aW5wdXQgdHlwZT1cImZpbGVcIiBjbGFzcz1cIlwiIGlkPVwiJHtmaWxlSWR9XCI+YCkuY3NzKHtcbiAgICB3aWR0aDogJzlyZW0nLFxuICB9KS5jaGFuZ2UoKCkgPT4ge1xuICAgIHNldElucHV0RmlsZURpc3BsYXkoKVxuICB9KVxuICBjb25zdCAkbGFiZWwgPSAkKGA8bGFiZWwgY2xhc3M9XCJjdXN0b20tZmlsZS1sYWJlbFwiIGZvcj1cIiR7ZmlsZUlkfVwiPiR7dHh0fTwvbGFiZWw+YCkuY3NzKHtcbiAgICBvdmVyZmxvdzogJ2hpZGRlbicsXG4gICAgaGVpZ2h0OiAnMTAwJScsXG4gIH0pXG4gICRmaWxlRGl2LmFwcGVuZChbJGlucHV0RmlsZSwgJGxhYmVsXSlcblxuICBjb25zdCAkdGl0bGUgPSAkKGA8c3Bhbj4ke3RpdGxlfTwvc3Bhbj5gKVxuICBjb25zdCAkdXBsb2FkQnRuID0gJChgPGJ1dHRvbiBjbGFzcz1cImJ0biBidG4tcHJpbWFyeVwiPiR7YnRuVHh0fTwvYnV0dG9uPmApLmNsaWNrKCgpID0+IHtcbiAgICAkdXBsb2FkQnRuLmRpc2FibGVkKHRydWUpXG5cbiAgICBjb25zdCBmb3JtRGF0YSA9IG5ldyBGb3JtRGF0YSgpXG4gICAgY29uc3QgZmlsZSA9IGdldEZpbGUoKVxuICAgIGZvcm1EYXRhLmFwcGVuZCgnZmlsZUZpZWxkTmFtZScsIGZpbGUpIC8vIE5vdGUuIOashOS9jeWQjeeoseWPr+S7pemaqOS+v+WPllxuXG4gICAgY29uc3Qgc3VjID0gKHJlcykgPT4ge1xuICAgICAgJC5nbG9iYWwuc2hvd0luZm8ocmVzKVxuICAgIH1cbiAgICBjb25zdCBhbHdheXMgPSAoKSA9PiB7XG4gICAgICAkdXBsb2FkQnRuLmRpc2FibGVkKGZhbHNlKVxuICAgICAgJGlucHV0RmlsZS52YWwoYGApXG4gICAgICAkbGFiZWwuaHRtbCh0eHQpXG4gICAgfVxuXG4gICAgJC5nbG9iYWwuYWooe1xuICAgICAgbWV0aG9kOiBgUE9TVGAsXG4gICAgICB1cmwsXG4gICAgICBkYXRhOiBmb3JtRGF0YSxcbiAgICAgIHByb2Nlc3NEYXRhOiBmYWxzZSxcbiAgICAgIGNvbnRlbnRUeXBlOiBmYWxzZSxcbiAgICAgIHN1YyxcbiAgICB9KS5hbHdheXMoYWx3YXlzKVxuICB9KVxuICAkc2VsZi5pbnB1dEdyb3VwKFskZmlsZURpdl0sIHtwcmVwZW5kSXRlbXM6IFskdGl0bGVdLCBhcHBlbmRJdGVtczogWyR1cGxvYWRCdG5dfSlcblxuICBzZXRJbnB1dEZpbGVEaXNwbGF5KClcblxuICByZXR1cm4gJHNlbGZcbn0iLCIvLyDkuIvmi4npgbjllq4gKyBpbnB1dCDovLjlhaXmrITkvY1cbiQuZm4udmFyaWFibGVJbnB1dCA9IGZ1bmN0aW9uIChkcm9wRG93bkFyciwge2Ryb3BEb3duT3B0fSA9IHt9KSB7XG4gIGNvbnN0ICRzZWxmID0gdGhpc1xuXG4gIGNvbnN0ICRkcm9wRG93biA9ICQoJzxkaXY+JykuZHJvcERvd24oZHJvcERvd25BcnIsIHsuLi5kcm9wRG93bk9wdCwgZGVmVGl0bGU6ICcnfSkuY2xpY2tJdGVtKClcbiAgJGRyb3BEb3duLmZpbmQoJ2J1dHRvbicpLmNzcyh7XG4gICAgJ2JvcmRlci10b3AtcmlnaHQtcmFkaXVzJzogMCxcbiAgICAnYm9yZGVyLWJvdHRvbS1yaWdodC1yYWRpdXMnOiAwLFxuICB9KVxuICBjb25zdCAkaW5wdXQgPSAkKCc8aW5wdXQgdHlwZT1cInRleHRcIiBjbGFzcz1cImZvcm0tY29udHJvbFwiPicpXG4gICRzZWxmLmlucHV0R3JvdXAoWyRpbnB1dF0sIHtwcmVwZW5kSXRlbXM6IFskZHJvcERvd25dfSlcblxuICBfLmFzc2lnbigkc2VsZiwge1xuICAgIC8vIOWPluW+l+aIluioree9ruS4i+aLiemBuOWWrueahOWAvFxuICAgIGRyb3BEb3duVmFsOiAodmFsKSA9PiB7XG4gICAgICByZXR1cm4gJGRyb3BEb3duLnZhbCh2YWwpXG4gICAgfSxcbiAgICAvLyDlj5blvpfmiJboqK3nva7ovLjlhaXmrITkvY3lgLxcbiAgICBpbnB1dFZhbDogKHZhbCkgPT4ge1xuICAgICAgaWYgKF8uaXNVbmRlZmluZWQodmFsKSkgcmV0dXJuICRpbnB1dC52YWwoKVxuICAgICAgJGlucHV0LnZhbCh2YWwpXG4gICAgfSxcbiAgICAvLyDmuIXpmaTpgbjpoIXlj4rloavlr6vnmoTlgLxcbiAgICBjbGVhbjogKCkgPT4ge1xuICAgICAgJGRyb3BEb3duLnVuc2VsZWN0QWxsKClcbiAgICAgICRpbnB1dC52YWwoJycpXG4gICAgfSxcbiAgfSlcblxuICByZXR1cm4gJHNlbGZcbn0iLCIvLyBZQlQg5biz6Jmf6Lqr5Lu95LiL5ouJ6YG45ZauXG4kLmZuLmFjY291bnRSb2xlT3B0aW9uID0gZnVuY3Rpb24gKCkge1xuICBjb25zdCAkc2VsZiA9IHRoaXNcblxuICAkLmdsb2JhbC5haih7XG4gICAgdXJsOiBgL21haW4vYWNjb3VudC9nZXRSb2xlTWFwYCxcbiAgICBkYXRhOiB7fSxcbiAgICBzdWM6IChyZXMpID0+IHtcbiAgICAgIGNvbnN0IHJvbGVNYXAgPSByZXMucm9sZU1hcFxuICAgICAgY29uc3Qgcm9sZXMgPSBfLm1hcChyb2xlTWFwLCAoY2hpbmVzZU5hbWUsIHJvbGUpID0+IHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICB2YWw6IHJvbGUsXG4gICAgICAgICAgaHRtbDogY2hpbmVzZU5hbWUsXG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgICBjb25zdCBmbkRyb3BEb3duT3B0ID0ge1xuICAgICAgICBhZGRFbXB0eTogdHJ1ZSxcbiAgICAgICAgZGVmVGl0bGU6IGDouqvku71gLFxuICAgICAgICBzdHlsZTogYHN1Y2Nlc3NgLFxuICAgICAgfVxuICAgICAgJHNlbGYuZHJvcERvd24ocm9sZXMsIGZuRHJvcERvd25PcHQpXG4gICAgfSxcbiAgfSlcblxuICByZXR1cm4gJHNlbGZcbn1cbiJdfQ==
